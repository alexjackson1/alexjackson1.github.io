{"version":3,"sources":["config/constants.js","model/api/errors/index.js","utils/utils.js","components/Loading/index.js","actions/auth.js","validators/form/index.js","actions/types.js","model/api/types.js","components/Toaster/index.js","App.js","utils/serviceWorker.js","reducers/analysis.js","reducers/auth.js","reducers/certainty.js","reducers/editor.js","model/api/validation/validation.js","model/api/validation/consistency.js","model/api/validation/index.js","model/api/validation/SafeUpdate.js","reducers/model.js","reducers/scorecard.js","reducers/index.js","index.js","model/api/components/Cost/index.js","model/api/components/Phase/index.js","model/api/components/Programme/index.js","model/api/components/Beneficiary/index.js","model/api/components/Group/index.js","model/api/components/Perspective/index.js","model/api/components/Objective/index.js","model/api/components/Measure/index.js","model/api/components/Stakeholder/index.js","model/api/components/Thread/index.js","model/api/components/Deliverable/index.js","model/api/components/Benefit/index.js","model/api/components/BalancedScorecard/index.js","model/api/components/Scenario/index.js","model/api/components/BenefitSensitivity/index.js","model/api/components/BenefitAttribution/index.js","model/api/components/BenefitBuildup/index.js","model/api/components/BenefitBuildupSensitivity/index.js","model/api/components/CostAttribution/index.js","model/api/components/DeliverableSensitivity/index.js","model/api/components/Model/index.js","model/api/components/Parameter/index.js","model/api/components/PhaseSensitivity/index.js","model/api/components/PhaseCostSensitivity/index.js","model/api/components/StakeholderBenefits/index.js","model/api/components/Theme/index.js","model/api/index.js"],"names":["__webpack_require__","d","__webpack_exports__","DATE_FORMAT","GANTT_DATE_FORMAT","UNLIMITED_LICENSE_STRING","GRAPH_SELECTOR_TITLE","RESULT_TITLE","DELETE_CONFIRM_TEXT","DELETE_THREAD_DISCLAIMER","DELETE_PERSPECTIVE_DISCLAIMER","DELETE_OBJECTIVE_DISCLAIMER","DELETE_STRATEGY_THREAD_DISCLAIMER","THEME_ID","THEME_KEY","THEME_FORM","THEME_TYPE","ROOT_THEME","PERSPECTIVE_ID","PERSPECTIVE_KEY","PERSPECTIVE_ICON","PERSPECTIVE_FORM","PERSPECTIVE_TYPE","PERSPECTIVE_NAMES","OBJECTIVE_ID","OBJECTIVE_KEY","OBJECTIVE_ICON","OBJECTIVE_FORM","OBJECTIVE_TYPE","MEASURE_ID","MEASURE_KEY","MEASURE_ICON","MEASURE_FORM","MEASURE_TYPE","STRATEGY_MAP_TYPE_IDS","STRATEGY_MAP_TYPES","STRATEGY_ROOT_ID","STRATEGY_ROOT_TYPE","STRATEGY_DATA_ID","STRATEGY_DATA_TYPE","PERSPECTIVE_RAG_ID","PERSPECTIVE_RAG_NAME","PERSPECTIVE_RAG_ICON","PERSPECTIVE_RAG_TYPE","SCORECARD_RAG_ID","SCORECARD_RAG_NAME","SCORECARD_RAG_ICON","SCORECARD_RAG_TYPE","BENEFIT_ID","BENEFIT_KEY","BENEFIT_TYPE_FINANCIAL","BENEFIT_TYPE_FINANCIAL_LABEL","BENEFIT_TYPE_NON_FINANCIAL","BENEFIT_TYPE_NON_FINANCIAL_LABEL","BENEFIT_FORM","BENEFIT_TYPE","COST_ID","COST_KEY","COST_TYPE_DEVELOPMENT","COST_TYPE_DEVELOPMENT_LABEL","COST_TYPE_SUPPORT","COST_TYPE_SUPPORT_LABEL","COST_FORM","COST_TYPE","DELIVERABLE_ID","DELIVERABLE_KEY","DELIVERABLE_FORM","DELIVERABLE_TYPE","STAKEHOLDER_ID","STAKEHOLDER_KEY","STAKEHOLDER_FORM","STAKEHOLDER_TYPE","PHASE_ID","PHASE_KEY","PHASE_SLIP_RULE_FIXED","PHASE_SLIP_RULE_FIXED_LABEL","PHASE_SLIP_RULE_TIME_AND_MATERIALS","PHASE_SLIP_RULE_TIME_AND_MATERIALS_LABEL","PHASE_LINK_START_TO_START","PHASE_LINK_START_TO_FINISH","PHASE_LINK_FINISH_TO_START","PHASE_LINK_FINISH_TO_FINISH","PHASE_LINK_TYPES","PHASE_FORM","PHASE_TYPE","GROUP_ID","GROUP_KEY","GROUP_FORM","GROUP_TYPE","BENEFICIARY_ID","BENEFICIARY_KEY","BENEFICIARY_FORM","BENEFICIARY_TYPE","PARAMETER_ID","PARAMETER_KEY","PARAMETER_CHANGE_TYPE_ARITHMETIC","PARAMETER_CHANGE_TYPE_ARITHMETIC_LABEL","PARAMETER_CHANGE_TYPE_GEOMETRIC","PARAMETER_CHANGE_TYPE_GEOMETRIC_LABEL","PARAMETER_FORM","PARAMETER_TYPE","CAUSE_AND_EFFECT_ID","CAUSE_AND_EFFECT_KEY","CAUSE_AND_EFFECT_REFERENCE_PREFIX","CAUSE_AND_EFFECT_FORM","CAUSE_AND_EFFECT_TYPE","ATOMIC_TYPE_IDS","ATOMIC_TYPES","BENEFIT_BUILDUP_ID","BENEFIT_BUILDUP_KEY","BENEFIT_BUILDUP_TYPE","BENEFIT_ATTRIBUTION_ID","BENEFIT_ATTRIBUTION_KEY","BENEFIT_ATTRIBUTION_TYPE","COST_ATTRIBUTION_ID","COST_ATTRIBUTION_KEY","COST_ATTRIBUTION_TYPE","STAKEHOLDER_BENEFITS_ID","STAKEHOLDER_BENEFITS_KEY","STAKEHOLDER_BENEFITS_TYPE","COMPOUND_TYPE_IDS","PROGRAMME_ID","PROGRAMME_KEY","PROGRAMME_FORM","PROGRAMME_TYPE","MODEL_ID","MODEL_KEY","MODEL_ICON","MODEL_FORM","MODEL_TYPE","SCENARIO_ID","SCENARIO_KEY","SCENARIO_ICON","SCENARIO_FORM","SCENARIO_TYPE","BENEFIT_SENSITIVITY_ID","PHASE_SENSITIVITY_ID","DELIVERABLE_SENSITIVITY_ID","PHASE_COST_SENSITIVITY_ID","BENEFIT_BUILDUP_SENSITIVITY_ID","SENSITIVITIES","TYPE_IDS","DCF_KEY","DCF_GRAPH","VALUE_FOR_MONEY_KEY","MAIN_GRAPHS","BENEFITS_PHASES_KEY","BENEFITS_YEARS_KEY","COSTS_YEARS_KEY","BENEFITS_DELIVERABLES_KEY","DELIVERABLES_MEASURES_KEY","DELIVERABLES_STAKEHOLDERS_KEY","BENEFITS_MEASURES_KEY","BENEFITS_GROUPS_KEY","GROUPS_STAKEHOLDERS_KEY","BENEFITS_STAKEHOLDERS_KEY","BENEFIT_GRAPHS","TABLE_WIDTHS","_validators_form__WEBPACK_IMPORTED_MODULE_0__","id","fields","concat","helperText","label","name","labelInfo","type","placeholder","validate","validators","warn","key","icon","measures","map","measure","items","value","disabled","matrixXKey","matrixYKey","matrixZKey","COMPOUND_TYPES","form","children","keys","width","InvalidModelError","_Error","message","_this","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","description","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_4__","Error","InvalidUpdateError","_Error2","_this2","InconsistentArgumentError","_Error3","_this3","InconsistentStateError","_Error4","_this4","InvalidStateError","_Error5","_this5","getHelpText","CONSTANTS","getTypeObject","getTypeObjectFromKey","isSelectConstant","includes","getSelectConstantLabel","getFormFieldLabel","found","getFormObject","find","field","isElementId","attribute","getSelectElementLabel","programme","modelTypes","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","i","length","element","getMeasuresStringFromIdArray","measureIds","strRep","forEach","idx","isTypeId","isTopLevel","isAtomicType","isCompoundType","isStrategyMapType","matchesId","getExplorerPathIndex","benefits","findIndex","costs","deliverables","stakeholders","phases","groups","beneficiaries","parameters","causeAndEffect","perspectives","objectives","themes","getDeletionConfirmationText","typeId","refs","nextRef","downloadModel","model","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_1__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_2__","containerStyle","display","alignItems","justifyContent","height","innerStyle","flex","flexDirection","maxWidth","Loading","_ref","text","a","style","marginTop","cookies","Cookies","setCurrentUser","user","token","decodedToken","jwt","decode","tokenExpiration","moment","unix","exp","licenseExpiration","intent","Intent","SUCCESS","licenseType","isValid","fromNow","format","diff","Date","DANGER","WARNING","AppToaster","show","trim","firstName","toastUser","SET_CURRENT_USER","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","resetCurrentUser","login","data","history","dispatch","axios","post","username","identifier","password","then","res","_res$data","console","log","lastName","set","catch","err","error","withCredentials","validateModel","warnModel","validateCost","warnCost","validateBenefit","warnBenefit","validateDeliverable","warnDeliverable","validateStakeholder","warnStakeholder","validatePhase","warnPhase","validateGroup","warnGroup","validateBeneficiary","warnBeneficiary","validateParameter","warnParameter","validateThread","warnThread","validatePerspective","warnPerspective","validateObjective","warnObjective","validateMeasure","warnMeasure","validateProgramme","warnProgramme","validateScenario","warnScenario","validateTheme","warnTheme","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","_model_api__WEBPACK_IMPORTED_MODULE_1__","_config_constants__WEBPACK_IMPORTED_MODULE_2__","checkNonEmptyString","errors","checkUniqueName","elements","filter","API","validTypes","coreBenefits","programmes","_coreBenefits","programmeUnits","unitOfMeasure","warnings","start","startMoment","programmeStart","analysisEnd","add","_analysisYears","isBefore","isAfter","duration","analysisEndMoment","slip","dynamic","changeType","change","reference","thread","deliverableId","deliverable","benefitId","benefit","stakeholderId","stakeholder","measureId","groupId","group","beneficiaryId","beneficiary","cause","effect","weighting","p","reduce","acc","cur","perspectiveId","perspective","o","objectiveId","objective","upper","lower","direction","baselineStartMoment","baselineStart","baselineCompleteMoment","baselineComplete","scorecardStartMoment","m","best","worst","undefined","baselineValue","standard","minimumStandard","phase","financialStart","financialStartMoment","scorecardStart","mission","vision","TOGGLE_DARK_MODE","UPDATE_MODEL","SET_SELECTED_ELEMENT","SET_NODE_EXPANDED","ADD_ATOM","UPDATE_ATOM","DELETE_ATOM","UPDATE_MATRIX","ADD_PHASE_LINK","DELETE_PHASE_LINK","UPDATE_SENSITIVITY","SET_SELECTED_GRAPH","SET_COST_OF_CAPITAL","SET_SELECTED_CERTAINTY_ELEMENT","SET_CERTAINTY_ELEMENT_EXPANDED","SET_SELECTED_STRATEGY_ITEM","SET_STRATEGY_ITEM_EXPANDED","SET_ACTIVE_SCORECARD_MONTH","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_0__","Toaster","create","position","Position","TOP","AppView","lazy","e","bind","Promise","all","App","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","props","isAuthenticated","react_default","BrowserRouter","className","react","fallback","Component","connect","state","auth","Boolean","window","location","hostname","match","initialState","selected","costOfCapital","explorer","expanded","BASELINE_SCENARIO","dark","benefitAttribution","selectedBenefit","Ajv","allErrors","compile","SCHEMA","valid","Array","isArray","hasDuplicates","array","Set","size","checkForDuplicateNames","accumulator","seenNames","duplicates","push","returnNewValidObjectForDuplicates","elementName","errorMsg","checkIdIsDuplicate","currentIds","newId","checkCoreBenefits","_model$programmes$4","coreBenefitId","index","getBenefitName","revenueBenefit","costbaseBenefit","marginBenefit","isConsistent","validObjects","ids","_model$programmes$2","cost","parameter","causeAndEffec","checkForDuplicateIds","_model$programmes$3","checkProgrammeDates","_model$programmes$","duplicateBenefits","duplicateCosts","duplicateDeliverables","duplicatePhases","duplicateStakeholders","duplicateMeasures","duplicateObjectives","duplicatePerspectives","duplicateGroups","duplicateBeneficiaries","duplicateParameters","checkElementsHaveUniqueNames","_model$programmes$6","benefitBuildup","stakeholderBenefits","checkMatricesHaveCorrectBenefitKeys","_model$programmes$16","scenarios","scenario","benefitSensitivity","checkBenefitSensitivitiesReferenceValidBenefits","_model$programmes$21","benefitBuildupSensitivity","checkBenefitBuildupSensitivitiesContainBenefitKeys","_model$programmes$7","checkMatricesHaveCorrectDeliverableKeys","_model$programmes$18","deliverableSensitivity","checkDeliverableSensitivitiesReferenceValidDeliverables","analysisYears","_model$programmes$26","analysisEnds","phaseStart","checkPhaseDates","_model$programmes$10","costAttribution","datum","checkMatricesHaveCorrectPhaseKeys","_model$programmes$13","phaseLinks","phaseLink","sourceId","targetId","foundTarget","foundSource","checkPhaseLinksReferenceValidPhases","_model$programmes$14","phaseSensitivity","checkPhaseSensitivitiesReferenceValidPhases","_model$programmes$20","costTypes","costType","phaseCostSensitivity","checkPhaseCostSensitivitiesContainPhaseKeys","_model$programmes$22","checkBenefitBuildupSensitivitiesContainPhaseKeys","_model$programmes$9","checkMatricesHaveCorrectCostKeys","_model$programmes$8","checkMatricesHaveCorrectStakeholderKeys","_model$programmes$24","isSameOrBefore","checkMeasureData","_model$programmes$23","checkThreadsReferenceValidElements","_model$programmes$33","values","_threadValues","valueIds","checkAllThreadsHaveThreadValues","checkAllThreadsHaveUniqueReferences","years","_model$programmes$34","threadIds","foundThread","threadReference","checkAllThreadValuesAreValid","_model$programmes$27","benefitIds","deliverableIds","phaseIds","benefitKey","benefitError","deliverableKey","deliverableError","phaseKey","phaseError","checkAllBenefitAttributionKeysExist","_model$programmes$35","benefitMatrix","deliverableMatrix","sum","checkBenefitAttributionSumsToOne","_model$programmes$28","checkAllBenefitBuildupKeysExist","_model$programmes$29","stakeholderIds","stakeholderKey","stakeholderError","checkAllStakeholderBenefitKeysExist","_model$programmes$30","costIds","costKey","costError","checkAllCostAttributionKeysExist","_model$programmes$11","checkObjectivesReferenceValidPerspectives","_model$programmes$12","checkMeasuresReferenceValidObjectives","_model$programmes$25","checkStrategyMapWeightings","sensitivity","checkNoDuplicateSensitivitiesExist","_model$programmes$5","baseline","_baselineScenario","checkBaselineScenario","_model$programmes$15","checkPhaseSensitivitiesContainAllPhases","_model$programmes$17","checkBenefitSensitivitiesContainAllBenefits","_model$programmes$19","checkDeliverableSensitivitiesContainAllDeliverables","_model$programmes$31","checkAllBenefitBuildupSensitivityKeysExist","_model$programmes$32","checkAllPhaseCostSensitivityKeysExist","_model$programmes$36","balancedScorecard","months","monthItem","date","measureEntry","targetMeasure","checkBalancedScorecardContainsCorrectInformation","merged","obj","checkModel","operation","_isValid","validationErrors","_isConsistent","consistent","consistencyErrors","safeUpdate","rollback","f","confirmValid","MIDSIZE_BANK_MODEL","activeMonth","strategyMap","STRATEGY_ROOT","combineReducers","analysis","action","objectSpread","graph","certainty","defineProperty","editor","safetyCheck","actions","linkType","typeKey","scorecard","month","newBenefitSchedule","HOSPITAL","fill","newCostSchedule","pluralize","addSingularRule","addPluralRule","logger","createLogger","predicate","getState","collapsed","actionTransformer","originalAction","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","newCount","getCosts","getProgramme","getCostById","checkCostData","hasOwnProperty","definition","newCost","newCostId","nanoId","costData","getPhases","newCostAttribution","toConsumableArray","removeCostById","c","updatedCosts","_getProgramme2","updateCostById","getPhaseById","checkPhaseData","Number","isNaN","attributes","programmeAttributes","getProgrammeAttributes","newPhase","newPhaseId","phaseData","_getProgramme","getBenefits","getDeliverables","newBenefitAttribution","newBenefitBuildup","newScenarios","costId","switch","removePhaseById","updatedPhases","_getProgramme3","ps","l","updatePhaseById","addPhaseLink","newLink","deletePhaseLink","link","getBeneficiaries","getBeneficiaryById","checkBeneficiaryData","owner","newBeneficiary","beneficiaryData","newBeneficiaries","removeBeneficiaryById","modifiedModel","onDelete","updateThreadById","b","updateBeneficiaryById","updatedBeneficiaries","getGroups","getGroupById","checkGroupData","newGroup","groupData","removeGroupById","g","t","updateGroupById","getPerspectives","getPerspectiveById","checkPerspectiveData","checkTotalWeighting","newWeighting","newPerspective","perspectiveData","removePerspectiveById","updateObjectiveById","updatePerspectiveById","getObjectives","getObjectiveById","checkObjectiveData","newObjective","objectiveData","removeObjectiveById","updateMeasureById","existingObjective","getMeasures","getMeasureById","dataOwner","newMeasure","newMeasureId","measureData","getProgrammeUnitOfMeasure","getProgrammeStart","newBalancedScorecard","item","escapeRegExp","regexString","replace","replaceMeasureNames","equation","newName","newEquation","standardVariable","baselineVariable","changeVariable","standardRegex","RegExp","baselineRegex","changeRegex","newVariableName","removeMeasureById","getThreadById","entry","newThemes","theme","existingMeasure","getStakeholders","getStakeholderById","checkStakeholderData","budgetRef","newStakeholder","newStakeholderId","stakeholderData","newStakeholderBenefits","removeStakeholderById","s","removeThreadById","updatedStakeholders","updateStakeholderById","getThreads","checkThreadData","newThread","newThreadId","threadData","updateThreadValues","tv","newModel","toUnderscore","val","evaluateThread","year","answer","context","returnObject","y","generateContextObject","safeEval","filteredThreadValues","getDeliverableById","checkDeliverableData","newDeliverable","newDeliverableId","deliverableData","removeDeliverableById","updatedDeliverables","_getProgramme4","ds","updateDeliverableById","getBenefitById","checkBenefitData","newBenefit","newBenefitId","benefitData","removeBenefitById","updatedBenefits","bs","updateBenefitById","updateProgramme","hasProgrammeStart","hasFinancialStart","hasScorecardStart","comparisonDate","financialStartComparison","getProgrammeFinancialStart","scorecardStartComparison","getProgrammeScorecardStart","checkProgrammeData","newBenefits","getScorecardValue","getScorecardItem","foundValue","getScenarios","getScenarioById","checkScenarioData","newScenario","scenarioData","costAcc","curCost","phaseAcc","curPhase","benefitAcc","curBenefit","removeScenarioById","updateScenarioById","setBenefitSensitivityValues","scenarioId","setBenefitAttribution","newMatrix","bId","newBenefitObject","dId","newDeliverableObject","pId","setBenefitBuildup","setBenefitBuildupSensitivityValues","setCostAttribution","cId","newCostObject","setDeliverableSensitivityValues","updateModel","client","author","checkModelData","getParameters","getParameterById","checkParameterData","newParameter","parameterData","replaceParameterNames","variable","variableRegExp","removeParameterById","updateParameterById","existingParameter","setPhaseSensitivityValues","newPhaseSensitivity","setPhaseCostSensitivityValues","setStakeholderBenefits","sId","getThemes","getThemeById","checkThemeData","newTheme","themeData","removeThemeById","updateThemeById"],"mappings":"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","file":"static/js/main.7cb9a93f.chunk.js","sourcesContent":["// @flow\nimport * as validators from '../validators/form';\n\nimport { type Measure } from '../model/api/types';\n\n// MODEL CONSTANTS =================================================================================\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const GANTT_DATE_FORMAT = 'DD-MM-YYYY';\nexport const NEW_MODEL_NAME = 'vm_new_model.vmt';\nexport const UNLIMITED_LICENSE_STRING = 'Unlimited';\nexport const ID_PATTERN = '^[a-zA-Z0-9-_~]{21}';\n\n// UI COMPONENTS ===================================================================================\nexport const GRAPH_SELECTOR_TITLE = 'Result Selector';\nexport const SCORECARD_TITLE = 'Balance Scorecard';\nexport const RESULT_TITLE = 'Model Output';\nexport const PARAMETER_TITLE = 'Parameter Variation';\nexport const DELETE_CONFIRM_TITLE = 'Confirm deletion';\nexport const DELETE_CONFIRM_TEXT =\n  \"Are you sure you want to delete this element? You won't be able to recover it.\";\nexport const DELETE_THREAD_DISCLAIMER =\n  'This will also delete any cause and effect threads which reference this element.';\nexport const DELETE_PERSPECTIVE_DISCLAIMER =\n  'This will also delete any child objectives and their child measures.';\nexport const DELETE_OBJECTIVE_DISCLAIMER = 'This will also delete any child measures.';\nexport const DELETE_STRATEGY_THREAD_DISCLAIMER =\n  'This will also delete cause and effect threads which reference a removed measure.';\n\n// STRATEGY_MAP_TYPES ==============================================================================\nexport const THEME_ID = 'THEME_TYPE';\nexport const THEME_FORM_ID = 'THEME_FORM';\nexport const THEME_KEY = 'themes';\nexport const THEME_NAME = 'Themes';\nexport const THEME_ICON = 'filter';\nexport const THEME_FORM = {\n  id: THEME_FORM_ID,\n  fields: [\n    {\n      id: `${THEME_FORM_ID}_name`,\n      helperText: 'Name of the Theme',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${THEME_FORM_ID}_measures`,\n      helperText: 'Measures associated with this theme',\n      label: 'Measures',\n      name: 'measures',\n      type: 'theme-measures',\n    },\n  ],\n  validate: validators.validateTheme,\n  warn: validators.warnTheme,\n};\nexport const THEME_TYPE = {\n  id: THEME_ID,\n  key: THEME_KEY,\n  name: THEME_NAME,\n  icon: THEME_ICON,\n};\nexport const ROOT_THEME = (measures: Array<Measure>) => ({\n  id: 'ROOT_THEME',\n  name: 'All Themes',\n  measures: measures.map<string>((measure: Measure) => measure.id),\n});\n\nexport const PERSPECTIVE_ID = 'PERSPECTIVE_TYPE';\nexport const PERSPECTIVE_FORM_ID = 'PERSPECTIVE_FORM';\nexport const PERSPECTIVE_KEY = 'perspectives';\nexport const PERSPECTIVE_NAME = 'Perspectives';\nexport const PERSPECTIVE_ICON = 'folder-close';\nexport const PERSPECTIVE_FORM = {\n  id: PERSPECTIVE_FORM_ID,\n  fields: [\n    {\n      id: `${PERSPECTIVE_FORM_ID}_name`,\n      helperText: 'Name of the Perspective',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${PERSPECTIVE_FORM_ID}_weighting`,\n      helperText: 'Weighting of the Perspective',\n      label: 'Weighting',\n      labelInfo: '(required)',\n      name: 'weighting',\n      type: 'percentage',\n    },\n    {\n      id: `${PERSPECTIVE_FORM_ID}_definition`,\n      helperText: 'Defintion of the Perspective',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validatePerspective,\n  warn: validators.warnPerspective,\n};\nexport const PERSPECTIVE_TYPE = {\n  id: PERSPECTIVE_ID,\n  key: PERSPECTIVE_KEY,\n  name: PERSPECTIVE_NAME,\n  icon: PERSPECTIVE_ICON,\n};\n\nexport const PERSPECTIVE_NAMES = ['financial', 'process', 'customer', 'resource', 'supplier'];\n\nexport const OBJECTIVE_ID = 'OBJECTIVE_TYPE';\nexport const OBJECTIVE_FORM_ID = 'OBJECTIVE_FORM';\nexport const OBJECTIVE_KEY = 'objectives';\nexport const OBJECTIVE_NAME = 'Objectives';\nexport const OBJECTIVE_ICON = 'folder-close';\nexport const OBJECTIVE_FORM = {\n  id: OBJECTIVE_FORM_ID,\n  fields: [\n    {\n      id: `${OBJECTIVE_FORM_ID}_name`,\n      helperText: 'Name of the Objective',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${OBJECTIVE_FORM_ID}_weighting`,\n      helperText: 'Weighting of the Objective',\n      label: 'Weighting',\n      labelInfo: '(required)',\n      name: 'weighting',\n      type: 'percentage',\n    },\n    {\n      id: `${OBJECTIVE_FORM_ID}_owner`,\n      helperText: 'Owner of the Objective',\n      label: 'Owner',\n      name: 'owner',\n      type: 'text',\n      placeholder: 'Enter owner here...',\n    },\n    {\n      id: `${OBJECTIVE_FORM_ID}_perspectiveId`,\n      helperText: 'The Perspective this Objective belongs to',\n      label: 'Perspective',\n      name: 'perspectiveId',\n      type: 'select',\n      items: PERSPECTIVE_ID,\n    },\n    {\n      id: `${OBJECTIVE_FORM_ID}_definition`,\n      helperText: 'Defintion of the Objective',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateObjective,\n  warn: validators.warnObjective,\n};\nexport const OBJECTIVE_TYPE = {\n  id: OBJECTIVE_ID,\n  key: OBJECTIVE_KEY,\n  name: OBJECTIVE_NAME,\n  icon: OBJECTIVE_ICON,\n};\n\nexport const MEASURE_ID = 'MEASURE_TYPE';\nexport const MEASURE_FORM_ID = 'MEASURE_FORM';\nexport const MEASURE_KEY = 'measures';\nexport const MEASURE_NAME = 'Measures';\nexport const MEASURE_ICON = 'variable';\nexport const MEASURE_FORM = {\n  id: MEASURE_FORM_ID,\n  fields: [\n    {\n      id: `${MEASURE_FORM_ID}_name`,\n      helperText: 'Name of the Measure',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_objectiveId`,\n      helperText: 'The Objective this Measure belongs to',\n      label: 'Objective',\n      name: 'objectiveId',\n      labelInfo: '(required)',\n      type: 'select',\n      items: OBJECTIVE_ID,\n    },\n    {\n      id: `${MEASURE_FORM_ID}_weighting`,\n      helperText: 'Weighting of the Measure',\n      label: 'Weighting',\n      labelInfo: '(required)',\n      name: 'weighting',\n      type: 'percentage',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_dataOwner`,\n      helperText: 'Data Owner of the Measure',\n      label: 'Data Owner',\n      name: 'dataOwner',\n      type: 'text',\n      placeholder: 'Enter data owner here...',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_unitOfMeasure`,\n      helperText: 'Unit of Measure for the Measure',\n      label: 'Unit of Measure',\n      name: 'unitOfMeasure',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter unit of measure here...',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_baselineValue`,\n      helperText: 'Baseline Value for the Measure',\n      label: 'Baseline Value',\n      name: 'baselineValue',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_change`,\n      helperText: 'Change value for the Measure',\n      label: 'Change Value',\n      name: 'change',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_baselineStart`,\n      helperText: 'Baseline Start Date for the Measure',\n      label: 'Baseline Start Date',\n      name: 'baselineStart',\n      labelInfo: '(cannot be before scorecard start)',\n      type: 'date',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_baselineComplete`,\n      helperText: 'Baseline Complete Date for the Measure',\n      label: 'Baseline Complete Date',\n      name: 'baselineComplete',\n      labelInfo: '(cannot be before measure start)',\n      type: 'date',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_best`,\n      helperText: 'Best value for the Measure',\n      label: 'Best Value',\n      name: 'best',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_worst`,\n      helperText: 'Worst value for the Measure',\n      label: 'Worst Value',\n      name: 'worst',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_standard`,\n      helperText: 'Standard for the Measure',\n      label: 'Standard',\n      name: 'standard',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_minimumStandard`,\n      helperText: 'Minimum Standard for the Measure',\n      label: 'Minimum Standard',\n      name: 'minimumStandard',\n      type: 'number',\n    },\n    {\n      id: `${MEASURE_FORM_ID}_definition`,\n      helperText: 'Definition for the measure',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n    },\n  ],\n  validate: validators.validateMeasure,\n  warn: validators.warnMeasure,\n};\nexport const MEASURE_TYPE = {\n  id: MEASURE_ID,\n  key: MEASURE_KEY,\n  name: MEASURE_NAME,\n  icon: MEASURE_ICON,\n};\n\nexport const STRATEGY_MAP_TYPE_IDS = [PERSPECTIVE_ID, OBJECTIVE_ID, MEASURE_ID, THEME_ID];\n\nexport const STRATEGY_MAP_TYPES = [PERSPECTIVE_TYPE, OBJECTIVE_TYPE, MEASURE_TYPE, THEME_TYPE];\n\nexport const STRATEGY_ROOT_ID = 'STRATEGY_ROOT';\nexport const STRATEGY_ROOT_KEY = 'strategy-root';\nexport const STRATEGY_ROOT_NAME = 'Strategy Map';\nexport const STRATEGY_ROOT_ICON = 'predictive-analysis';\nexport const STRATEGY_ROOT_TYPE = {\n  id: STRATEGY_ROOT_ID,\n  key: STRATEGY_ROOT_KEY,\n  name: STRATEGY_ROOT_NAME,\n  icon: STRATEGY_ROOT_ICON,\n};\n\nexport const STRATEGY_DATA_ID = 'STRATEGY_DATA';\nexport const STRATEGY_DATA_KEY = 'strategy-data';\nexport const STRATEGY_DATA_NAME = 'Data Input';\nexport const STRATEGY_DATA_ICON = 'database';\nexport const STRATEGY_DATA_TYPE = {\n  id: STRATEGY_DATA_ID,\n  key: STRATEGY_DATA_KEY,\n  name: STRATEGY_DATA_NAME,\n  icon: STRATEGY_DATA_ICON,\n};\n\nexport const PERSPECTIVE_RAG_ID = 'PERSPECTIVE_RAG';\nexport const PERSPECTIVE_RAG_KEY = 'perspective-rag';\nexport const PERSPECTIVE_RAG_NAME = 'RAG View';\nexport const PERSPECTIVE_RAG_ICON = 'layout-grid';\nexport const PERSPECTIVE_RAG_TYPE = {\n  id: PERSPECTIVE_RAG_ID,\n  key: PERSPECTIVE_RAG_KEY,\n  name: PERSPECTIVE_RAG_NAME,\n  icon: PERSPECTIVE_RAG_ICON,\n};\n\nexport const SCORECARD_RAG_ID = 'SCORECARD_RAG_VIEW';\nexport const SCORECARD_RAG_KEY = 'scorecard-rag';\nexport const SCORECARD_RAG_NAME = 'RAG View';\nexport const SCORECARD_RAG_ICON = 'layout-grid';\nexport const SCORECARD_RAG_TYPE = {\n  id: SCORECARD_RAG_ID,\n  key: SCORECARD_RAG_KEY,\n  name: SCORECARD_RAG_NAME,\n  icon: SCORECARD_RAG_ICON,\n};\n\n// ATOMIC TYPES ====================================================================================\nexport const BENEFIT_ID = 'BENEFIT_TYPE';\nexport const BENEFIT_FORM_ID = 'BENEFIT_FORM';\nexport const BENEFIT_KEY = 'benefits';\nexport const BENEFIT_NAME = 'Benefits';\nexport const BENEFIT_ICON = 'plus';\n\nexport const BENEFIT_TYPE_FINANCIAL = 'FINANCIAL_BENEFIT';\nexport const BENEFIT_TYPE_FINANCIAL_LABEL = 'Financial';\nexport const BENEFIT_TYPE_NON_FINANCIAL = 'NON_FINANCIAL_BENEFIT';\nexport const BENEFIT_TYPE_NON_FINANCIAL_LABEL = 'Non-Financial';\n\nexport const BENEFIT_FORM = {\n  id: BENEFIT_FORM_ID,\n  fields: [\n    {\n      id: `${BENEFIT_FORM_ID}_name`,\n      helperText: 'Name of the Benefit',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${BENEFIT_FORM_ID}_unitOfMeasure`,\n      helperText: 'The unit the Benefit is measured in. For example, £/$/%/Customers',\n      label: 'Unit of Measure',\n      name: 'unitOfMeasure',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter unit here...',\n    },\n    {\n      id: `${BENEFIT_FORM_ID}_type`,\n      helperText: 'Whether the Benefit is Financial (£/$/%) or Non-Financial (Customers/Items)',\n      label: 'Type',\n      name: 'type',\n      labelInfo: '(required)',\n      type: 'select',\n      items: [\n        {\n          id: `${BENEFIT_FORM_ID}_${BENEFIT_TYPE_FINANCIAL}`,\n          value: BENEFIT_TYPE_FINANCIAL,\n          label: BENEFIT_TYPE_FINANCIAL_LABEL,\n        },\n        {\n          id: `${BENEFIT_FORM_ID}_${BENEFIT_TYPE_NON_FINANCIAL}`,\n          value: BENEFIT_TYPE_NON_FINANCIAL,\n          label: BENEFIT_TYPE_NON_FINANCIAL_LABEL,\n        },\n      ],\n    },\n    {\n      id: `${BENEFIT_FORM_ID}_definition`,\n      helperText: 'Defintion of the Benefit',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateBenefit,\n  warn: validators.warnBenefit,\n};\nexport const BENEFIT_TYPE = {\n  id: BENEFIT_ID,\n  key: BENEFIT_KEY,\n  name: BENEFIT_NAME,\n  icon: BENEFIT_ICON,\n};\n\nexport const COST_ID = 'COST_TYPE';\nexport const COST_FORM_ID = 'COST_FORM';\nexport const COST_KEY = 'costs';\nexport const COST_NAME = 'Costs';\nexport const COST_ICON = 'minus';\n\nexport const COST_TYPE_DEVELOPMENT = 'DEVELOPMENT_COST';\nexport const COST_TYPE_DEVELOPMENT_LABEL = 'Development';\nexport const COST_TYPE_SUPPORT = 'SUPPORT_COST';\nexport const COST_TYPE_SUPPORT_LABEL = 'Support';\n\nexport const COST_FORM = {\n  id: COST_FORM_ID,\n  fields: [\n    {\n      id: `${COST_FORM_ID}_name`,\n      helperText: 'Name of the Cost',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${COST_FORM_ID}_type`,\n      helperText: 'Whether the Cost is a Development or Support Cost',\n      label: 'Type',\n      name: 'type',\n      labelInfo: '(required)',\n      type: 'select',\n      items: [\n        {\n          id: `${COST_FORM_ID}_${COST_TYPE_DEVELOPMENT}`,\n          value: COST_TYPE_DEVELOPMENT,\n          label: COST_TYPE_DEVELOPMENT_LABEL,\n        },\n        {\n          id: `${COST_FORM_ID}_${COST_TYPE_SUPPORT}`,\n          value: COST_TYPE_SUPPORT,\n          label: COST_TYPE_SUPPORT_LABEL,\n        },\n      ],\n    },\n    {\n      id: `${COST_FORM_ID}_definition`,\n      helperText: 'Defintion of the Cost',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateCost,\n  warn: validators.warnCost,\n};\nexport const COST_TYPE = {\n  id: COST_ID,\n  key: COST_KEY,\n  name: COST_NAME,\n  icon: COST_ICON,\n};\n\nexport const DELIVERABLE_ID = 'DELIVERABLE_TYPE';\nexport const DELIVERABLE_FORM_ID = 'DELIVERABLE_FORM';\nexport const DELIVERABLE_KEY = 'deliverables';\nexport const DELIVERABLE_NAME = 'Deliverables';\nexport const DELIVERABLE_ICON = 'box';\nexport const DELIVERABLE_FORM = {\n  id: DELIVERABLE_FORM_ID,\n  fields: [\n    {\n      id: `${DELIVERABLE_FORM_ID}_name`,\n      helperText: 'Name of the Deliverable',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${DELIVERABLE_FORM_ID}_definition`,\n      helperText: 'Defintion of the Deliverable',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateDeliverable,\n  warn: validators.warnDeliverable,\n};\nexport const DELIVERABLE_TYPE = {\n  id: DELIVERABLE_ID,\n  key: DELIVERABLE_KEY,\n  name: DELIVERABLE_NAME,\n  icon: DELIVERABLE_ICON,\n};\n\nexport const STAKEHOLDER_ID = 'STAKEHOLDER_TYPE';\nexport const STAKEHOLDER_FORM_ID = 'STAKEHOLDER_FORM';\nexport const STAKEHOLDER_KEY = 'stakeholders';\nexport const STAKEHOLDER_NAME = 'Stakeholders';\nexport const STAKEHOLDER_ICON = 'people';\nexport const STAKEHOLDER_FORM = {\n  id: STAKEHOLDER_FORM_ID,\n  fields: [\n    {\n      id: `${STAKEHOLDER_FORM_ID}_name`,\n      helperText: 'Name of the Stakeholder',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${STAKEHOLDER_FORM_ID}_owner`,\n      label: 'Owner',\n      helperText: 'Owner of the Stakeholder',\n      name: 'owner',\n      type: 'text',\n      placeholder: 'Enter owner here...',\n    },\n    {\n      id: `${STAKEHOLDER_FORM_ID}_budgetRef`,\n      helperText: 'Budget reference for the Stakeholder',\n      label: 'Budget Reference',\n      name: 'budgetRef',\n      type: 'text',\n      placeholder: 'Enter reference here...',\n    },\n  ],\n  validate: validators.validateStakeholder,\n  warn: validators.warnStakeholder,\n};\nexport const STAKEHOLDER_TYPE = {\n  id: STAKEHOLDER_ID,\n  key: STAKEHOLDER_KEY,\n  name: STAKEHOLDER_NAME,\n  icon: STAKEHOLDER_ICON,\n};\n\nexport const PHASE_ID = 'PHASE_TYPE';\nexport const PHASE_FORM_ID = 'PHASE_FORM';\nexport const PHASE_KEY = 'phases';\nexport const PHASE_NAME = 'Phases';\nexport const PHASE_ICON = 'gantt-chart';\n\nexport const PHASE_SLIP_RULE_FIXED = 'FIXED_PHASE';\nexport const PHASE_SLIP_RULE_FIXED_LABEL = 'Fixed Cost';\nexport const PHASE_SLIP_RULE_TIME_AND_MATERIALS = 'TIME_AND_MATERIALS_PHASE';\nexport const PHASE_SLIP_RULE_TIME_AND_MATERIALS_LABEL = 'Time and Materials';\n\nexport const PHASE_LINK_START_TO_START = 'START_TO_START';\nexport const PHASE_LINK_START_TO_FINISH = 'START_TO_FINISH';\nexport const PHASE_LINK_FINISH_TO_START = 'FINISH_TO_START';\nexport const PHASE_LINK_FINISH_TO_FINISH = 'FINISH_TO_FINISH';\nexport const PHASE_LINK_TYPES = [\n  PHASE_LINK_START_TO_START,\n  PHASE_LINK_START_TO_FINISH,\n  PHASE_LINK_FINISH_TO_START,\n  PHASE_LINK_FINISH_TO_FINISH,\n];\n\nexport const PHASE_FORM = {\n  id: PHASE_FORM_ID,\n  fields: [\n    {\n      id: `${PHASE_FORM_ID}_name`,\n      helperText: 'Project name',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${PHASE_FORM_ID}_duration`,\n      helperText: 'Length of the project in weeks',\n      label: 'Duration',\n      name: 'duration',\n      labelInfo: '(required)',\n      type: 'number',\n    },\n    {\n      id: `${PHASE_FORM_ID}_start`,\n      helperText: 'The start date of the project',\n      label: 'Start date',\n      name: 'start',\n      labelInfo: '(required - cannot be earlier than programme start)',\n      type: 'date',\n    },\n    {\n      id: `${PHASE_FORM_ID}_slip`,\n      helperText: 'What happens if the project is not completed on time',\n      label: 'Slip rule',\n      name: 'slip',\n      labelInfo: '(required)',\n      type: 'select',\n      items: [\n        {\n          id: `${PHASE_FORM_ID}_${PHASE_SLIP_RULE_FIXED}`,\n          value: PHASE_SLIP_RULE_FIXED,\n          label: PHASE_SLIP_RULE_FIXED_LABEL,\n        },\n        {\n          id: `${PHASE_FORM_ID}_${PHASE_SLIP_RULE_TIME_AND_MATERIALS}`,\n          value: PHASE_SLIP_RULE_TIME_AND_MATERIALS,\n          label: PHASE_SLIP_RULE_TIME_AND_MATERIALS_LABEL,\n        },\n      ],\n    },\n  ],\n  validate: validators.validatePhase,\n  warn: validators.warnPhase,\n};\nexport const PHASE_TYPE = {\n  id: PHASE_ID,\n  key: PHASE_KEY,\n  name: PHASE_NAME,\n  icon: PHASE_ICON,\n};\n\nexport const GROUP_ID = 'GROUP_TYPE';\nexport const GROUP_FORM_ID = 'GROUP_FORM';\nexport const GROUP_KEY = 'groups';\nexport const GROUP_NAME = 'Groups';\nexport const GROUP_ICON = 'group-objects';\nexport const GROUP_FORM = {\n  id: GROUP_FORM_ID,\n  fields: [\n    {\n      id: `${GROUP_FORM_ID}_name`,\n      helperText: 'Name of the Group',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${GROUP_FORM_ID}_definition`,\n      helperText: 'Defintion of the Group',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateGroup,\n  warn: validators.warnGroup,\n};\nexport const GROUP_TYPE = {\n  id: GROUP_ID,\n  key: GROUP_KEY,\n  name: GROUP_NAME,\n  icon: GROUP_ICON,\n};\n\nexport const BENEFICIARY_ID = 'BENEFICIARY_TYPE';\nexport const BENEFICIARY_FORM_ID = 'BENEFICIARY_FORM';\nexport const BENEFICIARY_KEY = 'beneficiaries';\nexport const BENEFICIARY_NAME = 'Beneficiaries';\nexport const BENEFICIARY_ICON = 'new-person';\nexport const BENEFICIARY_FORM = {\n  id: BENEFICIARY_FORM_ID,\n  fields: [\n    {\n      id: `${BENEFICIARY_FORM_ID}_name`,\n      helperText: 'Name of the Beneficiary',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${BENEFICIARY_FORM_ID}_owner`,\n      helperText: 'Owner of the Beneficiary',\n      label: 'Owner',\n      name: 'owner',\n      type: 'text',\n      placeholder: 'Enter owner here...',\n    },\n    {\n      id: `${BENEFICIARY_FORM_ID}_definition`,\n      helperText: 'Defintion of the Beneficiary',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateBeneficiary,\n  warn: validators.warnBeneficiary,\n};\nexport const BENEFICIARY_TYPE = {\n  id: BENEFICIARY_ID,\n  key: BENEFICIARY_KEY,\n  name: BENEFICIARY_NAME,\n  icon: BENEFICIARY_ICON,\n};\n\nexport const PARAMETER_ID = 'PARAMETER_TYPE';\nexport const PARAMETER_FORM_ID = 'PARAMETER_FORM';\nexport const PARAMETER_KEY = 'parameters';\nexport const PARAMETER_NAME = 'Parameters';\nexport const PARAMETER_ICON = 'variable';\n\nexport const PARAMETER_CHANGE_TYPE_ARITHMETIC = 'ARITHMETIC_PARAMETER_CHANGE';\nexport const PARAMETER_CHANGE_TYPE_ARITHMETIC_LABEL = 'Arithmetic';\n\nexport const PARAMETER_CHANGE_TYPE_GEOMETRIC = 'GEOMETRIC_PARAMETER_CHANGE';\nexport const PARAMETER_CHANGE_TYPE_GEOMETRIC_LABEL = 'Geometric';\nexport const PARAMETER_FORM = {\n  id: PARAMETER_FORM_ID,\n  fields: [\n    {\n      id: `${PARAMETER_FORM_ID}_name`,\n      helperText: 'Name of the Parameter',\n      label: 'Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter name here...',\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_value`,\n      helperText: 'Initial value of the Parameter',\n      label: 'Initial Value',\n      labelInfo: '(required)',\n      name: 'value',\n      type: 'number',\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_unitOfMeasure`,\n      helperText: 'Unit of Measure for the Parameter',\n      label: 'Unit of Measure',\n      name: 'unitOfMeasure',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter unit here...',\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_dynamic`,\n      helperText: 'Whether the parameter should change throughout the run of the model',\n      label: 'Dynamic',\n      name: 'dynamic',\n      labelInfo: '(required)',\n      type: 'switch',\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_change`,\n      helperText: 'Annual change value for the Parameter',\n      label: '(Annual) Change',\n      name: 'change',\n      labelInfo: '(required)',\n      type: 'number',\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_changeType`,\n      helperText: 'How Parameter changes',\n      label: 'Change Type',\n      name: 'changeType',\n      labelInfo: '(required)',\n      type: 'select',\n      items: [\n        {\n          id: `${PARAMETER_FORM_ID}_${PARAMETER_CHANGE_TYPE_ARITHMETIC}`,\n          value: PARAMETER_CHANGE_TYPE_ARITHMETIC,\n          label: PARAMETER_CHANGE_TYPE_ARITHMETIC_LABEL,\n        },\n        {\n          id: `${PARAMETER_FORM_ID}_${PARAMETER_CHANGE_TYPE_GEOMETRIC}`,\n          value: PARAMETER_CHANGE_TYPE_GEOMETRIC,\n          label: PARAMETER_CHANGE_TYPE_GEOMETRIC_LABEL,\n        },\n      ],\n    },\n    {\n      id: `${PARAMETER_FORM_ID}_definition`,\n      helperText: 'Defintion for the Parameter',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter definition here...',\n    },\n  ],\n  validate: validators.validateParameter,\n  warn: validators.warnParameter,\n};\nexport const PARAMETER_TYPE = {\n  id: PARAMETER_ID,\n  key: PARAMETER_KEY,\n  name: PARAMETER_NAME,\n  icon: PARAMETER_ICON,\n};\n\nexport const CAUSE_AND_EFFECT_ID = 'CAUSE_AND_EFFECT_ID';\nexport const CAUSE_AND_EFFECT_FORM_ID = 'CAUSE_AND_EFFECT_FORM';\nexport const CAUSE_AND_EFFECT_KEY = 'causeAndEffect';\nexport const CAUSE_AND_EFFECT_NAME = 'Cause and Effect';\nexport const CAUSE_AND_EFFECT_ICON = 'flows';\nexport const CAUSE_AND_EFFECT_REFERENCE_PREFIX = 'T';\nexport const CAUSE_AND_EFFECT_FORM = {\n  id: CAUSE_AND_EFFECT_FORM_ID,\n  fields: [\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_reference`,\n      helperText: 'Unique references for the cause and effect thread',\n      name: 'reference',\n      label: 'Reference',\n      labelInfo: '(required - must be unique)',\n      type: 'text',\n      disabled: true,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_groupId`,\n      helperText: 'The Group this Cause and Effect Thread belongs to',\n      name: 'groupId',\n      label: 'Group',\n      type: 'select',\n      items: GROUP_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_deliverableId`,\n      helperText: 'The Deliverable this Cause and Effect Thread is assoicated with',\n      name: 'deliverableId',\n      label: 'Deliverable',\n      labelInfo: '(required)',\n      type: 'select',\n      items: DELIVERABLE_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_cause`,\n      helperText: 'If [Deliverable] Then [Driver]',\n      name: 'cause',\n      label: 'Cause',\n      type: 'text',\n      placeholder: 'If [Deliverable] Then [Driver]',\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_measureId`,\n      helperText: 'The Driver this Cause and Effect Thread influences',\n      name: 'measureId',\n      label: 'Driver',\n      labelInfo: '(required)',\n      type: 'select',\n      items: MEASURE_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_stakeholderId`,\n      helperText: 'The Stakeholder this Cause and Effect Thread is assoicated with',\n      name: 'stakeholderId',\n      label: 'Stakeholder',\n      type: 'select',\n      items: STAKEHOLDER_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_beneficiaryId`,\n      helperText: 'The Beneficiary this Cause and Effect Thread is associated with',\n      name: 'beneficiaryId',\n      label: 'Beneficiary',\n      type: 'select',\n      items: BENEFICIARY_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_benefitId`,\n      helperText: 'The Benefit this Cause and Effect Thread influences',\n      name: 'benefitId',\n      label: 'Benefit',\n      labelInfo: '(required)',\n      type: 'select',\n      items: BENEFIT_ID,\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_equation`,\n      helperText: 'Annual Effect caused by this Cause and Effect Thread',\n      name: 'equation',\n      label: 'Equation',\n      type: 'equation',\n      placeholder: 'e.g. 2*100+p_parameter',\n    },\n    {\n      id: `${CAUSE_AND_EFFECT_FORM_ID}_effect`,\n      helperText: 'If [Driver] Then [Benefit]',\n      name: 'effect',\n      label: 'Effect',\n      type: 'text',\n      placeholder: 'If [Driver] Then [Benefit]',\n    },\n  ],\n  validate: validators.validateThread,\n  warn: validators.warnThread,\n};\nexport const CAUSE_AND_EFFECT_TYPE = {\n  id: CAUSE_AND_EFFECT_ID,\n  name: CAUSE_AND_EFFECT_NAME,\n  key: CAUSE_AND_EFFECT_KEY,\n  icon: CAUSE_AND_EFFECT_ICON,\n};\n\nexport const ATOMIC_TYPE_IDS = [\n  BENEFIT_ID,\n  COST_ID,\n  DELIVERABLE_ID,\n  STAKEHOLDER_ID,\n  PHASE_ID,\n  GROUP_ID,\n  BENEFICIARY_ID,\n  PARAMETER_ID,\n  CAUSE_AND_EFFECT_ID,\n];\n\nexport const ATOMIC_TYPES = [\n  BENEFIT_TYPE,\n  COST_TYPE,\n  DELIVERABLE_TYPE,\n  STAKEHOLDER_TYPE,\n  PHASE_TYPE,\n  GROUP_TYPE,\n  BENEFICIARY_TYPE,\n  PARAMETER_TYPE,\n  CAUSE_AND_EFFECT_TYPE,\n];\n\n// COMPOUND_TYPES ==================================================================================\nexport const BENEFIT_BUILDUP_ID = 'BENEFIT_BUILDUP_ID';\nexport const BENEFIT_BUILDUP_KEY = 'benefitBuildup';\nexport const BENEFIT_BUILDUP_NAME = 'Benefit Buildup';\nexport const BENEFIT_BUILDUP_ICON = 'heat-grid';\nexport const BENEFIT_BUILDUP_TYPE = {\n  id: BENEFIT_BUILDUP_ID,\n  name: BENEFIT_BUILDUP_NAME,\n  key: BENEFIT_BUILDUP_KEY,\n  icon: BENEFIT_BUILDUP_ICON,\n  matrixXKey: BENEFIT_KEY,\n  matrixYKey: PHASE_KEY,\n};\n\nexport const BENEFIT_ATTRIBUTION_ID = 'BENEFIT_ATTRIBUTION_ID';\nexport const BENEFIT_ATTRIBUTION_KEY = 'benefitAttribution';\nexport const BENEFIT_ATTRIBUTION_NAME = 'Benefit Attribution';\nexport const BENEFIT_ATTRIBUTION_ICON = 'heat-grid';\nexport const BENEFIT_ATTRIBUTION_TYPE = {\n  id: BENEFIT_ATTRIBUTION_ID,\n  name: BENEFIT_ATTRIBUTION_NAME,\n  key: BENEFIT_ATTRIBUTION_KEY,\n  icon: BENEFIT_ATTRIBUTION_ICON,\n  matrixXKey: DELIVERABLE_KEY,\n  matrixYKey: PHASE_KEY,\n  matrixZKey: BENEFIT_KEY,\n};\n\nexport const COST_ATTRIBUTION_ID = 'COST_ATTRIBUTION_ID';\nexport const COST_ATTRIBUTION_KEY = 'costAttribution';\nexport const COST_ATTRIBUTION_NAME = 'Cost Attribution';\nexport const COST_ATTRIBUTION_ICON = 'heat-grid';\nexport const COST_ATTRIBUTION_TYPE = {\n  id: COST_ATTRIBUTION_ID,\n  name: COST_ATTRIBUTION_NAME,\n  key: COST_ATTRIBUTION_KEY,\n  icon: COST_ATTRIBUTION_ICON,\n  matrixXKey: COST_KEY,\n  matrixYKey: PHASE_KEY,\n};\n\nexport const STAKEHOLDER_BENEFITS_ID = 'STAKEHOLDER_BENEFITS_ID';\nexport const STAKEHOLDER_BENEFITS_KEY = 'stakeholderBenefits';\nexport const STAKEHOLDER_BENEFITS_NAME = 'Stakeholder Benefits';\nexport const STAKEHOLDER_BENEFITS_ICON = 'heat-grid';\nexport const STAKEHOLDER_BENEFITS_TYPE = {\n  id: STAKEHOLDER_BENEFITS_ID,\n  name: STAKEHOLDER_BENEFITS_NAME,\n  key: STAKEHOLDER_BENEFITS_KEY,\n  icon: STAKEHOLDER_BENEFITS_ICON,\n  matrixXKey: BENEFIT_KEY,\n  matrixYKey: STAKEHOLDER_KEY,\n};\n\nexport const COMPOUND_TYPES = [\n  BENEFIT_BUILDUP_TYPE,\n  BENEFIT_ATTRIBUTION_TYPE,\n  COST_ATTRIBUTION_TYPE,\n  STAKEHOLDER_BENEFITS_TYPE,\n];\n\nexport const COMPOUND_TYPE_IDS = [\n  BENEFIT_BUILDUP_ID,\n  BENEFIT_ATTRIBUTION_ID,\n  COST_ATTRIBUTION_ID,\n  STAKEHOLDER_BENEFITS_ID,\n];\n\nexport const PROGRAMME_ID = 'PROGRAMME_TYPE';\nexport const PROGRAMME_KEY = 'programmes';\nexport const PROGRAMME_NAME = 'Programmes';\nexport const PROGRAMME_ICON = 'waterfall-chart';\nexport const PROGRAMME_FORM_ID = 'PROGRAMME_FORM';\nexport const PROGRAMME_FORM = {\n  id: PROGRAMME_FORM_ID,\n  fields: [\n    {\n      id: `${PROGRAMME_FORM_ID}_name`,\n      helperText: 'Name for the programme',\n      label: 'Programme Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter programme name here...',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_mission`,\n      helperText: 'The mission for the programme',\n      label: 'Mission',\n      name: 'mission',\n      type: 'textarea',\n      placeholder: 'Enter programme mission here...',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_vision`,\n      helperText: 'The vision for the programme',\n      label: 'Vision',\n      name: 'vision',\n      type: 'textarea',\n      placeholder: 'Enter programme vision here...',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_unitOfMeasure`,\n      helperText: 'The financial unit of measure/currency to use as default in the model',\n      label: 'Unit of Measure',\n      name: 'unitOfMeasure',\n      type: 'text',\n      placeholder: 'Enter model unit of measure here...',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_start`,\n      helperText: 'Programme start date',\n      label: 'Programme Start',\n      name: 'start',\n      labelInfo: '(required)',\n      type: 'date',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_financialStart`,\n      helperText: 'Financial start date',\n      label: 'Financial Start',\n      name: 'financialStart',\n      labelInfo: '(required - cannot be later than programme start)',\n      type: 'date',\n    },\n    {\n      id: `${PROGRAMME_FORM_ID}_scorecardStart`,\n      helperText: 'Scorecard start date',\n      label: 'Scorecard Start',\n      name: 'scorecardStart',\n      labelInfo: '(required - cannot be later than programme start)',\n      type: 'date',\n    },\n  ],\n  validate: validators.validateProgramme,\n  warn: validators.warnProgramme,\n};\nexport const PROGRAMME_TYPE = {\n  id: PROGRAMME_ID,\n  key: PROGRAMME_KEY,\n  name: PROGRAMME_NAME,\n  icon: PROGRAMME_ICON,\n  form: PROGRAMME_FORM,\n  children: [...ATOMIC_TYPES, ...STRATEGY_MAP_TYPES, ...COMPOUND_TYPES],\n};\n\nexport const MODEL_ID = 'MODEL_TYPE';\nexport const MODEL_FORM_ID = 'MODEL_FORM';\nexport const MODEL_KEY = 'model';\nexport const MODEL_NAME = 'Value Model';\nexport const MODEL_ICON = 'folder-close';\nexport const MODEL_FORM = {\n  id: MODEL_FORM_ID,\n  fields: [\n    {\n      id: `${MODEL_FORM_ID}_name`,\n      helperText: 'Name for the model',\n      label: 'Model Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter model name here...',\n    },\n    {\n      id: `${MODEL_FORM_ID}_client`,\n      helperText: \"Name for the programme's client\",\n      label: 'Client Name',\n      name: 'client',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter client name here...',\n    },\n    {\n      id: `${MODEL_FORM_ID}_author`,\n      helperText: 'Enter model author(s) here',\n      label: 'Author',\n      name: 'author',\n      type: 'textarea',\n      placeholder: 'Enter author(s) here...',\n    },\n  ],\n  validate: validators.validateModel,\n  warn: validators.warnModel,\n};\nexport const MODEL_TYPE = {\n  id: MODEL_ID,\n  key: MODEL_KEY,\n  name: MODEL_NAME,\n  icon: MODEL_ICON,\n  form: MODEL_FORM,\n  children: [PROGRAMME_TYPE],\n};\n\n// SCENARIOS/CERTAINTY TYPES ======================================================================\nexport const SCENARIO_ID = 'SCENARIO_TYPE';\nexport const SCENARIO_FORM_ID = 'SCENARIO_ID';\nexport const SCENARIO_KEY = 'scenarios';\nexport const SCENARIO_NAME = 'Scenarios';\nexport const SCENARIO_ICON = 'comparison';\nexport const SCENARIO_FORM = {\n  id: SCENARIO_FORM_ID,\n  fields: [\n    {\n      id: `${SCENARIO_FORM_ID}_name`,\n      helperText: 'Name for the scenario',\n      label: 'Scenario Name',\n      name: 'name',\n      labelInfo: '(required)',\n      type: 'text',\n      placeholder: 'Enter scenario name here...',\n    },\n    {\n      id: `${SCENARIO_FORM_ID}_definition`,\n      helperText: 'The definition for the scenario',\n      label: 'Definition',\n      name: 'definition',\n      type: 'textarea',\n      placeholder: 'Enter scenario definition here...',\n    },\n  ],\n  validate: validators.validateScenario,\n  warn: validators.warnScenario,\n};\nexport const SCENARIO_TYPE = {\n  id: SCENARIO_ID,\n  key: SCENARIO_KEY,\n  name: SCENARIO_NAME,\n  icon: SCENARIO_ICON,\n  form: SCENARIO_FORM,\n};\n\nexport const BENEFIT_SENSITIVITY_ID = 'BENEFIT_SENSITIVITY';\nexport const BENEFIT_SENSITIVITY_KEY = 'benefitSensitivity';\nexport const BENEFIT_SENSITIVITY_NAME = 'Benefit Sensitivity';\nexport const BENEFIT_SENSITIVITY_ICON = 'comparison';\nexport const BENEFIT_SENSITIVITY_TYPE = {\n  id: BENEFIT_SENSITIVITY_ID,\n  key: BENEFIT_SENSITIVITY_KEY,\n  name: BENEFIT_SENSITIVITY_NAME,\n  icon: BENEFIT_SENSITIVITY_ICON,\n};\n\nexport const PHASE_SENSITIVITY_ID = 'PHASE_SENSITIVITY';\nexport const PHASE_SENSITIVITY_KEY = 'phaseSensitivity';\nexport const PHASE_SENSITIVITY_NAME = 'Phase Sensitivity';\nexport const PHASE_SENSITIVITY_ICON = 'comparison';\nexport const PHASE_SENSITIVITY_TYPE = {\n  id: PHASE_SENSITIVITY_ID,\n  key: PHASE_SENSITIVITY_KEY,\n  name: PHASE_SENSITIVITY_NAME,\n  icon: PHASE_SENSITIVITY_ICON,\n};\n\nexport const DELIVERABLE_SENSITIVITY_ID = 'DELIVERABLE_SENSITIVITY';\nexport const DELIVERABLE_SENSITIVITY_KEY = 'deliverableSensitivity';\nexport const DELIVERABLE_SENSITIVITY_NAME = 'Deliverable Sensitivity';\nexport const DELIVERABLE_SENSITIVITY_ICON = 'comparison';\nexport const DELIVERABLE_SENSITIVITY_TYPE = {\n  id: DELIVERABLE_SENSITIVITY_ID,\n  key: DELIVERABLE_SENSITIVITY_KEY,\n  name: DELIVERABLE_SENSITIVITY_NAME,\n  icon: DELIVERABLE_SENSITIVITY_ICON,\n};\n\nexport const PHASE_COST_SENSITIVITY_ID = 'PHASE_COST_SENSITIVITY';\nexport const PHASE_COST_SENSITIVITY_KEY = 'phaseCostSensitivity';\nexport const PHASE_COST_SENSITIVITY_NAME = 'Phase Cost Sensitivity';\nexport const PHASE_COST_SENSITIVITY_ICON = 'comparison';\nexport const PHASE_COST_SENSITIVITY_TYPE = {\n  id: PHASE_COST_SENSITIVITY_ID,\n  key: PHASE_COST_SENSITIVITY_KEY,\n  name: PHASE_COST_SENSITIVITY_NAME,\n  icon: PHASE_COST_SENSITIVITY_ICON,\n};\n\nexport const BENEFIT_BUILDUP_SENSITIVITY_ID = 'BENEFIT_BUILDUP_SENSITIVITY';\nexport const BENEFIT_BUILDUP_SENSITIVITY_KEY = 'benefitBuildupSensitivity';\nexport const BENEFIT_BUILDUP_SENSITIVITY_NAME = 'Benefit Buildup Sensitivity';\nexport const BENEFIT_BUILDUP_SENSITIVITY_ICON = 'comparison';\nexport const BENEFIT_BUILDUP_SENSITIVITY_TYPE = {\n  id: BENEFIT_BUILDUP_SENSITIVITY_ID,\n  key: BENEFIT_BUILDUP_SENSITIVITY_KEY,\n  name: BENEFIT_BUILDUP_SENSITIVITY_NAME,\n  icon: BENEFIT_BUILDUP_SENSITIVITY_ICON,\n};\n\nexport const SENSITIVITIES = [\n  BENEFIT_SENSITIVITY_TYPE,\n  PHASE_SENSITIVITY_TYPE,\n  DELIVERABLE_SENSITIVITY_TYPE,\n  PHASE_COST_SENSITIVITY_TYPE,\n  BENEFIT_BUILDUP_SENSITIVITY_TYPE,\n];\n\nexport const TYPE_IDS = [\n  BENEFIT_ID,\n  COST_ID,\n  DELIVERABLE_ID,\n  STAKEHOLDER_ID,\n  PHASE_ID,\n  GROUP_ID,\n  BENEFICIARY_ID,\n  PARAMETER_ID,\n  PERSPECTIVE_ID,\n  OBJECTIVE_ID,\n  MEASURE_ID,\n  THEME_ID,\n  CAUSE_AND_EFFECT_ID,\n  BENEFIT_BUILDUP_ID,\n  BENEFIT_ATTRIBUTION_ID,\n  COST_ATTRIBUTION_ID,\n  STAKEHOLDER_BENEFITS_ID,\n  PROGRAMME_ID,\n  SCENARIO_ID,\n  MODEL_ID,\n];\n\n// ANALYSIS GRAPHS ================================================================================\nexport const GRAPH_TYPE_BAR = 'BAR_GRAPH';\nexport const GRAPH_TYPE_LINE = 'LINE_GRAPH';\nexport const GRAPH_TYPE_PIE = 'PIE_GRAPH';\n\nexport const DCF_ID = 'DCF';\nexport const DCF_KEY = 'dcf';\nexport const DCF_ICON = 'graph';\nexport const DCF_NAME = 'Discounted Cash Flow (Financial Benefits)';\nexport const DCF_BASELINE_KEY = 'baseline';\nexport const DCF_SCENARIO_KEY = 'scenario';\nexport const DCF_GRAPH = {\n  id: DCF_ID,\n  key: DCF_KEY,\n  icon: DCF_ICON,\n  name: DCF_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: [DCF_BASELINE_KEY, DCF_SCENARIO_KEY],\n};\n\nexport const VALUE_FOR_MONEY_ID = 'VALUE_FOR_MONEY';\nexport const VALUE_FOR_MONEY_KEY = 'vfm';\nexport const VALUE_FOR_MONEY_ICON = 'graph';\nexport const VALUE_FOR_MONEY_NAME = 'Value for Money (Non-Financial Benefits)';\nexport const VALUE_FOR_MONEY_GRAPH = {\n  id: VALUE_FOR_MONEY_ID,\n  key: VALUE_FOR_MONEY_KEY,\n  icon: VALUE_FOR_MONEY_ICON,\n  name: VALUE_FOR_MONEY_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: ['Well People'],\n};\n\nexport const MAIN_GRAPHS = [DCF_GRAPH, VALUE_FOR_MONEY_GRAPH];\n\nexport const BENEFITS_PHASES_ID = 'BENEFITS_PHASES';\nexport const BENEFITS_PHASES_KEY = 'benefitsPhases';\nexport const BENEFITS_PHASES_ICON = 'graph';\nexport const BENEFITS_PHASES_NAME = 'Benefits vs Phases';\nexport const BENEFITS_PHASES_GRAPH = {\n  id: BENEFITS_PHASES_ID,\n  key: BENEFITS_PHASES_KEY,\n  icon: BENEFITS_PHASES_ICON,\n  name: BENEFITS_PHASES_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const BENEFITS_YEARS_ID = 'BENEFITS_YEARS';\nexport const BENEFITS_YEARS_KEY = 'benefitsYears';\nexport const BENEFITS_YEARS_ICON = 'graph';\nexport const BENEFITS_YEARS_NAME = 'Benefit Schedule';\nexport const BENEFITS_YEARS_GRAPH = {\n  id: BENEFITS_YEARS_ID,\n  key: BENEFITS_YEARS_KEY,\n  icon: BENEFITS_YEARS_ICON,\n  name: BENEFITS_YEARS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const COSTS_YEARS_ID = 'COSTS_YEARS';\nexport const COSTS_YEARS_KEY = 'costsYears';\nexport const COSTS_YEARS_ICON = 'graph';\nexport const COSTS_YEARS_NAME = 'Cost Schedule';\nexport const COSTS_YEARS_GRAPH = {\n  id: COSTS_YEARS_ID,\n  key: COSTS_YEARS_KEY,\n  icon: COSTS_YEARS_ICON,\n  name: COSTS_YEARS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: COST_ID,\n};\n\nexport const BENEFITS_DELIVERABLES_ID = 'BENEFITS_DELIVERABLES';\nexport const BENEFITS_DELIVERABLES_KEY = 'benefitsDeliverables';\nexport const BENEFITS_DELIVERABLES_ICON = 'graph';\nexport const BENEFITS_DELIVERABLES_NAME = 'Benefits vs Deliverables';\nexport const BENEFITS_DELIVERABLES_GRAPH = {\n  id: BENEFITS_DELIVERABLES_ID,\n  key: BENEFITS_DELIVERABLES_KEY,\n  icon: BENEFITS_DELIVERABLES_ICON,\n  name: BENEFITS_DELIVERABLES_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const DELIVERABLES_MEASURES_ID = 'DELIVERABLES_MEASURES';\nexport const DELIVERABLES_MEASURES_KEY = 'deliverablesMeasures';\nexport const DELIVERABLES_MEASURES_ICON = 'graph';\nexport const DELIVERABLES_MEASURES_NAME = 'Deliverables vs Measures';\nexport const DELIVERABLES_MEASURES_GRAPH = {\n  id: DELIVERABLES_MEASURES_ID,\n  key: DELIVERABLES_MEASURES_KEY,\n  icon: DELIVERABLES_MEASURES_ICON,\n  name: DELIVERABLES_MEASURES_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: DELIVERABLE_ID,\n};\n\nexport const DELIVERABLES_STAKEHOLDERS_ID = 'DELIVERABLES_STAKEHOLDERS';\nexport const DELIVERABLES_STAKEHOLDERS_KEY = 'deliverablesStakeholders';\nexport const DELIVERABLES_STAKEHOLDERS_ICON = 'graph';\nexport const DELIVERABLES_STAKEHOLDERS_NAME = 'Deliverables vs Stakeholders';\nexport const DELIVERABLES_STAKEHOLDERS_GRAPH = {\n  id: DELIVERABLES_STAKEHOLDERS_ID,\n  key: DELIVERABLES_STAKEHOLDERS_KEY,\n  icon: DELIVERABLES_STAKEHOLDERS_ICON,\n  name: DELIVERABLES_STAKEHOLDERS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: DELIVERABLE_ID,\n};\n\nexport const BENEFITS_MEASURES_ID = 'BENEFITS_MEASURES';\nexport const BENEFITS_MEASURES_KEY = 'benefitsMeasures';\nexport const BENEFITS_MEASURES_ICON = 'graph';\nexport const BENEFITS_MEASURES_NAME = 'Benefits vs Measures';\nexport const BENEFITS_MEASURES_GRAPH = {\n  id: BENEFITS_MEASURES_ID,\n  key: BENEFITS_MEASURES_KEY,\n  icon: BENEFITS_MEASURES_ICON,\n  name: BENEFITS_MEASURES_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const BENEFITS_GROUPS_ID = 'BENEFITS_GROUPS';\nexport const BENEFITS_GROUPS_KEY = 'benefitsGroups';\nexport const BENEFITS_GROUPS_ICON = 'graph';\nexport const BENEFITS_GROUPS_NAME = 'Benefits vs Groups';\nexport const BENEFITS_GROUPS_GRAPH = {\n  id: BENEFITS_GROUPS_ID,\n  key: BENEFITS_GROUPS_KEY,\n  icon: BENEFITS_GROUPS_ICON,\n  name: BENEFITS_GROUPS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const GROUPS_STAKEHOLDERS_ID = 'GROUPS_STAKEHOLDERS';\nexport const GROUPS_STAKEHOLDERS_KEY = 'groupsStakeholders';\nexport const GROUPS_STAKEHOLDERS_ICON = 'graph';\nexport const GROUPS_STAKEHOLDERS_NAME = 'Groups vs Stakeholders';\nexport const GROUPS_STAKEHOLDERS_GRAPH = {\n  id: GROUPS_STAKEHOLDERS_ID,\n  key: GROUPS_STAKEHOLDERS_KEY,\n  icon: GROUPS_STAKEHOLDERS_ICON,\n  name: GROUPS_STAKEHOLDERS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: GROUP_ID,\n};\n\nexport const BENEFITS_STAKEHOLDERS_ID = 'BENEFITS_STAKEHOLDERS';\nexport const BENEFITS_STAKEHOLDERS_KEY = 'benefitsStakeholders';\nexport const BENEFITS_STAKEHOLDERS_ICON = 'graph';\nexport const BENEFITS_STAKEHOLDERS_NAME = 'Benefits vs Stakeholders';\nexport const BENEFITS_STAKEHOLDERS_GRAPH = {\n  id: BENEFITS_STAKEHOLDERS_ID,\n  key: BENEFITS_STAKEHOLDERS_KEY,\n  icon: BENEFITS_STAKEHOLDERS_ICON,\n  name: BENEFITS_STAKEHOLDERS_NAME,\n  type: GRAPH_TYPE_BAR,\n  keys: BENEFIT_TYPE_FINANCIAL,\n};\n\nexport const BENEFIT_GRAPHS = [\n  BENEFITS_YEARS_GRAPH,\n  COSTS_YEARS_GRAPH,\n  BENEFITS_PHASES_GRAPH,\n  BENEFITS_DELIVERABLES_GRAPH,\n  DELIVERABLES_MEASURES_GRAPH,\n  DELIVERABLES_STAKEHOLDERS_GRAPH,\n  BENEFITS_MEASURES_GRAPH,\n  BENEFITS_GROUPS_GRAPH,\n  GROUPS_STAKEHOLDERS_GRAPH,\n  BENEFITS_STAKEHOLDERS_GRAPH,\n];\n\n// TABLE WIDTHS ===================================================================================\nexport const BENEFIT_TABLE_WIDTHS = [\n  {\n    key: 'BENEFIT_TYPE_name',\n    width: 250,\n  },\n  {\n    key: 'BENEFIT_TYPE_type',\n    width: 150,\n  },\n  {\n    key: 'BENEFIT_TYPE_unitOfMeasure',\n    width: 150,\n  },\n];\n\nexport const COST_TABLE_WIDTHS = [\n  {\n    key: 'COST_TYPE_name',\n    width: 250,\n  },\n  {\n    key: 'COST_TYPE_type',\n    width: 150,\n  },\n];\n\nexport const DELIVERABLE_TABLE_WIDTHS = [\n  {\n    key: 'DELIVERABLE_TYPE_name',\n    width: 300,\n  },\n  {\n    key: 'DELIVERABLE_TYPE_type',\n    width: 110,\n  },\n];\n\nexport const PHASE_TABLE_WIDTHS = [\n  {\n    key: 'PHASE_TYPE_duration',\n    width: 125,\n  },\n  {\n    key: 'PHASE_TYPE_start',\n    width: 125,\n  },\n  {\n    key: 'PHASE_TYPE_slip',\n    width: 150,\n  },\n];\n\nexport const GROUP_TABLE_WIDTHS = [\n  {\n    key: 'GROUP_TYPE_name',\n    width: 200,\n  },\n];\n\nexport const BENEFICIARY_TABLE_WIDTHS = [\n  {\n    key: 'BENEFICIARY_TYPE_name',\n    width: 200,\n  },\n  {\n    key: 'BENEFICIARY_TYPE_owner',\n    width: 200,\n  },\n];\n\nexport const PARAMETER_TABLE_WIDTHS = [\n  {\n    key: 'PARAMETER_TYPE_name',\n    width: 250,\n  },\n  {\n    key: 'PARAMETER_TYPE_value',\n    width: 100,\n  },\n  {\n    key: 'PARAMETER_TYPE_dynamic',\n    width: 100,\n  },\n  {\n    key: 'PARAMETER_TYPE_change',\n    width: 100,\n  },\n  {\n    key: 'PARAMETER_TYPE_changeType',\n    width: 100,\n  },\n  {\n    key: 'PARAMETER_TYPE_unitOfMeasure',\n    width: 100,\n  },\n];\n\nexport const PERSPECTIVE_TABLE_WIDTHS = [\n  {\n    key: 'PERSPECTIVE_TYPE_name',\n    width: 250,\n  },\n  {\n    key: 'PERSPECTIVE_TYPE_weighting',\n    width: 150,\n  },\n];\n\nexport const OBJECTIVE_TABLE_WIDTHS = [\n  {\n    key: 'OBJECTIVE_TYPE_name',\n    width: 250,\n  },\n  {\n    key: 'OBJECTIVE_TYPE_weighting',\n    width: 150,\n  },\n  {\n    key: 'OBJECTIVE_TYPE_perspectiveId',\n    width: 100,\n  },\n  {\n    key: 'OBJECTIVE_TYPE_owner',\n    width: 100,\n  },\n];\n\nexport const CAUSE_AND_EFFECT_TABLE_WIDTHS = [\n  {\n    key: 'CAUSE_AND_EFFECT_TYPE_reference',\n    width: 100,\n  },\n];\n\nexport const TABLE_WIDTHS = [\n  ...BENEFIT_TABLE_WIDTHS,\n  ...COST_TABLE_WIDTHS,\n  ...DELIVERABLE_TABLE_WIDTHS,\n  ...PHASE_TABLE_WIDTHS,\n  ...GROUP_TABLE_WIDTHS,\n  ...BENEFICIARY_TABLE_WIDTHS,\n  ...PARAMETER_TABLE_WIDTHS,\n  ...PERSPECTIVE_TABLE_WIDTHS,\n  ...OBJECTIVE_TABLE_WIDTHS,\n  ...CAUSE_AND_EFFECT_TABLE_WIDTHS,\n];\n","// @flow\n\n/**\n * Thrown when a function was passed an invalid model instance\n */\nexport class InvalidModelError extends Error {\n  // Specific message is passed to parent Error\n  constructor(message: string) {\n    super(message);\n    this.name = 'Invalid Model Error';\n    this.description = 'The throwing function was passed an invalid model instance';\n  }\n}\n\n/**\n * Thrown when a function's intended operation would produce an invalid model instance\n */\nexport class InvalidUpdateError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'Invalid Update Error';\n    this.description =\n      'The throwing function attempted to update a model value with an invalid one';\n  }\n}\n\n/**\n * Thrown when the argument provided to a function was invalid (e.g. id not present in model)\n */\nexport class InconsistentArgumentError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'Invalid Argument Error';\n    this.description =\n      'The throwing function was provided an argument which was invalid with respect to the model instance';\n  }\n}\n\n/**\n * Throws when the application encounters an inconsistent state\n */\nexport class InconsistentStateError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'Inconsistent State Error';\n    this.description = 'The model instance stored within the VMT entered an inconsistent state';\n  }\n}\n\n/**\n * Throws when the application encounters an invalid state\n */\nexport class InvalidStateError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'Invalid State Error';\n    this.description = 'The model instance stored within the VMT entered an invalid state';\n  }\n}\n","// @flow\nimport * as CONSTANTS from '../config/constants';\nimport * as types from '../model/api/types';\n// import { INITIAL_REFS } from './test_data';\n\nimport { type Model } from '../model/api/types';\n\nexport type TypeObject = {\n  id: string,\n  key: string,\n  name: string,\n  icon: string,\n  matrixXKey?: string,\n  matrixYKey?: string,\n  matrixZKey?: string,\n};\n\nexport type FormItemObject = {\n  id: string,\n  value: string,\n  label: string,\n};\n\nexport type FormFieldObject = {\n  id: string,\n  helperText: string,\n  label: string,\n  name: string,\n  labelInfo?: string,\n  type:\n    | 'text'\n    | 'textarea'\n    | 'select'\n    | 'date'\n    | 'number'\n    | 'switch'\n    | 'equation'\n    | 'percentage'\n    | 'theme-measures',\n  placeholder?: string,\n  items?: string | Array<FormItemObject>,\n};\n\nexport type FormObject = {\n  id: string,\n  fields: Array<FormFieldObject>,\n  validate?: ({ [string]: any }, model: Model) => { [string]: string },\n  warn?: ({ [string]: any }, model: Model) => { [string]: string },\n};\n\nexport type TableHeaderObject = {\n  id: string,\n  label: string,\n  name: string,\n};\n\nexport type TableObject = {\n  headers: Array<TableHeaderObject>,\n  values: Array<number>,\n  type: TypeObject,\n};\n\nexport type MatrixObject2D = {\n  id: string,\n  dimensions: 2,\n  data: any,\n  x: Array<types.ModelElement>,\n  y: Array<types.ModelElement>,\n};\n\nexport type MatrixObject3D = {\n  id: string,\n  dimensions: 3,\n  data: any,\n  x: Array<types.ModelElement>,\n  y: Array<types.ModelElement>,\n  z: Array<types.ModelElement>,\n};\n\nexport type MatrixObject = MatrixObject2D | MatrixObject3D;\n\nexport function getHelpText(id: string): string | Array<string> {\n  switch (id) {\n    case CONSTANTS.BENEFICIARY_ID:\n      return [\n        'A beneficiary (or driver owner) is a person or entity which will experience a change in a measure (driver of change).',\n        'Beneficiaries are at the point of power, where a change in measures enabled by programme deliverables takes place: measures are owned by beneficiaries.',\n      ];\n    case CONSTANTS.BENEFIT_ID:\n      return [\n        'A benefit is an outcome (lag measure) which is perceived by one or more stakeholders.',\n        'Although intentionally positive, benefits can be negative. For example, a reduced service level to customers as a result of cost cutting.',\n        'Benefits are owned by stakeholders, who are generally represented by key people within the business.',\n      ];\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n      return [\n        'A cause and effect thread is an explicit, quantified relationship between deliverables, measures (drivers), and benefits.',\n        'Most importantly, it quantifies the benefit attributed to a deliverable.',\n      ];\n    case CONSTANTS.DELIVERABLE_ID:\n      return [\n        'A deliverable (or new business capability, programme product) enables new (or releases latent) business capability that causes a change in one or more measures (drivers)',\n        'Deliverables can cause changes in measures either directly or indirectly by enabling other deliverables, in which case they are reflected as dependencies between programme phases.',\n      ];\n    case CONSTANTS.MEASURE_ID:\n      return [\n        'A measure (or driver) is a factor in the business which, when changed, may cause benefits.',\n        'Measures can cause benefits either directly or by causing changes in other measures in a cause and effect chain that results in benefits.',\n        'In practice measures will include outputs, factors which link inputs to outputs, and factors which links outputs to outcomes (benefits).',\n      ];\n    case CONSTANTS.COST_ID:\n      return [\n        'A cost is an input to the programme which is consumed during the course of a phase.',\n        'Costs may or may not result in the intended outputs of the phase.',\n      ];\n    case CONSTANTS.OBJECTIVE_ID:\n      return [\n        'In the context of a Balance Scorecard, an objective is what must be achieved in order to realise the programme vision.',\n        'Objectives contain measures which can be used to evaluate the performance of a programme.',\n      ];\n    case CONSTANTS.PERSPECTIVE_ID:\n      return [\n        'In the context of a Balance Scorecard, a perspective is a particular way of looking at what has been achieved from a programme.',\n        'Perspectives contain particular objectives that must be achieved.',\n      ];\n    case CONSTANTS.PROGRAMME_ID:\n      return [\n        'A programme is a combination of initiatives focusing on value delivery to stakeholders.',\n        'Programmes focus on benefits, enabled by deliverables, and normally comprise of multiple phases with interdependencies between them.',\n      ];\n    case CONSTANTS.PHASE_ID:\n      return [\n        'A phase is an initiative with a start, duration, and finish.',\n        'Phases tend to focus on outputs, but can have a business case in their own right.',\n      ];\n    case CONSTANTS.STAKEHOLDER_ID:\n      return [\n        'A stakeholder is an individual or group that has an interest in or is affected by the outcomes of the business.',\n        'Stakeholders are recipients and owners of benefits; in practice external stakeholders, such as customers, are represented by accountable people within the business.',\n      ];\n    case CONSTANTS.GROUP_ID:\n      return [\n        'A group is a collection of cause and effect threads which enable the collection of similar types of threads.',\n      ];\n    case CONSTANTS.PARAMETER_ID:\n      return [\n        'A parameter is a value (which may change over time) which can be used within the cause and effect equation.',\n      ];\n    case CONSTANTS.MODEL_ID:\n      return [\n        'A value model is a collection elements which encapsulate the dynamics of a change programme.',\n        'Using a value model, one can analyse the expected financial and non-financial benefits of a programme, and further monitor how the value is realised afterwards through a Balance Scorecard linked directly to the driving measures.',\n      ];\n    default:\n      return 'This is a placeholder for actual definitions of model elements here...';\n  }\n}\n\nexport function getTypeObject(id: string): TypeObject {\n  switch (id) {\n    case CONSTANTS.MODEL_ID:\n      return CONSTANTS.MODEL_TYPE;\n    case CONSTANTS.PROGRAMME_ID:\n      return CONSTANTS.PROGRAMME_TYPE;\n    case CONSTANTS.BENEFIT_ID:\n      return CONSTANTS.BENEFIT_TYPE;\n    case CONSTANTS.COST_ID:\n      return CONSTANTS.COST_TYPE;\n    case CONSTANTS.DELIVERABLE_ID:\n      return CONSTANTS.DELIVERABLE_TYPE;\n    case CONSTANTS.STAKEHOLDER_ID:\n      return CONSTANTS.STAKEHOLDER_TYPE;\n    case CONSTANTS.PHASE_ID:\n      return CONSTANTS.PHASE_TYPE;\n    case CONSTANTS.GROUP_ID:\n      return CONSTANTS.GROUP_TYPE;\n    case CONSTANTS.BENEFICIARY_ID:\n      return CONSTANTS.BENEFICIARY_TYPE;\n    case CONSTANTS.PARAMETER_ID:\n      return CONSTANTS.PARAMETER_TYPE;\n    case CONSTANTS.PERSPECTIVE_ID:\n      return CONSTANTS.PERSPECTIVE_TYPE;\n    case CONSTANTS.THEME_ID:\n      return CONSTANTS.THEME_TYPE;\n    case CONSTANTS.OBJECTIVE_ID:\n      return CONSTANTS.OBJECTIVE_TYPE;\n    case CONSTANTS.MEASURE_ID:\n      return CONSTANTS.MEASURE_TYPE;\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n      return CONSTANTS.CAUSE_AND_EFFECT_TYPE;\n    case CONSTANTS.BENEFIT_ATTRIBUTION_ID:\n      return CONSTANTS.BENEFIT_ATTRIBUTION_TYPE;\n    case CONSTANTS.COST_ATTRIBUTION_ID:\n      return CONSTANTS.COST_ATTRIBUTION_TYPE;\n    case CONSTANTS.STAKEHOLDER_BENEFITS_ID:\n      return CONSTANTS.STAKEHOLDER_BENEFITS_TYPE;\n    case CONSTANTS.BENEFIT_BUILDUP_ID:\n      return CONSTANTS.BENEFIT_BUILDUP_TYPE;\n    default:\n      throw new Error(`Could not associate ${id} with a type`);\n  }\n}\n\nexport function getTypeObjectFromKey(key: string): TypeObject {\n  switch (key) {\n    case CONSTANTS.PROGRAMME_KEY:\n      return CONSTANTS.PROGRAMME_TYPE;\n    case CONSTANTS.BENEFIT_KEY:\n      return CONSTANTS.BENEFIT_TYPE;\n    case CONSTANTS.COST_KEY:\n      return CONSTANTS.COST_TYPE;\n    case CONSTANTS.DELIVERABLE_KEY:\n      return CONSTANTS.DELIVERABLE_TYPE;\n    case CONSTANTS.STAKEHOLDER_KEY:\n      return CONSTANTS.STAKEHOLDER_TYPE;\n    case CONSTANTS.PHASE_KEY:\n      return CONSTANTS.PHASE_TYPE;\n    case CONSTANTS.GROUP_KEY:\n      return CONSTANTS.GROUP_TYPE;\n    case CONSTANTS.BENEFICIARY_KEY:\n      return CONSTANTS.BENEFICIARY_TYPE;\n    case CONSTANTS.PARAMETER_KEY:\n      return CONSTANTS.PARAMETER_TYPE;\n    case CONSTANTS.PERSPECTIVE_KEY:\n      return CONSTANTS.PERSPECTIVE_TYPE;\n    case CONSTANTS.THEME_KEY:\n      return CONSTANTS.THEME_TYPE;\n    case CONSTANTS.OBJECTIVE_KEY:\n      return CONSTANTS.OBJECTIVE_TYPE;\n    case CONSTANTS.MEASURE_KEY:\n      return CONSTANTS.MEASURE_TYPE;\n    case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n      return CONSTANTS.CAUSE_AND_EFFECT_TYPE;\n    default:\n      throw new Error(`Could not associate ${key} with a type`);\n  }\n}\n\nexport function isSelectConstant(id: string): boolean {\n  return [\n    CONSTANTS.BENEFIT_TYPE_FINANCIAL,\n    CONSTANTS.BENEFIT_TYPE_NON_FINANCIAL,\n    CONSTANTS.COST_TYPE_DEVELOPMENT,\n    CONSTANTS.COST_TYPE_SUPPORT,\n    CONSTANTS.PHASE_SLIP_RULE_FIXED,\n    CONSTANTS.PHASE_SLIP_RULE_TIME_AND_MATERIALS,\n    CONSTANTS.PARAMETER_CHANGE_TYPE_GEOMETRIC,\n    CONSTANTS.PARAMETER_CHANGE_TYPE_ARITHMETIC,\n  ].includes(id);\n}\n\nexport function getSelectConstantLabel(id: string): string {\n  switch (id) {\n    case CONSTANTS.BENEFIT_TYPE_FINANCIAL:\n      return CONSTANTS.BENEFIT_TYPE_FINANCIAL_LABEL;\n    case CONSTANTS.BENEFIT_TYPE_NON_FINANCIAL:\n      return CONSTANTS.BENEFIT_TYPE_NON_FINANCIAL_LABEL;\n    case CONSTANTS.COST_TYPE_DEVELOPMENT:\n      return CONSTANTS.COST_TYPE_DEVELOPMENT_LABEL;\n    case CONSTANTS.COST_TYPE_SUPPORT:\n      return CONSTANTS.COST_TYPE_SUPPORT_LABEL;\n    case CONSTANTS.PHASE_SLIP_RULE_FIXED:\n      return CONSTANTS.PHASE_SLIP_RULE_FIXED_LABEL;\n    case CONSTANTS.PHASE_SLIP_RULE_TIME_AND_MATERIALS:\n      return CONSTANTS.PHASE_SLIP_RULE_TIME_AND_MATERIALS_LABEL;\n    case CONSTANTS.PARAMETER_CHANGE_TYPE_GEOMETRIC:\n      return CONSTANTS.PARAMETER_CHANGE_TYPE_GEOMETRIC_LABEL;\n    case CONSTANTS.PARAMETER_CHANGE_TYPE_ARITHMETIC:\n      return CONSTANTS.PARAMETER_CHANGE_TYPE_ARITHMETIC_LABEL;\n    default:\n      throw new Error(`Could not associate ${id} with a label`);\n  }\n}\n\nexport function getFormFieldLabel(id: string, key: string): string {\n  // Retreive form object with id\n  const form = getFormObject(id);\n\n  // Find field with name which matches key\n  const found = form.fields.find(field => {\n    return field.name === key;\n  });\n\n  // If not found throw error\n  if (!found) {\n    throw new Error(`Could not find field associated with ${id} and ${key}`);\n  }\n\n  // Return label of found field\n  return found.label;\n}\n\nexport function isElementId(key: string, attribute: string): boolean {\n  const idAttributes = [\n    'benefitId',\n    'deliverableId',\n    'measureId',\n    'objectiveId',\n    'perspectiveId',\n    'stakeholderId',\n    'beneficiaryId',\n    'groupId',\n  ];\n  return idAttributes.includes(attribute);\n}\n\nexport function getSelectElementLabel(programme: types.Programme, id: string): string {\n  // Return none label if none selected\n  if (id === 'none') {\n    return 'None';\n  }\n\n  // TODO: Review this implementation, seems whack\n  const modelTypes = [...CONSTANTS.ATOMIC_TYPES, ...CONSTANTS.STRATEGY_MAP_TYPES];\n\n  // Match first instance of id from all possible types\n  for (let i = 0; i < modelTypes.length; i++) {\n    // Get elements for type\n    const elements = programme[modelTypes[i].key];\n    // Try and find matching element\n    const found = elements.find(element => element.id === id);\n\n    // If found and there is an attached name return it\n    if (found && found.name) return found.name;\n  }\n\n  // If exhaust all modelTypes and cannot find\n  throw new Error(`Could not find element with id ${id}`);\n}\n\nexport function getMeasuresStringFromIdArray(\n  programme: types.Programme,\n  measureIds: Array<string>\n): string {\n  const { measures } = programme;\n  let strRep = '';\n  measureIds.forEach((id, idx) => {\n    const found = measures.find(measure => measure.id === id);\n    if (!found) {\n      throw new Error(`Could not find measure with id ${id}`);\n    }\n\n    strRep += found.name;\n\n    if (idx !== measureIds.length - 1) {\n      strRep += ', ';\n    }\n  });\n\n  return strRep;\n}\n\nexport function getFormObject(id: string): FormObject {\n  switch (id) {\n    case CONSTANTS.MODEL_ID:\n      return CONSTANTS.MODEL_FORM;\n    case CONSTANTS.PROGRAMME_ID:\n      return CONSTANTS.PROGRAMME_FORM;\n    case CONSTANTS.BENEFIT_ID:\n      return CONSTANTS.BENEFIT_FORM;\n    case CONSTANTS.COST_ID:\n      return CONSTANTS.COST_FORM;\n    case CONSTANTS.DELIVERABLE_ID:\n      return CONSTANTS.DELIVERABLE_FORM;\n    case CONSTANTS.STAKEHOLDER_ID:\n      return CONSTANTS.STAKEHOLDER_FORM;\n    case CONSTANTS.PHASE_ID:\n      return CONSTANTS.PHASE_FORM;\n    case CONSTANTS.GROUP_ID:\n      return CONSTANTS.GROUP_FORM;\n    case CONSTANTS.BENEFICIARY_ID:\n      return CONSTANTS.BENEFICIARY_FORM;\n    case CONSTANTS.PARAMETER_ID:\n      return CONSTANTS.PARAMETER_FORM;\n    case CONSTANTS.PERSPECTIVE_ID:\n      return CONSTANTS.PERSPECTIVE_FORM;\n    case CONSTANTS.THEME_ID:\n      return CONSTANTS.THEME_FORM;\n    case CONSTANTS.OBJECTIVE_ID:\n      return CONSTANTS.OBJECTIVE_FORM;\n    case CONSTANTS.MEASURE_ID:\n      return CONSTANTS.MEASURE_FORM;\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n      return CONSTANTS.CAUSE_AND_EFFECT_FORM;\n    default:\n      throw new Error(`Cannot associate ${id} with a form`);\n  }\n}\n\nexport function isTypeId(id: string): boolean {\n  return CONSTANTS.TYPE_IDS.includes(id);\n}\n\nexport function isTopLevel(id: string): boolean {\n  return [CONSTANTS.MODEL_ID, CONSTANTS.PROGRAMME_ID].includes(id);\n}\n\nexport function isAtomicType(id: string): boolean {\n  return CONSTANTS.ATOMIC_TYPE_IDS.includes(id);\n}\n\nexport function isCompoundType(id: string): boolean {\n  return CONSTANTS.COMPOUND_TYPE_IDS.includes(id);\n}\n\nexport function isStrategyMapType(id: string): boolean {\n  return CONSTANTS.STRATEGY_MAP_TYPE_IDS.includes(id);\n}\n\nexport function is3DMatrix(id: string): boolean {\n  return id === CONSTANTS.BENEFIT_ATTRIBUTION_ID;\n}\n\nconst matchesId = (id: string) => (element: types.ModelElement): boolean => element.id === id;\n\nexport function getExplorerPathIndex(\n  programme: types.Programme,\n  id: string,\n  type: TypeObject\n): Array<number> {\n  switch (type.id) {\n    case CONSTANTS.BENEFIT_ID:\n      return [0, programme.benefits.findIndex(matchesId(id))];\n    case CONSTANTS.COST_ID:\n      return [1, programme.costs.findIndex(matchesId(id))];\n    case CONSTANTS.DELIVERABLE_ID:\n      return [2, programme.deliverables.findIndex(matchesId(id))];\n    case CONSTANTS.STAKEHOLDER_ID:\n      return [3, programme.stakeholders.findIndex(matchesId(id))];\n    case CONSTANTS.PHASE_ID:\n      return [4, programme.phases.findIndex(matchesId(id))];\n    case CONSTANTS.GROUP_ID:\n      return [5, programme.groups.findIndex(matchesId(id))];\n    case CONSTANTS.BENEFICIARY_ID:\n      return [6, programme.beneficiaries.findIndex(matchesId(id))];\n    case CONSTANTS.PARAMETER_ID:\n      return [7, programme.parameters.findIndex(matchesId(id))];\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n      return [8, programme.causeAndEffect.findIndex(matchesId(id))];\n    case CONSTANTS.PERSPECTIVE_ID:\n      return [9, programme.perspectives.findIndex(matchesId(id))];\n    case CONSTANTS.OBJECTIVE_ID:\n      return [10, programme.objectives.findIndex(matchesId(id))];\n    case CONSTANTS.MEASURE_ID:\n      return [11, programme.measures.findIndex(matchesId(id))];\n    case CONSTANTS.THEME_ID:\n      return [12, programme.themes.findIndex(matchesId(id))];\n    default:\n      throw new Error(`Could not construct explorer path index for ${id}`);\n  }\n}\n\nexport function getDeletionConfirmationText(typeId: string): Array<string> {\n  switch (typeId) {\n    case CONSTANTS.BENEFIT_ID:\n    case CONSTANTS.DELIVERABLE_ID:\n    case CONSTANTS.MEASURE_ID:\n      return [CONSTANTS.DELETE_CONFIRM_TEXT, CONSTANTS.DELETE_THREAD_DISCLAIMER];\n    case CONSTANTS.PERSPECTIVE_ID:\n      return [\n        CONSTANTS.DELETE_CONFIRM_TEXT,\n        CONSTANTS.DELETE_PERSPECTIVE_DISCLAIMER,\n        CONSTANTS.DELETE_STRATEGY_THREAD_DISCLAIMER,\n      ];\n    case CONSTANTS.OBJECTIVE_ID:\n      return [\n        CONSTANTS.DELETE_CONFIRM_TEXT,\n        CONSTANTS.DELETE_OBJECTIVE_DISCLAIMER,\n        CONSTANTS.DELETE_STRATEGY_THREAD_DISCLAIMER,\n      ];\n    case CONSTANTS.COST_ID:\n    case CONSTANTS.PARAMETER_ID:\n    case CONSTANTS.STAKEHOLDER_ID:\n    case CONSTANTS.PHASE_ID:\n    case CONSTANTS.GROUP_ID:\n    case CONSTANTS.BENEFICIARY_ID:\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n    default:\n      return [CONSTANTS.DELETE_CONFIRM_TEXT];\n  }\n}\n\nexport function getDefaultNewElement(\n  programme: types.Programme,\n  typeId: string\n): { [string]: any } {\n  switch (typeId) {\n    case CONSTANTS.BENEFIT_ID:\n      return {\n        name: `Benefit ${programme[CONSTANTS.BENEFIT_KEY].length + 1}`,\n        unitOfMeasure: programme.unitOfMeasure,\n        type: CONSTANTS.BENEFIT_TYPE_FINANCIAL,\n      };\n    case CONSTANTS.DELIVERABLE_ID:\n      return {\n        name: `Deliverable ${programme[CONSTANTS.DELIVERABLE_KEY].length + 1}`,\n        unitOfMeasure: programme.unitOfMeasure,\n      };\n    case CONSTANTS.MEASURE_ID:\n      return {\n        name: `Measure ${programme[CONSTANTS.MEASURE_KEY].length + 1}`,\n        weighting: 10,\n        objectiveId: programme[CONSTANTS.OBJECTIVE_KEY][0], // Objective always added first if none\n        unitOfMeasure: programme.unitOfMeasure,\n      };\n    case CONSTANTS.PERSPECTIVE_ID:\n      return {\n        name: `Perspective ${programme[CONSTANTS.PERSPECTIVE_KEY].length + 1}`,\n        weighting: 25,\n      };\n    case CONSTANTS.OBJECTIVE_ID:\n      return {\n        name: `Objective ${programme[CONSTANTS.OBJECTIVE_KEY].length + 1}`,\n        weighting: 25,\n        perspectiveId: programme[CONSTANTS.PERSPECTIVE_KEY][0], // Perspective always added first\n      };\n    case CONSTANTS.COST_ID:\n      return {\n        name: `Cost ${programme[CONSTANTS.COST_KEY].length + 1}`,\n        type: CONSTANTS.COST_TYPE_DEVELOPMENT,\n      };\n    case CONSTANTS.PARAMETER_ID:\n      return {\n        name: `p_parameter${programme[CONSTANTS.PARAMETER_KEY].length + 1}`,\n        value: 0,\n        unitOfMeasure: '%',\n        change: 0,\n        changeType: CONSTANTS.PARAMETER_CHANGE_TYPE_ARITHMETIC,\n      };\n    case CONSTANTS.STAKEHOLDER_ID:\n      return {\n        name: `Stakeholder ${programme[CONSTANTS.STAKEHOLDER_KEY].length + 1}`,\n      };\n    case CONSTANTS.PHASE_ID:\n      return {\n        name: `Phase ${programme[CONSTANTS.PHASE_KEY].length + 1}`,\n        duration: 4,\n        start: programme.start,\n        slip: CONSTANTS.PHASE_SLIP_RULE_TIME_AND_MATERIALS,\n      };\n    case CONSTANTS.GROUP_ID:\n      return {\n        name: `Group ${programme[CONSTANTS.GROUP_KEY].length + 1}`,\n      };\n    case CONSTANTS.BENEFICIARY_ID:\n      return {\n        name: `Beneficiary ${programme[CONSTANTS.BENEFICIARY_KEY].length + 1}`,\n      };\n    case CONSTANTS.CAUSE_AND_EFFECT_ID:\n      return {\n        deliverableId:\n          programme[CONSTANTS.DELIVERABLE_KEY][0] && programme[CONSTANTS.DELIVERABLE_KEY][0].id,\n        benefitId: programme[CONSTANTS.BENEFIT_KEY][0] && programme[CONSTANTS.BENEFIT_KEY][0].id,\n        measureId: programme[CONSTANTS.MEASURE_KEY][0] && programme[CONSTANTS.MEASURE_KEY][0].id,\n      };\n    default:\n      throw new Error(`Could not retreive default new object for type ${typeId}`);\n  }\n}\n\nlet refs = 22;\nexport function nextRef(): string {\n  return `${CONSTANTS.CAUSE_AND_EFFECT_REFERENCE_PREFIX}${++refs}`;\n}\n\nexport const downloadModel = (model: types.Model) => {\n  // Define data string by stringifying export object\n  const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(\n    JSON.stringify(model, null, '  ')\n  )}`;\n  // Create invisible anchor node to trigger download\n  const downloadAnchorNode = document.createElement('a');\n\n  // Set string as payload\n  downloadAnchorNode.setAttribute('href', dataStr);\n\n  // Set name as argument value or if undefined default new model name\n  downloadAnchorNode.setAttribute('download', `${model.name}.vmd`);\n\n  // Append anchor to body as firefox will not trigger events unmounted\n  if (document.body) {\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n  }\n\n  // Simulate click event and remove anchor\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n};\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\n// Spinner and Text blueprint components\nimport { Spinner, Text } from '@blueprintjs/core';\n\n// Local Flow Type\ntype LoadingProps = {\n  text: string,\n};\n\n// Styling\nconst containerStyle = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  height: '100%',\n};\n\nconst innerStyle = {\n  display: 'flex',\n  flex: 1,\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  maxWidth: '60%',\n};\n\n// Stateless functional component\nexport const Loading = ({ text }: LoadingProps): Node => {\n  return (\n    <div style={containerStyle}>\n      <div style={innerStyle}>\n        {/* Spinner */}\n        <Spinner />\n\n        {/* Accompanying text */}\n        <div style={{ marginTop: 10 }}>\n          <Text>{text}</Text>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","// @flow\n// Uses axios for making HTTP requests\nimport axios from 'axios';\n\n// Uses universal cookie to store login information as cookie\n// Also is persisted in local storage through redux-persist\nimport Cookies from 'universal-cookie';\n\n// Moment library for consistent datetimes\nimport moment from 'moment';\n\n// Parsing JSON Web Tokens\nimport jwt from 'jsonwebtoken';\n\n// Configuration constants\nimport * as CONSTANTS from '../config/constants';\n\n// Components for toasting\nimport { AppToaster } from '../components/Toaster';\nimport { Intent } from '@blueprintjs/core';\n\n// Action Types\nimport { SET_CURRENT_USER } from './types';\n\n// Flow Types\nimport type { User, LoginData } from '../types';\nimport type { SetCurrentUserAction, DispatchFunction } from './types';\n\n// Create new cookies instance\nconst cookies = new Cookies();\n\n// Function which toasts a valid user with their license information\nfunction toastUser(user: User, token: string) {\n  // Decode JWT Token\n  const decodedToken = jwt.decode(token);\n\n  // Parse token expiration and license expiration as moment\n  const tokenExpiration = moment.unix(decodedToken.exp);\n  const licenseExpiration = moment(user.licenseExpiration, CONSTANTS.DATE_FORMAT);\n\n  // Initialise a message and intent with which to toast to the user\n  let message = '';\n  let intent = Intent.SUCCESS;\n\n  // If license type is not unlimited then add license information\n  if (user.licenseType !== CONSTANTS.UNLIMITED_LICENSE_STRING && licenseExpiration.isValid()) {\n    message += ` Your license expires in ${licenseExpiration.fromNow()}`;\n    message += ` on: ${licenseExpiration.format('dddd, MMMM Do YYYY')}.`;\n\n    // Decide on intent based on how long the license has until expiry\n    if (licenseExpiration.diff(new Date(), 'days') < 14) {\n      intent = Intent.DANGER;\n    } else if (licenseExpiration.diff(new Date(), 'days') < 30) {\n      intent = Intent.WARNING;\n    }\n  }\n\n  // If license is unlimited then report that fact\n  if (user.licenseType === CONSTANTS.UNLIMITED_LICENSE_STRING) {\n    message += ' You have an unlimited license.';\n  }\n\n  // Toast license information\n  AppToaster.show({\n    message: message.trim(),\n    intent,\n  });\n\n  // Toast welcome information\n  AppToaster.show({\n    message: `Welcome back ${\n      user.firstName\n    }! You will remain logged in for ${tokenExpiration.fromNow()}.`,\n    intent: Intent.SUCCESS,\n  });\n}\n\n// Action creator which returns a 'set current user' action\nexport function setCurrentUser(user: User, token: string): SetCurrentUserAction {\n  toastUser(user, token);\n  return {\n    type: SET_CURRENT_USER,\n    user: {\n      ...user,\n      token,\n    },\n  };\n}\n\n// Action creator which returns a (resetting) 'set current user' action\nexport function resetCurrentUser(): SetCurrentUserAction {\n  return {\n    type: SET_CURRENT_USER,\n    user: {},\n  };\n}\n\n// Thunk action creator which returns a function which will try to login and handle result\nexport function login(data: LoginData, history: any): DispatchFunction => Promise<void> {\n  // Initialise a thunk (a function closure -> to be dispatched)\n  const thunk = (dispatch: DispatchFunction): Promise<void> => {\n    return axios\n      .post('/api/login', {\n        username: data.identifier,\n        password: data.password,\n      })\n      .then(res => {\n        // Extract retreived user object and JWT from result\n        const { user, token } = res.data;\n\n        // Log successful log in to console\n        console.log(`Successfully logged in: ${user.firstName} ${user.lastName}`);\n\n        // Set cookie as token\n        cookies.set('vmt-jwt', token);\n\n        // Dispatch action to update current user\n        dispatch(setCurrentUser(user, token));\n      })\n      .catch(err => {\n        // Log as error, received error\n        console.error('Failed to log user in:', err);\n\n        // Remove any cookie set\n        cookies.remove('vmt-jwt');\n\n        // Reset current user\n        dispatch(resetCurrentUser());\n\n        // Toast error message to user\n        AppToaster.show({ message: err.message, intent: Intent.DANGER });\n      });\n  };\n  return thunk;\n}\n\n// Thunk action creator which validates a JWT with the server\nexport function validate(token: string): DispatchFunction => Promise<void> {\n  return (dispatch: DispatchFunction): Promise<void> => {\n    return axios\n      .post('/api/validate', {}, { withCredentials: true })\n      .then(res => {\n        // Log successful validation\n        console.log(`Validated user: ${res.data.user.firstName} ${res.data.user.lastName}`);\n\n        // Set cookie\n        cookies.set('vmt-jwt', res.data.token);\n\n        // Set current user\n        dispatch(setCurrentUser(res.data.user, res.data.token));\n      })\n      .catch(err => {\n        // Log failed validation\n        console.error('Failed validating user:', err);\n\n        // Remove cookie\n        cookies.remove('vmt-jwt');\n\n        // Reset current user\n        dispatch(resetCurrentUser());\n      });\n  };\n}\n\n// Thunk action creator which logs a user out\nexport function logout(): DispatchFunction => void {\n  return (dispatch: DispatchFunction) => {\n    cookies.remove('vmt-jwt');\n    dispatch(resetCurrentUser());\n  };\n}\n\nexport function getLoginCookie(): ?string {\n  return cookies.get('vmt-jwt');\n}\n","// @flow\nimport moment from 'moment';\n\n// Model API\nimport * as API from '../../model/api';\n\n// Constants\nimport { DATE_FORMAT } from '../../config/constants';\nimport * as CONSTANTS from '../../config/constants';\n\n// Flow Types\nimport * as types from '../../model/api/types';\n\ntype ErrorObject = { [string]: string };\n\nfunction checkNonEmptyString(\n  keys: Array<string>,\n  data: { +[string]: any },\n  errors: ErrorObject\n): void {\n  keys.forEach(key => {\n    if (typeof data[key] === 'string' && data[key].length === 0) {\n      errors[key] = 'This field is required';\n    } else if (typeof data[key] !== 'string') {\n      errors[key] = 'This field must be a string';\n    }\n  });\n}\n\ntype NamedElement = { +name: string, +[string]: any };\nfunction checkUniqueName(\n  data: { +id: string, +name: string },\n  elements: Array<NamedElement>,\n  element: string,\n  errors: ErrorObject\n) {\n  // Map current names\n  const currentNames = elements\n    .filter(element => element.id !== data.id)\n    .map(element => element.name);\n\n  // Check if new name is contained within\n  if (currentNames.includes(data.name)) {\n    errors.name = `A ${element} named ${data.name} already exists in the model`;\n  }\n}\n\nexport function validateModel(data: types.Model) {\n  const errors = {};\n\n  const required = ['name', 'client'];\n  checkNonEmptyString(required, data, errors);\n\n  return errors;\n}\n\nexport function warnModel(data: types.Model) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateCost(data: types.Cost, model: types.Model) {\n  let errors = {};\n\n  // Check required fields\n  const required = ['name', 'type'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check name is unique amongst costs\n  if (!errors.name) {\n    checkUniqueName(data, API.getCosts(model), 'cost', errors);\n  }\n\n  // Check types are valid\n  if (!errors.type) {\n    const validTypes = [CONSTANTS.COST_TYPE_DEVELOPMENT, CONSTANTS.COST_TYPE_SUPPORT];\n    if (!errors.type && !validTypes.includes(data.type)) {\n      errors.type = 'Cost type was not one of the two pre-defined types';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnCost(data: types.Cost) {\n  let warnings = {};\n\n  return warnings;\n}\n\nexport function validateBenefit(data: types.Benefit, model: types.Model) {\n  let errors = {};\n\n  // Check required properties\n  const required = ['name', 'unitOfMeasure', 'type'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check unique name\n  if (!errors.name) {\n    checkUniqueName(data, API.getBenefits(model), 'benefit', errors);\n  }\n\n  // Confirm not core benefit becoming non financial\n  const coreBenefits = model.programmes[0]._coreBenefits;\n  if (!errors.type) {\n    if (coreBenefits.includes(data.id) && data.type !== CONSTANTS.BENEFIT_TYPE_FINANCIAL) {\n      errors.type = 'Revenue, Costbase, and Margin benefits must be financial';\n    }\n  }\n\n  // Confirm type is valid\n  if (!errors.type) {\n    const validTypes = [CONSTANTS.BENEFIT_TYPE_FINANCIAL, CONSTANTS.BENEFIT_TYPE_NON_FINANCIAL];\n    if (!errors.type && !validTypes.includes(data.type)) {\n      errors.type = 'Benefit type was not one of the two pre-defined types';\n    }\n  }\n\n  // Confirm not financial benefit changing unit of measure\n  const programmeUnits = API.getProgrammeUnitOfMeasure(model);\n  if (!errors.unitOfMeasure) {\n    if (coreBenefits[2] === data.id && data.unitOfMeasure !== '%') {\n      errors.unitOfMeasure = 'Marign benefit must be measured in %';\n    } else if (\n      data.type === CONSTANTS.BENEFIT_TYPE_FINANCIAL &&\n      coreBenefits[2] !== data.id &&\n      data.unitOfMeasure !== programmeUnits\n    ) {\n      errors.unitOfMeasure = 'Financial benefits must have programme unit of measure';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnBenefit(data: types.Benefit, model: types.Model) {\n  let warnings = {};\n\n  // Add warning if type of benefit is non-financial and unit of measure is same as programme\n  const programmeUnits = API.getProgrammeUnitOfMeasure(model);\n  if (data.type === CONSTANTS.BENEFIT_TYPE_NON_FINANCIAL && data.unitOfMeasure === programmeUnits) {\n    warnings.unitOfMeasure = `Benefit type is non-financial but ${programmeUnits} are financial units`;\n  }\n\n  return warnings;\n}\n\nexport function validateDeliverable(data: types.Deliverable, model: types.Model) {\n  let errors = {};\n\n  // Check required fields\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check for duplicate names\n  if (!errors.name) {\n    checkUniqueName(data, API.getDeliverables(model), 'deliverable', errors);\n  }\n\n  return errors;\n}\n\nexport function warnDeliverable(data: types.Deliverable) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateStakeholder(data: types.Stakeholder, model: types.Model) {\n  let errors = {};\n\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getStakeholders(model), 'stakeholder', errors);\n  }\n\n  return errors;\n}\n\nexport function warnStakeholder(data: types.Stakeholder) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validatePhase(data: types.Phase, model: types.Model) {\n  let errors = {};\n\n  // Check equired fields\n  const required = ['name', 'start', 'slip'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getPhases(model), 'phase', errors);\n  }\n\n  // If start date is alright so far...\n  if (!errors.start) {\n    const startMoment = moment(data.start, DATE_FORMAT, true);\n\n    // Check date format is correct\n    if (!startMoment.isValid()) {\n      errors.start = 'The date was in an invlaid format';\n    } else {\n      // Retreive programme start\n      const programmeStart = API.getProgrammeStart(model);\n\n      // Calculate analysis end date\n      const analysisEnd = moment(programmeStart).add(model._analysisYears, 'years');\n\n      // Confirm phase start is after programme start\n      if (startMoment.isBefore(programmeStart)) {\n        errors.start = `The phase start date should occur on or after the programme start date (${programmeStart.format(\n          DATE_FORMAT\n        )})`;\n      } else if (startMoment.isAfter(analysisEnd)) {\n        errors.start = 'The phase start date is after the period of analysis ends';\n      }\n    }\n  }\n\n  // Check duration is defined and zero or a positivie number\n  if (data.duration < 0) {\n    errors.duration = 'Duration cannot be negative';\n  } else if (data.duration !== 0 && !data.duration) {\n    errors.duration = 'This field is required';\n  }\n\n  // Check duration does not mean phase exceeds analysis duration\n  if (!errors.start && !errors.duration) {\n    const analysisEndMoment = API.getProgrammeStart(model).add(model._analysisYears, 'years');\n    const phaseEndMoment = moment(data.start, DATE_FORMAT, true).add(data.duration, 'weeks');\n\n    if (phaseEndMoment.isAfter(analysisEndMoment)) {\n      errors.duration = 'Phase duration means it will end after the analysis period';\n    }\n  }\n\n  if (!errors.slip) {\n    // Valid rules\n    const validTypes = [\n      CONSTANTS.PHASE_SLIP_RULE_FIXED,\n      CONSTANTS.PHASE_SLIP_RULE_TIME_AND_MATERIALS,\n    ];\n\n    // Check slip rule is one of defined types\n    if (!validTypes.includes(data.slip)) {\n      errors.slip = 'The phase slip rule was not one of the two pre-defined types';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnPhase(data: types.Phase) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateGroup(data: types.Group, model: types.Model) {\n  let errors = {};\n\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getGroups(model), 'group', errors);\n  }\n\n  return errors;\n}\n\nexport function warnGroup(data: types.Group) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateBeneficiary(data: types.Beneficiary, model: types.Model) {\n  let errors = {};\n\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getBeneficiaries(model), 'beneficiary', errors);\n  }\n\n  return errors;\n}\n\nexport function warnBeneficiary(data: types.Beneficiary) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateParameter(data: types.Parameter, model: types.Model) {\n  let errors = {};\n\n  // Check required fields are present\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check for duplicate name\n  if (!errors.name) {\n    checkUniqueName(data, API.getParameters(model), 'parameter', errors);\n  }\n\n  // Check value is present\n  if (!data.value && data.value !== 0) {\n    errors.value = 'Parameter value is required';\n  }\n\n  if (data.dynamic) {\n    const required = ['changeType'];\n    checkNonEmptyString(required, data, errors);\n\n    // Check change type is one of valid types\n    const validTypes = [\n      CONSTANTS.PARAMETER_CHANGE_TYPE_ARITHMETIC,\n      CONSTANTS.PARAMETER_CHANGE_TYPE_GEOMETRIC,\n    ];\n    if (!errors.changeType && !validTypes.includes(data.changeType)) {\n      errors.changeType = 'Parameter change type was not one of pre-defined types';\n    }\n\n    // Check change is supplied\n    if (!data.change && data.change !== 0) {\n      errors.change = 'Parameter change is required if it is dynamic';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnParameter(data: types.Parameter) {\n  let warnings = {};\n\n  if (data.unitOfMeasure.length === 0) {\n    warnings.unitOfMeasure = 'A unit of measure is highly encouraged';\n  }\n\n  return warnings;\n}\n\nexport function validateThread(data: types.Thread, model: types.Model) {\n  let errors = {};\n\n  // Check required fields are present\n  const required = [\n    'reference',\n    'deliverableId',\n    'measureId',\n    'benefitId',\n    'stakeholderId',\n    'groupId',\n    'beneficiaryId',\n    'equation',\n  ];\n  checkNonEmptyString(required, data, errors);\n\n  // Check reference is unique\n  if (!errors.reference) {\n    const threadRefs = API.getThreads(model)\n      .filter(thread => thread.id !== data.id)\n      .map(thread => thread.reference);\n    if (threadRefs.includes(data.reference)) {\n      errors.reference = 'Thread reference must be unique';\n    }\n  }\n\n  // Check deliverable exists\n  if (!errors.deliverableId) {\n    if (data.deliverableId === 'none') {\n      errors.deliverableId = 'The deliverable for a thread cannot be None';\n    } else {\n      const deliverableIds = API.getDeliverables(model).map(deliverable => deliverable.id);\n      if (!deliverableIds.includes(data.deliverableId)) {\n        errors.deliverableId = 'This deliverable does not seem to exist';\n      }\n    }\n  }\n\n  // Check benefit exists and is not none\n  if (!errors.benefitId) {\n    if (data.benefitId === 'none') {\n      errors.benefitId = 'The benefit for a thread cannot be None';\n    } else {\n      const benefitIds = API.getBenefits(model).map(benefit => benefit.id);\n\n      if (!benefitIds.includes(data.benefitId)) {\n        errors.benefitId = 'This benefit does not seem to exist';\n      }\n    }\n  }\n\n  // Check stakeholder exists\n  if (!errors.stakeholderId) {\n    if (data.stakeholderId === 'none') {\n      errors.stakeholderId = 'The stakeholder for a thread cannot be None';\n    } else {\n      const stakeholderIds = API.getStakeholders(model).map(stakeholder => stakeholder.id);\n      if (!stakeholderIds.includes(data.stakeholderId)) {\n        errors.stakeholderId = 'This stakeholder does not seem to exist';\n      }\n    }\n  }\n\n  // Check measure exists or is none\n  if (!errors.measureId && data.measureId !== 'none') {\n    const measureIds = API.getMeasures(model).map(measure => measure.id);\n    if (!measureIds.includes(data.measureId)) {\n      errors.measureId = 'This measure does not seem to exist';\n    }\n  }\n\n  // Check group exists or is none\n  if (!errors.groupId && data.groupId !== 'none') {\n    const groupIds = API.getGroups(model).map(group => group.id);\n    if (!groupIds.includes(data.groupId)) {\n      errors.groupId = 'This group does not seem to exist';\n    }\n  }\n\n  // Check beneficiary exists or is none\n  if (!errors.beneficiaryId && data.beneficiaryId !== 'none') {\n    const beneficiaryIds = API.getBeneficiaries(model).map(beneficiary => beneficiary.id);\n    if (!beneficiaryIds.includes(data.beneficiaryId)) {\n      errors.beneficiaryId = 'This beneficiary does not seem to exist';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnThread(data: types.Thread) {\n  let warnings = {};\n\n  if (!data.cause) {\n    warnings.cause = \"Adding a 'cause' description is strongly recommended\";\n  }\n\n  if (!data.effect) {\n    warnings.effect = \"Adding a 'effect' description is strongly recommended\";\n  }\n\n  return warnings;\n}\n\nexport function validatePerspective(data: types.Perspective, model: types.Model) {\n  let errors = {};\n\n  // Check required fields are present\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check name is unique\n  if (!errors.name) {\n    checkUniqueName(data, API.getPerspectives(model), 'perspective', errors);\n  }\n\n  // Check weighting is at least 0\n  if (!data.weighting && data.weighting !== 0) {\n    errors.weighting = 'This field is required';\n  } else if (data.weighting < 0) {\n    errors.weighting = 'Weighting must be at least 0';\n  }\n\n  // Check total weighting is not greater than 1\n  if (!errors.weighting) {\n    const perspectives = API.getPerspectives(model);\n    const totalWeighting = perspectives\n      .filter(p => p.id !== data.id)\n      .reduce((acc, cur) => acc + cur.weighting, 0);\n\n    if (totalWeighting + data.weighting > 1) {\n      errors.weighting = 'Total weighting would be greater than 100%, reduce other weights first';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnPerspective(data: types.Perspective) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateObjective(data: types.Objective, model: types.Model) {\n  let errors = {};\n\n  // Check required fields are present\n  const required = ['name', 'perspectiveId'];\n  checkNonEmptyString(required, data, errors);\n\n  // Check name is unique\n  if (!errors.name) {\n    checkUniqueName(data, API.getObjectives(model), 'objective', errors);\n  }\n\n  // Check perspective exists\n  if (!errors.perspectiveId) {\n    if (data.perspectiveId !== 'none') {\n      const perspectiveIds = API.getPerspectives(model).map(perspective => perspective.id);\n      if (!perspectiveIds.includes(data.perspectiveId)) {\n        errors.perspectiveId = 'This perspective was not found';\n      }\n    }\n  }\n\n  // Check weighting is at least 0\n  if (!data.weighting && data.weighting !== 0) {\n    errors.weighting = 'This field is required';\n  } else if (data.weighting < 0) {\n    errors.weighting = 'Weighting must be at least 0';\n  }\n\n  // Check total weighting is not greater than 1 w.r.t. perspective id\n  if (!errors.weighting) {\n    const objectives = API.getObjectives(model);\n    const totalWeighting = objectives\n      .filter(o => o.id !== data.id)\n      .filter(o => o.perspectiveId === data.perspectiveId)\n      .reduce((acc, cur) => acc + cur.weighting, 0);\n\n    if (totalWeighting + data.weighting > 1) {\n      errors.weighting = 'Total weighting would be greater than 100%, reduce other weights first';\n    }\n  }\n\n  return errors;\n}\n\nexport function warnObjective(data: types.Objective) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateMeasure(data: types.Measure, model: types.Model) {\n  let errors = {};\n\n  // Check required fields are present\n  const required = ['name', 'objectiveId'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getMeasures(model), 'measure', errors);\n  }\n\n  // Check objective id is either none or valid\n  if (!errors.objectiveId) {\n    if (data.objectiveId !== 'none') {\n      const objectiveIds = API.getObjectives(model).map(objective => objective.id);\n      if (!objectiveIds.includes(data.objectiveId)) {\n        errors.objectiveId = 'This objective was not found';\n      }\n    }\n  }\n\n  // Parse dates as moments\n  const baselineStartMoment = moment(data.baselineStart, DATE_FORMAT, true);\n  const baselineCompleteMoment = moment(data.baselineComplete, DATE_FORMAT, true);\n\n  // Check dates are valid\n  if (!baselineStartMoment.isValid()) {\n    errors.baselineStart = 'Date is not in valid format';\n  }\n  if (!baselineCompleteMoment.isValid()) {\n    errors.baselineComplete = 'Date is not in valid format';\n  }\n\n  // If the dates are valid\n  if (!errors.baselineStart && !errors.baselineComplete) {\n    // Check whether complete date is before start date\n    if (baselineCompleteMoment.isBefore(baselineStartMoment)) {\n      errors.baselineComplete = 'Complete date cannot be before start date';\n    }\n  }\n\n  // Check dates occur on or after scorecard start\n  if (!errors.baselineStart) {\n    // Retrieve scorecard start date\n    const scorecardStartMoment = API.getProgrammeScorecardStart(model);\n\n    if (baselineStartMoment.isBefore(scorecardStartMoment)) {\n      errors.baselineStart = 'Start date cannot be before scorecard start date';\n    }\n\n    if (baselineCompleteMoment.isBefore(scorecardStartMoment)) {\n      errors.baselineStart = 'Complete date cannot be before scorecard start date';\n    }\n  }\n\n  // Check weighting is at least 0\n  if (!data.weighting && data.weighting !== 0) {\n    errors.weighting = 'This field is required';\n  } else if (data.weighting < 0) {\n    errors.weighting = 'Weighting must be at least 0';\n  }\n\n  if (!errors.weighting) {\n    // Retreive measures to check weighting w.r.t. the measure's objective\n    const measures = API.getMeasures(model);\n\n    // Calculate total weighting without current measure\n    const totalWeighting = measures\n      .filter(m => m.id !== data.id)\n      .filter(m => m.objectiveId === data.objectiveId)\n      .reduce((acc, cur) => acc + cur.weighting, 0);\n\n    // If new weighting would create total weighting greater than 1\n    if (totalWeighting + data.weighting > 1) {\n      errors.weighting = 'Total weighting would be greater than 100%, reduce other weights first';\n    }\n  }\n\n  // Determine upper, lower bound and direction of travel\n  let upper, lower, direction;\n\n  // Compare best and worst values\n  if (data.best === data.worst && data.best !== 0) {\n    errors.best = 'Best cannot be the same as worst value';\n    errors.worst = 'Worst cannot be the same as best value';\n  } else if (data.best > data.worst) {\n    upper = data.best;\n    lower = data.worst;\n    direction = 'INCREASE';\n  } else if (data.best < data.worst) {\n    upper = data.worst;\n    lower = data.best;\n    direction = 'DECREASE';\n  } else {\n    upper = data.best;\n    lower = data.worst;\n    direction = 'ZERO';\n  }\n\n  if (!errors.best && !errors.worst && upper !== undefined && lower !== undefined) {\n    // Destructure values to check\n    const { baselineValue, standard, minimumStandard, change } = data;\n\n    // If the best and worst aren't set to 0\n    if (direction !== 'ZERO') {\n      // Check baseline value is within bounds\n      if (baselineValue > upper || baselineValue < lower) {\n        errors.baselineValue = 'Value must be between the best and worst values';\n      }\n\n      // Check standard\n      if (standard > upper || standard < lower) {\n        errors.standard = 'Value must be between the best and worst values';\n      }\n\n      // Check minimum standard\n      if (minimumStandard > upper || minimumStandard < lower) {\n        errors.minimumStandard = 'Value must be between the best and worst values';\n      }\n    }\n\n    if (!errors.minimumStandard && !errors.standard && !errors.change) {\n      if (direction === 'INCREASE') {\n        // Check change value\n        if (change < 0) {\n          errors.change =\n            'Best value was greater than worst value, thus change should be positive (or zero)';\n        }\n\n        // Check minimum standard is lower than standard\n        if (minimumStandard > standard) {\n          errors.minimumStandard =\n            'Best value was greater than worst value, thus minimum standard should be lower than standard';\n        }\n      } else if (direction === 'DECREASE') {\n        // Check change value\n        if (change > 0) {\n          errors.change =\n            'Worst value was greater than best value, thus change should be negative (or zero)';\n        }\n\n        // Check minimum standard is greater than standard\n        if (minimumStandard < standard) {\n          errors.minimumStandard =\n            'Worst value was greater than best value, thus minimum standard should be lower than standard';\n        }\n      }\n    }\n  }\n\n  return errors;\n}\n\nexport function warnMeasure(data: types.Measure) {\n  let warnings = {};\n\n  if (!data.unitOfMeasure) {\n    warnings.unitOfMeasure = 'A unit of measure is highly encouraged';\n  }\n\n  return warnings;\n}\n\nexport function validateProgramme(data: types.Programme, model: types.Model) {\n  let errors = {};\n\n  // Check the fields are not empty\n  const required = ['name', 'start', 'financialStart', 'scorecardStart', 'unitOfMeasure'];\n  checkNonEmptyString(required, data, errors);\n\n  // If the programme start is ok so far...\n  if (!errors.start) {\n    // Try to parse as moment\n    const startMoment = moment(data.start, DATE_FORMAT, true);\n    if (!startMoment.isValid()) {\n      errors.start = 'Date was in an invalid format';\n    } else {\n      // Check the programme start is before all phase starts\n      model.programmes[0].phases.forEach(phase => {\n        if (startMoment.isAfter(phase.start)) {\n          errors.start = `Phase '${\n            phase.name\n          }' would occur after the programme start, change the phase start first`;\n        }\n      });\n    }\n  }\n\n  // If the programme financial start is ok so far...\n  if (!errors.financialStart) {\n    // Try to parse as moment\n    const financialStartMoment = moment(data.financialStart, DATE_FORMAT, true);\n    if (!financialStartMoment.isValid()) {\n      errors.financialStart = 'Date was in an invalid format';\n    } else {\n      // If there are errors with programme start, don't check it yet\n      if (!errors.start) {\n        // Check financial start is before programme start\n        if (financialStartMoment.isAfter(data.start)) {\n          errors.financialStart = 'Financial start date cannot be after programme start date';\n        }\n      }\n    }\n  }\n\n  // If the programme scorecard start is ok so far...\n  if (!errors.scorecardStart) {\n    // Try to parse as moment\n    const scorecardStartMoment = moment(data.scorecardStart, DATE_FORMAT, true);\n    if (!scorecardStartMoment.isValid()) {\n      errors.scorecardStart = 'Date was in an invalid format';\n    } else {\n      // If there are errors with programme start, don't check it yet\n      if (!errors.start) {\n        // Check financial start is before programme start\n        if (scorecardStartMoment.isAfter(data.start)) {\n          errors.scorecardStart = 'Scorecard start date cannot be after programme start date';\n        }\n      }\n    }\n  }\n\n  return errors;\n}\n\nexport function warnProgramme(data: types.Programme) {\n  let warnings = {};\n\n  if (!data.mission) {\n    warnings.mission = 'Setting a programme mission is highly encouraged';\n  }\n\n  if (!data.vision) {\n    warnings.vision = 'Setting a programme vision is highly encouraged';\n  }\n\n  return warnings;\n}\n\nexport function validateScenario(data: types.Scenario, model: types.Model) {\n  let errors = {};\n\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getScenarios(model), 'scenario', errors);\n  }\n\n  return errors;\n}\n\nexport function warnScenario(data: types.Scenario) {\n  let warnings = {};\n  return warnings;\n}\n\nexport function validateTheme(data: types.Theme, model: types.Model) {\n  let errors = {};\n  const required = ['name'];\n  checkNonEmptyString(required, data, errors);\n\n  if (!errors.name) {\n    checkUniqueName(data, API.getThemes(model), 'theme', errors);\n  }\n\n  return errors;\n}\n\nexport function warnTheme(data: types.Theme) {\n  let warnings = {};\n  return warnings;\n}\n","// @flow\n// Flow Types\nimport type { User } from '../types';\nimport type { State, ExplorerElement, MonthOption, StrategyItem } from '../reducers/types';\n\nimport type { Model } from '../model/api/types';\n\n// Redux thunk arguments\n// eslint-disable-next-line no-use-before-define\nexport type DispatchFunction = Action => void;\nexport type GetState = () => State;\n\n// eslint-disable-next-line no-use-before-define\nexport type ThunkAction = (dispatch: Dispatch, getState: GetState) => any;\n// eslint-disable-next-line no-use-before-define\nexport type PromiseAction = Promise<Action>;\n// eslint-disable-next-line no-use-before-define\nexport type Dispatch = (action: Action | ThunkAction | PromiseAction) => any;\n\n// Type keys\nexport type AtomicKey =\n  | 'model'\n  | 'programmes'\n  | 'scenarios'\n  | 'benefits'\n  | 'costs'\n  | 'deliverables'\n  | 'phases'\n  | 'stakeholders'\n  | 'groups'\n  | 'beneficiaries'\n  | 'causeAndEffect'\n  | 'parameters'\n  | 'themes'\n  | 'measures'\n  | 'objectives'\n  | 'perspectives';\n\nexport type MatrixKey =\n  | 'benefitAttribution'\n  | 'stakeholderBenefits'\n  | 'benefitBuildup'\n  | 'costAttribution';\n\n// Action Type constants\n// Global\nexport const TOGGLE_DARK_MODE = 'TOGGLE_DARK_MODE';\nexport type ToggleDarkModeAction = {\n  type: 'TOGGLE_DARK_MODE',\n};\n\nexport const UPDATE_MODEL = 'UPDATE_MODEL';\nexport type UpdateModelAction = {\n  type: 'UPDATE_MODEL',\n  model: Model,\n};\n\n// Authorisation\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport type SetCurrentUserAction = {\n  type: 'SET_CURRENT_USER',\n  user: User | $Exact<{}>,\n};\n\n// Editor\nexport const SET_SELECTED_ELEMENT = 'SET_SELECTED_ELEMENT';\nexport type SetSelectedElementAction = {\n  type: 'SET_SELECTED_ELEMENT',\n  element: ExplorerElement,\n};\nexport const SET_NODE_EXPANDED = 'SET_NODE_EXPANDED';\nexport type SetNodeExpandedAction = {\n  type: 'SET_NODE_EXPANDED',\n  id: string,\n  expanded: boolean,\n};\n\n// Model Elements\nexport const ADD_ATOM = 'ADD_ATOM';\nexport type AddAtomAction = {\n  type: 'ADD_ATOM',\n};\nexport const UPDATE_ATOM = 'UPDATE_ATOM';\nexport type UpdateAtomAction = {\n  type: 'UPDATE_ATOM',\n  id: string,\n  key: AtomicKey,\n  values: { [string]: any },\n};\nexport const DELETE_ATOM = 'DELETE_ATOM';\nexport type DeleteAtomAction = {\n  type: 'DELETE_ATOM',\n};\nexport const UPDATE_MATRIX = 'UPDATE_MATRIX';\nexport type UpdateMatrixAction = {\n  type: 'UPDATE_MATRIX',\n  key: MatrixKey,\n  values: { [string]: { [string]: number | { [string]: number } } },\n};\nexport const ADD_PHASE_LINK = 'ADD_PHASE_LINK';\nexport type AddPhaseLink = {\n  type: 'ADD_PHASE_LINK',\n  id: number,\n  linkType: 'START_TO_START' | 'START_TO_FINISH' | 'FINISH_TO_START' | 'FINISH_TO_FINISH',\n  sourceId: string,\n  targetId: string,\n};\nexport const DELETE_PHASE_LINK = 'DELETE_PHASE_LINK';\nexport type DeletePhaseLink = {\n  type: 'DELETE_PHASE_LINK',\n  id: number,\n};\nexport const UPDATE_SENSITIVITY = 'UPDATE_SENSITIVITY';\nexport type UpdateSensitivityAction = {\n  type: 'UPDATE_SENSITIVITY',\n  id: string,\n  typeKey: string,\n  values: any,\n};\n\n// Analysis\nexport const SET_SELECTED_GRAPH = 'SET_SELECTED_GRAPH';\nexport type SetSelectedGraphAction = {\n  type: 'SET_SELECTED_GRAPH',\n};\nexport const SET_COST_OF_CAPITAL = 'SET_COST_OF_CAPITAL';\nexport type SetCostOfCapitalAction = {\n  type: 'SET_COST_OF_CAPITAL',\n  value: number,\n};\n\n// Scenarios\nexport const SET_SELECTED_CERTAINTY_ELEMENT = 'SET_SELECTED_CERTAINTY_ELEMENT';\nexport type SetSelectedCertaintyElementAction = {\n  type: 'SET_SELECTED_CERTAINTY_ELEMENT',\n  element: { id: string, name: string },\n};\nexport const SET_CERTAINTY_ELEMENT_EXPANDED = 'SET_CERTAINTY_ELEMENT_EXPANDED';\nexport type SetCertaintyElementExpandedAction = {\n  type: 'SET_CERTAINTY_ELEMENT_EXPANDED',\n  id: string,\n  expanded: boolean,\n};\n// Deprecated\nexport const UPDATE_SCENARIO = 'UPDATE_SCENARIO';\nexport type UpdateScenarioAction = {\n  type: 'UPDATE_SCENARIO',\n};\n\n// Balanced Scorecard\nexport const SET_SELECTED_STRATEGY_ITEM = 'SET_SELECTED_STRATEGY_ITEM';\nexport type SetSelectedStrategyItemAction = {\n  type: 'SET_SELECTED_STRATEGY_ITEM',\n  element: StrategyItem,\n};\nexport const SET_STRATEGY_ITEM_EXPANDED = 'SET_STRATEGY_ITEM_EXPANDED';\nexport type SetStrategyItemExpandedAction = {\n  type: 'SET_STRATEGY_ITEM_EXPANDED',\n  id: string,\n  expanded: boolean,\n};\nexport const SET_ACTIVE_SCORECARD_MONTH = 'SET_ACTIVE_SCORECARD_MONTH';\nexport type SetActiveScorecardMonthAction = {\n  type: 'SET_ACTIVE_SCORECARD_MONTH',\n  month: MonthOption,\n};\n\nexport type Action =\n  // Global\n  | ToggleDarkModeAction\n  // Authorisation\n  | SetCurrentUserAction\n  // Editor\n  | SetSelectedElementAction\n  | SetNodeExpandedAction\n  // Model Elements\n  | UpdateAtomAction\n  | DeleteAtomAction\n  | AddAtomAction\n  | UpdateMatrixAction\n  // Analysis\n  | SetSelectedGraphAction\n  | SetCostOfCapitalAction\n  // Certainty\n  | SetSelectedCertaintyElementAction\n  | SetCertaintyElementExpandedAction\n  | UpdateSensitivityAction\n  | UpdateScenarioAction\n  // Scorecard\n  | SetSelectedStrategyItemAction\n  | SetStrategyItemExpandedAction\n  | SetActiveScorecardMonthAction;\n","// @flow\nimport moment from 'moment';\n\nexport type DeleteStrategy = 'cascade' | 'null';\n\n// Model Metatypes\nexport type ModelAttributes = {\n  id: string,\n  name: string,\n  client: string,\n  author: string,\n};\n\nexport type ModelData = {\n  name: string,\n  client: string,\n  author: string,\n};\n\n// Programme Metatypes\nexport type ProgrammeAttributes = {\n  id: string,\n  name: string,\n  mission: string,\n  vision: string,\n  unitOfMeasure: string,\n  start: moment,\n  financialStart: moment,\n  scorecardStart: moment,\n};\n\nexport type ProgrammeData = {\n  name: string,\n  mission: string,\n  vision: string,\n  unitOfMeasure: string,\n  start: string,\n  financialStart: string,\n  scorecardStart: string,\n};\n\n// Benefit Instance\nexport type Benefit = {\n  +id: string,\n  +name: string,\n  +type: string,\n  +unitOfMeasure: string,\n  +definition: string,\n};\n\nexport type BenefitData = {\n  +name: string,\n  +type: string,\n  +unitOfMeasure: string,\n  +definition: string,\n};\n\n// Cost Instance\n\nexport type Cost = {\n  +id: string,\n  +name: string,\n  +type: string,\n  +definition: string,\n};\n\nexport type CostData = {\n  +name?: string,\n  +type?: string,\n  +definition?: string,\n};\n\nexport type Deliverable = {\n  +id: string,\n  +name: string,\n  +definition: string,\n};\n\nexport type DeliverableData = {\n  +name: string,\n  +definition: string,\n};\n\nexport type Phase = {\n  +id: string,\n  +name: string,\n  +duration: number,\n  +start: string,\n  +slip: string,\n};\n\nexport type PhaseData = {\n  +name: string,\n  +duration: number,\n  +start: string,\n  +slip: string,\n};\n\nexport type Stakeholder = {\n  +id: string,\n  +name: string,\n  +owner: string,\n  +budgetRef: string,\n};\n\nexport type StakeholderData = {\n  +name?: string,\n  +owner?: string,\n  +budgetRef?: string,\n};\n\nexport type Group = {\n  +id: string,\n  +name: string,\n  +definition: string,\n};\n\nexport type GroupData = {\n  +name: string,\n  +definition: string,\n};\n\nexport type Beneficiary = {\n  +id: string,\n  +name: string,\n  +owner: string,\n  +definition: string,\n};\n\nexport type BeneficiaryData = {\n  +name: string,\n  +owner: string,\n  +definition: string,\n};\n\nexport type Parameter = {\n  +id: string,\n  +name: string,\n  +unitOfMeasure: string,\n  +value: number,\n  +dynamic: boolean,\n  +change: number,\n  +changeType: string,\n  +definition: string,\n};\n\nexport type ParameterData = {\n  +name: string,\n  +unitOfMeasure: string,\n  +value: number,\n  +dynamic: boolean,\n  +change: number,\n  +changeType: string,\n  +definition: string,\n};\n\nexport type Perspective = {\n  +id: string,\n  +name: string,\n  +weighting: number,\n  +definition: string,\n};\n\nexport type PerspectiveData = {\n  +name: string,\n  +weighting: number,\n  +definition: string,\n};\n\nexport type Objective = {\n  +id: string,\n  +name: string,\n  +weighting: number,\n  +perspectiveId: string,\n  +owner: string,\n  +definition: string,\n};\n\nexport type ObjectiveData = {\n  +name?: string,\n  +weighting?: number,\n  +perspectiveId?: string,\n  +owner?: string,\n  +definition?: string,\n};\n\nexport type Measure = {\n  +id: string,\n  +name: string,\n  +objectiveId: string,\n  +weighting: number,\n  +dataOwner: string,\n  +unitOfMeasure: string,\n  +change: number,\n  +baselineStart: string,\n  +baselineComplete: string,\n  +baselineValue: number,\n  +best: number,\n  +worst: number,\n  +standard: number,\n  +minimumStandard: number,\n  +definition: string,\n};\n\nexport type MeasureData = {\n  +name?: string,\n  +objectiveId?: string,\n  +weighting?: number,\n  +dataOwner?: string,\n  +unitOfMeasure?: string,\n  +baselineValue?: number,\n  +change?: number,\n  +baselineStart?: string,\n  +baselineComplete?: string,\n  +best?: number,\n  +worst?: number,\n  +standard?: number,\n  +minimumStandard?: number,\n  +definition?: string,\n};\n\nexport type Theme = {\n  +id: string,\n  +name: string,\n  +measures: Array<string>,\n};\n\nexport type ThemeData = {\n  +id?: string,\n  +name?: string,\n  +measures?: Array<string>,\n};\n\nexport type Thread = {\n  +id: string,\n  +reference: string,\n  +groupId: string,\n  +deliverableId: string,\n  +cause: string,\n  +measureId: string,\n  +stakeholderId: string,\n  +benefitId: string,\n  +beneficiaryId: string,\n  +equation: string,\n  +effect: string,\n};\n\nexport type ThreadData = {\n  +id?: string,\n  +reference?: string,\n  +groupId?: string,\n  +deliverableId?: string,\n  +cause?: string,\n  +measureId?: string,\n  +stakeholderId?: string,\n  +benefitId?: string,\n  +beneficiaryId?: string,\n  +equation?: string,\n  +effect?: string,\n};\n\nexport type BenefitBuildup = {\n  +[string]: {\n    +[string]: number,\n  },\n};\n\nexport type BenefitAttribution = {\n  +[string]: {\n    +[string]: {\n      +[string]: number,\n    },\n  },\n};\n\nexport type CostAttribution = {\n  +[string]: {\n    +[string]: number,\n  },\n};\n\nexport type StakeholderBenefits = {\n  +[string]: {\n    +[string]: number,\n  },\n};\n\nexport type PhaseLink = {\n  id: number,\n  type: 'START_TO_START' | 'START_TO_FINISH' | 'FINISH_TO_START' | 'FINISH_TO_FINISH',\n  sourceId: string,\n  targetId: string,\n};\n\nexport type BenefitSensitivity = Array<{ id: string, switch: boolean, sensitivity: number }>;\n\nexport type PhaseSensitivity = Array<{\n  id: string,\n  switch: boolean,\n  start: string,\n  duration: number,\n}>;\n\nexport type PhaseSensitivityData = Array<{\n  id: string,\n  switch: boolean,\n  start: string,\n  duration: number,\n}>;\n\nexport type DeliverableSensitivity = Array<{ id: string, switch: boolean }>;\n\nexport type PhaseCostSensitivity = {\n  DEVELOPMENT_COST: { [string]: number },\n  SUPPORT_COST: { [string]: number },\n};\n\nexport type BenefitBuildupSensitivity = { [string]: { [string]: number } };\n\nexport type Scenario = {\n  +id: string,\n  +name: string,\n  +definition: string,\n  +benefitBuildupSensitivity: BenefitBuildupSensitivity,\n  +phaseCostSensitivity: PhaseCostSensitivity,\n  +deliverableSensitivity: DeliverableSensitivity,\n  +benefitSensitivity: BenefitSensitivity,\n  +phaseSensitivity: PhaseSensitivity,\n};\n\nexport type ScenarioAttributes = {\n  +id: string,\n  +name: string,\n  +definition: string,\n};\n\nexport type ScenarioData = {\n  +name: string,\n  +definition: string,\n};\n\nexport type ThreadValue = {\n  id: string,\n  values: Array<number>,\n};\n\nexport type ScorecardEntry = {\n  id: string,\n  value: number,\n};\n\nexport type ScorecardItem = {\n  date: string,\n  values: Array<ScorecardEntry>,\n};\n\nexport type Programme = {\n  +id: string,\n  +name: string,\n  +mission: string,\n  +vision: string,\n  +start: string,\n  +financialStart: string,\n  +scorecardStart: string,\n  +unitOfMeasure: string,\n  +benefits: Array<Benefit>,\n  +costs: Array<Cost>,\n  +deliverables: Array<Deliverable>,\n  +phases: Array<Phase>,\n  +stakeholders: Array<Stakeholder>,\n  +groups: Array<Group>,\n  +beneficiaries: Array<Beneficiary>,\n  +parameters: Array<Parameter>,\n  +perspectives: Array<Perspective>,\n  +objectives: Array<Objective>,\n  +measures: Array<Measure>,\n  +themes: Array<Theme>,\n  +causeAndEffect: Array<Thread>,\n  +benefitBuildup: BenefitBuildup,\n  +benefitAttribution: BenefitAttribution,\n  +costAttribution: CostAttribution,\n  +stakeholderBenefits: StakeholderBenefits,\n  +phaseLinks: Array<PhaseLink>,\n  +scenarios: Array<Scenario>,\n  +balancedScorecard: Array<ScorecardItem>,\n  +_coreBenefits: Array<string>,\n  +_baselineScenario: string,\n  +_threadValues: Array<ThreadValue>,\n};\n\nexport type ScorecardResult = {\n  root: Array<number>,\n  perspective: { [string]: Array<number> },\n  objective: { [string]: Array<number> },\n  measure: { [string]: Array<number> },\n};\n\nexport type Results = {\n  dcf: { [string]: Array<number> },\n  vfm: { [string]: Array<number> },\n  benefitSchedule: { [string]: Array<number> },\n  costSchedule: { [string]: Array<number> },\n  benefitVsPhases: { [string]: { [string]: { [string]: number } } },\n  benefitVsDeliverables: { [string]: { [string]: { [string]: number } } },\n  benefitVsMeasures: { [string]: { [string]: { [string]: number } } },\n  benefitVsGroups: { [string]: { [string]: { [string]: number } } },\n  benefitVsStakeholders: { [string]: { [string]: { [string]: number } } },\n  deliverableVsStakeholders: { [string]: { [string]: { [string]: number } } },\n  deliverableVsMeasures: { [string]: { [string]: { [string]: number } } },\n  stakeholderVsGroups: { [string]: { [string]: { [string]: number } } },\n  scorecard: ScorecardResult,\n};\n\nexport type ModelElement = {\n  +id: string,\n};\n\nexport type NamedElement = {\n  +id: string,\n  +name: string,\n};\n\nexport type Model = {\n  +id: string,\n  +name: string,\n  +client: string,\n  +author: string,\n  +programmes: Array<Programme>,\n  +results: Results,\n  +_analysisYears: number,\n};\n","// @flow\n\nimport { Position, Toaster } from '@blueprintjs/core';\n\n/**\n * Create a singleton for app Toaster\n * @type {Toaster}\n */\nexport const AppToaster = Toaster.create({\n  position: Position.TOP,\n});\n","// @flow\nimport React, { Component, Suspense, lazy } from 'react';\n\n// React Router\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// React Redux\nimport { connect } from 'react-redux';\n\n// Import validate authorisation action\nimport { validate } from './actions/auth';\n\n// Import route components\nimport AuthorisedRoute from './routes/AuthorisedRoute';\nimport UnauthorisedRoute from './routes/UnauthorisedRoute';\n\n// Import loading component\nimport Loading from './components/Loading';\nimport Home from './views/Home';\n\n// Use App CSS file\nimport './App.css';\n\n// Flow types\nimport * as types from './types';\nimport { type State } from './reducers/types';\nimport { type Dispatch } from './actions/types';\n\n// Lazily import AppView and Login, to prevent code reaching browser without auth\nconst Login = lazy(() => import('./views/Login'));\nconst AppView = lazy(() => import('./views/AppView'));\n\nexport class App extends Component<types.AppProps> {\n  componentDidMount() {\n    // If we believe we are authenticated, validate credentials\n    if (this.props.isAuthenticated) {\n      this.props.validate();\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {/* We have lazily loaded components, so show Loading whilst user waits */}\n          <Suspense fallback={<Loading text=\"Initialising Application...\" />}>\n            <AppView />\n          </Suspense>\n        </div>\n      </Router>\n    );\n  }\n}\n\n// Redux Mappings\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  validate,\n});\n\n// Export connected component\n// Passes validate function through map dispatch to props\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { DCF_GRAPH } from '../config/constants';\nimport { SET_SELECTED_GRAPH, SET_COST_OF_CAPITAL } from '../actions/types';\n\nconst initialState = {\n  selected: DCF_GRAPH,\n  costOfCapital: 0.1,\n};\n\nexport default (state = initialState, action = {}) => {\n  switch (action.type) {\n    case SET_SELECTED_GRAPH:\n      return {\n        ...state,\n        selected: action.graph,\n      };\n    case SET_COST_OF_CAPITAL:\n      return {\n        ...state,\n        costOfCapital: action.value,\n      };\n    default:\n      return state;\n  }\n};\n","import { SET_CURRENT_USER } from '../actions/types';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n};\n\nexport default (state = initialState, action = {}) => {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        isAuthenticated: Object.keys(action.user).length !== 0,\n        user: action.user,\n      };\n    default:\n      return state;\n  }\n};\n","// @flow\nimport { SET_SELECTED_CERTAINTY_ELEMENT, SET_CERTAINTY_ELEMENT_EXPANDED } from '../actions/types';\nimport type { Action } from '../actions/types';\nimport type { CertaintyState } from './types';\n\nconst initialState: CertaintyState = {\n  explorer: {\n    selected: undefined,\n    expanded: {\n      BASELINE_SCENARIO: true,\n    },\n  },\n  dark: false,\n};\n\nexport default (state: CertaintyState = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_CERTAINTY_ELEMENT_EXPANDED:\n      return {\n        ...state,\n        explorer: {\n          ...state.explorer,\n          expanded: {\n            ...state.explorer.expanded,\n            [action.id]: action.expanded,\n          },\n        },\n      };\n    case SET_SELECTED_CERTAINTY_ELEMENT:\n      return {\n        ...state,\n        explorer: {\n          ...state.explorer,\n          selected: action.element,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import { SET_SELECTED_ELEMENT, SET_NODE_EXPANDED, TOGGLE_DARK_MODE } from '../actions/types';\n\nconst initialState = {\n  explorer: {\n    selected: undefined,\n    expanded: {},\n  },\n  benefitAttribution: {\n    selectedBenefit: undefined,\n  },\n  dark: false,\n};\n\nexport default (state = initialState, action = {}) => {\n  switch (action.type) {\n    case SET_NODE_EXPANDED:\n      return {\n        ...state,\n        explorer: {\n          ...state.explorer,\n          expanded: {\n            ...state.explorer.expanded,\n            [action.id]: action.expanded,\n          },\n        },\n      };\n    case SET_SELECTED_ELEMENT:\n      return {\n        ...state,\n        explorer: {\n          ...state.explorer,\n          selected: {\n            ...action.element,\n          },\n        },\n      };\n    case TOGGLE_DARK_MODE:\n      return {\n        ...state,\n        dark: !state.dark,\n      };\n    case 'SET_SELECTED_BENEFIT_ATTRIBUTION':\n      return {\n        ...state,\n        benefitAttribution: {\n          selectedBenefit: action.value,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","// @flow\n// Schema validator\nimport Ajv from 'ajv';\n\n// Model schema\nimport SCHEMA from '../../schema/model.schema.json';\n\n// Flow types\nimport { type Model } from '../types';\n\n// Initialise schema validator\nconst ajv = new Ajv({ allErrors: true });\nconst validate = ajv.compile(SCHEMA);\n\nfunction isValid(model: Model): { valid: boolean, errors: Array<Object> } {\n  // Validate provided model\n  const valid = validate(model);\n  const errors = Array.isArray(validate.errors) ? validate.errors : [];\n  return { valid, errors };\n}\n\nexport default isValid;\n","// @flow\n// Date Time Libray\nimport moment from 'moment';\n\n// Constants\nimport { COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT, DATE_FORMAT } from '../../../config/constants';\n\n// Flow Types\nimport { type Model } from '../types';\n\ntype ValidObject = {\n  valid: boolean,\n  errors: Array<string>,\n};\n\nfunction hasDuplicates(array: Array<string>) {\n  return new Set(array).size !== array.length;\n}\n\nfunction checkForDuplicateNames(\n  elements: Array<{ +id: string, +name: string, +[string]: any }>\n): Array<{ id: string, name: string }> {\n  const result = elements.reduce(\n    (accumulator, element) => {\n      if (accumulator.seenNames.includes(element.name)) {\n        accumulator.duplicates.push({ id: element.id, name: element.name });\n      } else {\n        accumulator.seenNames.push(element.name);\n      }\n\n      return accumulator;\n    },\n    { seenNames: [], duplicates: [] }\n  );\n\n  return result.duplicates;\n}\n\nfunction returnNewValidObjectForDuplicates(\n  valid: ValidObject,\n  duplicates: Array<{ id: string, name: string }>,\n  elementName: string\n): ValidObject {\n  // Add error on duplicates\n  if (duplicates.length > 0) {\n    duplicates.forEach(({ id, name }) => {\n      // Set validity to false\n      valid.valid = false;\n\n      const errorMsg = `more than one ${elementName} named ${name} exists`;\n      if (!valid.errors.includes(errorMsg)) {\n        valid.errors.push(errorMsg);\n      }\n    });\n  }\n\n  return valid;\n}\n\nfunction checkElementsHaveUniqueNames(model: Model): ValidObject {\n  // Define new validity object\n  let valid = { valid: true, errors: [] };\n\n  // Extract elements from model instance\n  const {\n    benefits,\n    costs,\n    deliverables,\n    phases,\n    stakeholders,\n    measures,\n    objectives,\n    perspectives,\n    groups,\n    beneficiaries,\n    parameters,\n  } = model.programmes[0];\n\n  // Check for duplicate names\n  const duplicateBenefits = checkForDuplicateNames(benefits);\n  const duplicateCosts = checkForDuplicateNames(costs);\n  const duplicateDeliverables = checkForDuplicateNames(deliverables);\n  const duplicatePhases = checkForDuplicateNames(phases);\n  const duplicateStakeholders = checkForDuplicateNames(stakeholders);\n  const duplicateMeasures = checkForDuplicateNames(measures);\n  const duplicateObjectives = checkForDuplicateNames(objectives);\n  const duplicatePerspectives = checkForDuplicateNames(perspectives);\n  const duplicateGroups = checkForDuplicateNames(groups);\n  const duplicateBeneficiaries = checkForDuplicateNames(beneficiaries);\n  const duplicateParameters = checkForDuplicateNames(parameters);\n\n  valid = returnNewValidObjectForDuplicates(valid, duplicateBenefits, 'benefit');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateCosts, 'cost');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateDeliverables, 'deliverable');\n  valid = returnNewValidObjectForDuplicates(valid, duplicatePhases, 'phase');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateStakeholders, 'stakeholder');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateMeasures, 'measure');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateObjectives, 'objective');\n  valid = returnNewValidObjectForDuplicates(valid, duplicatePerspectives, 'perspective');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateGroups, 'group');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateBeneficiaries, 'beneficiary');\n  valid = returnNewValidObjectForDuplicates(valid, duplicateParameters, 'parameter');\n\n  return valid;\n}\n\nfunction checkIdIsDuplicate(currentIds: Array<string>, newId: string, valid: ValidObject) {\n  if (currentIds.includes(newId)) {\n    valid.valid = false;\n    const error = `detected duplicate id ${newId}`;\n    if (!valid.errors.includes(error)) {\n      valid.errors.push(error);\n    }\n    return false;\n  } else {\n    currentIds.push(newId);\n  }\n}\n\nfunction checkForDuplicateIds(model: Model): ValidObject {\n  const valid = { valid: true, errors: [] };\n  const ids = [];\n\n  checkIdIsDuplicate(ids, model.id, valid);\n  checkIdIsDuplicate(ids, model.programmes[0].id, valid);\n\n  // Extract all elements from model instance\n  const {\n    benefits,\n    costs,\n    deliverables,\n    phases,\n    stakeholders,\n    measures,\n    objectives,\n    perspectives,\n    groups,\n    beneficiaries,\n    parameters,\n    causeAndEffect,\n  } = model.programmes[0];\n\n  benefits.forEach(benefit => checkIdIsDuplicate(ids, benefit.id, valid));\n  costs.forEach(cost => checkIdIsDuplicate(ids, cost.id, valid));\n  deliverables.forEach(deliverable => checkIdIsDuplicate(ids, deliverable.id, valid));\n  phases.forEach(phase => checkIdIsDuplicate(ids, phase.id, valid));\n  stakeholders.forEach(stakeholder => checkIdIsDuplicate(ids, stakeholder.id, valid));\n  measures.forEach(measure => checkIdIsDuplicate(ids, measure.id, valid));\n  objectives.forEach(objective => checkIdIsDuplicate(ids, objective.id, valid));\n  perspectives.forEach(perspective => checkIdIsDuplicate(ids, perspective.id, valid));\n  groups.forEach(group => checkIdIsDuplicate(ids, group.id, valid));\n  beneficiaries.forEach(beneficiary => checkIdIsDuplicate(ids, beneficiary.id, valid));\n  parameters.forEach(parameter => checkIdIsDuplicate(ids, parameter.id, valid));\n  causeAndEffect.forEach(causeAndEffec => checkIdIsDuplicate(ids, causeAndEffec.id, valid));\n\n  return valid;\n}\n\nfunction checkAllThreadsHaveUniqueReferences(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract core benefits and benefits from model instance\n  const { causeAndEffect } = model.programmes[0];\n\n  // Map references\n  const references = causeAndEffect.map(thread => thread.reference);\n\n  // Check for duplicates\n  if (hasDuplicates(references)) {\n    valid.valid = false;\n    valid.errors.push('threads contain duplicate references');\n  }\n\n  return valid;\n}\n\nfunction checkProgrammeDates(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract core benefits and benefits from model instance\n  const { start, financialStart, scorecardStart } = model.programmes[0];\n\n  // Create moments from dates\n  const programmeStart = moment(start, DATE_FORMAT, true);\n  const financialStartMoment = moment(financialStart, DATE_FORMAT, true);\n  const scorecardStartMoment = moment(scorecardStart, DATE_FORMAT, true);\n\n  // Check programme start is after both financial and scorecard starts\n  if (programmeStart.isBefore(financialStartMoment)) {\n    valid.valid = false;\n    valid.errors.push('programme starts before financial start');\n  }\n\n  if (programmeStart.isBefore(scorecardStartMoment)) {\n    valid.valid = false;\n    valid.errors.push('programme starts before scorecard start');\n  }\n\n  return valid;\n}\n\nfunction getBenefitName(index: number) {\n  switch (index) {\n    case 0:\n      return 'revenue';\n    case 1:\n      return 'costbase';\n    case 2:\n      return 'margin';\n    default:\n      throw new Error('Invalid core benefit index');\n  }\n}\n\nfunction checkCoreBenefits(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract core benefits and benefits from model instance\n  const { _coreBenefits: coreBenefits, benefits, unitOfMeasure } = model.programmes[0];\n\n  // Check 3 core benefits defined\n  if (coreBenefits.length !== 3) {\n    valid.valid = false;\n    valid.errors.push('there should be exactly 3 core benefits');\n  }\n\n  // Check all defined core benefit ids exist\n  coreBenefits.forEach((coreBenefitId, index) => {\n    if (index > 2) return;\n\n    const found = benefits.find(benefit => benefit.id === coreBenefitId);\n\n    if (!found) {\n      valid.valid = false;\n      valid.errors.push(`core benefit ${getBenefitName(index)} did not exist`);\n    }\n  });\n\n  // Only check units if core benefits are properly defined\n  if (valid.valid) {\n    // Retrieve core benefits\n    const revenueBenefit = benefits.find(benefit => benefit.id === coreBenefits[0]);\n    const costbaseBenefit = benefits.find(benefit => benefit.id === coreBenefits[1]);\n    const marginBenefit = benefits.find(benefit => benefit.id === coreBenefits[2]);\n\n    // Check revenue and costbase benefits have same units as programme\n    if (revenueBenefit && revenueBenefit.unitOfMeasure !== unitOfMeasure) {\n      valid.valid = false;\n      valid.errors.push('revenue benefit did not have programme unit of measure');\n    }\n    if (costbaseBenefit && costbaseBenefit.unitOfMeasure !== unitOfMeasure) {\n      valid.valid = false;\n      valid.errors.push('costbase benefit did not have programme unit of measure');\n    }\n\n    // Check margin benefit has % unit of measure\n    if (marginBenefit && marginBenefit.unitOfMeasure !== '%') {\n      valid.valid = false;\n      valid.errors.push(\"margin benefit did not have '%' as unit of measure\");\n    }\n  }\n\n  return valid;\n}\n\nfunction checkBaselineScenario(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract baseline scenario and scenarios from model instance\n  const { _baselineScenario: baseline, scenarios } = model.programmes[0];\n\n  // Check baseline scenario id exists\n  const found = scenarios.find(scenario => scenario.id === baseline);\n\n  if (!found) {\n    valid.valid = false;\n    valid.errors.push('baseline scenario did not exist');\n  }\n\n  return valid;\n}\n\nfunction checkMatricesHaveCorrectBenefitKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits and matrices from model instance\n  const { benefits, benefitAttribution, benefitBuildup, stakeholderBenefits } = model.programmes[0];\n\n  // Check each matrix has key for benefit\n  benefits.forEach(benefit => {\n    // Benefit Attribution\n    if (!benefitAttribution[benefit.id]) {\n      valid.valid = false;\n\n      const error = `${benefit.name} does not have a key in benefit attribution`;\n      if (!valid.errors.includes(error)) {\n        valid.errors.push(error);\n      }\n    }\n\n    // Benefit Buildup\n    if (!benefitBuildup[benefit.id]) {\n      valid.valid = false;\n\n      const error = `${benefit.name} does not have a key in benefit buildup`;\n      if (!valid.errors.includes(error)) {\n        valid.errors.push(error);\n      }\n    }\n\n    // Stakeholder Benefits\n    if (!stakeholderBenefits[benefit.id]) {\n      valid.valid = false;\n\n      const error = `${benefit.name} does not have a key in stakeholder benefits`;\n      if (!valid.errors.includes(error)) {\n        valid.errors.push(error);\n      }\n    }\n  });\n\n  return valid;\n}\n\nfunction checkMatricesHaveCorrectDeliverableKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits, deliverables and matrices from model instance\n  const { benefits, deliverables, benefitAttribution } = model.programmes[0];\n\n  // Check benefit attribution has key for deliverable\n  benefits.forEach(benefit => {\n    deliverables.forEach(deliverable => {\n      if (!benefitAttribution[benefit.id]) return;\n\n      // Benefit Attribution\n      if (!benefitAttribution[benefit.id][deliverable.id]) {\n        valid.valid = false;\n\n        const error = `${deliverable.name} does not have a key in benefit attribution`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkMatricesHaveCorrectStakeholderKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits, deliverables and matrices from model instance\n  const { benefits, stakeholders, stakeholderBenefits } = model.programmes[0];\n\n  // Check benefit attribution has key for deliverable\n  benefits.forEach(benefit => {\n    stakeholders.forEach(stakeholder => {\n      if (!stakeholderBenefits[benefit.id]) return;\n\n      // Stakeholder Benefits\n      const datum = stakeholderBenefits[benefit.id][stakeholder.id];\n      if (datum !== 0 && !datum) {\n        valid.valid = false;\n\n        const error = `${stakeholder.name} does not have a key in stakeholder benefits`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkMatricesHaveCorrectCostKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits, deliverables and matrices from model instance\n  const { costs, costAttribution } = model.programmes[0];\n\n  // Check benefit attribution has key for deliverable\n  costs.forEach(cost => {\n    // Cost Attribution\n    if (!costAttribution[cost.id]) {\n      valid.valid = false;\n\n      const error = `${cost.name} does not have a key in cost attribution`;\n      if (!valid.errors.includes(error)) {\n        valid.errors.push(error);\n      }\n    }\n  });\n\n  return valid;\n}\n\nfunction checkMatricesHaveCorrectPhaseKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits, deliverables, costs, phases, and matrices from model instance\n  const {\n    benefits,\n    deliverables,\n    costs,\n    phases,\n    benefitAttribution,\n    benefitBuildup,\n    costAttribution,\n  } = model.programmes[0];\n\n  // Benefit Attribution and Buildup\n  benefits.forEach(benefit => {\n    // Benefit Attribution\n\n    deliverables.forEach(deliverable => {\n      phases.forEach(phase => {\n        if (!benefitAttribution[benefit.id]) return;\n        if (!benefitAttribution[benefit.id][deliverable.id]) return;\n\n        const datum = benefitAttribution[benefit.id][deliverable.id][phase.id];\n        if (datum !== 0 && !datum) {\n          valid.valid = false;\n\n          const error = `${phase.name} does not have a key in benefit attribution`;\n          if (!valid.errors.includes(error)) {\n            valid.errors.push(error);\n          }\n        }\n      });\n    });\n\n    // Benefit Buildup\n    phases.forEach(phase => {\n      if (!benefitBuildup[benefit.id]) return;\n\n      const datum = benefitBuildup[benefit.id][phase.id];\n      if (datum !== 0 && !datum) {\n        valid.valid = false;\n\n        const error = `${phase.name} does not have a key in benefit buildup`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n    });\n  });\n\n  // Cost Attribution\n  costs.forEach(cost => {\n    phases.forEach(phase => {\n      if (!costAttribution[cost.id]) return;\n\n      const datum = costAttribution[cost.id][phase.id];\n      if (datum !== 0 && !datum) {\n        valid.valid = false;\n\n        const error = `${phase.name} does not have a key in cost attribution`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkObjectivesReferenceValidPerspectives(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract perspectives and objectives from model instance\n  const { perspectives, objectives } = model.programmes[0];\n\n  // Check all objectives are sound\n  objectives.forEach(objective => {\n    if (objective.perspectiveId === 'none') return;\n\n    const found = perspectives.find(perspective => perspective.id === objective.perspectiveId);\n\n    if (!found) {\n      valid.valid = false;\n      valid.errors.push(`${objective.name} referenced a perspective which did not exist`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkMeasuresReferenceValidObjectives(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract objectives and measures from model instance\n  const { measures, objectives } = model.programmes[0];\n\n  // Check all measures are sound\n  measures.forEach(measure => {\n    if (measure.objectiveId === 'none') return;\n\n    const found = objectives.find(objective => objective.id === measure.objectiveId);\n\n    if (!found) {\n      valid.valid = false;\n      valid.errors.push(`${measure.name} referenced an objective which did not exist`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkPhaseLinksReferenceValidPhases(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract objectives and measures from model instance\n  const { phases, phaseLinks } = model.programmes[0];\n\n  // Check all measures are sound\n  phaseLinks.forEach(phaseLink => {\n    if (phaseLink.sourceId === phaseLink.targetId) {\n      valid.valid = false;\n      valid.errors.push(`Phase link (${phaseLink.id}) is a circular reference`);\n    }\n\n    // Find referenced phases\n    const foundTarget = phases.find(phase => phase.id === phaseLink.targetId);\n    const foundSource = phases.find(phase => phase.id === phaseLink.targetId);\n\n    // Check target\n    if (!foundTarget) {\n      valid.valid = false;\n      valid.errors.push(`Phase link (${phaseLink.id}) target phase does not exist`);\n    }\n\n    // Check source\n    if (!foundSource) {\n      valid.valid = false;\n      valid.errors.push(`Phase link (${phaseLink.id}) source phase does not exist`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkPhaseSensitivitiesReferenceValidPhases(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract phases and scenarios from model instance\n  const { phases, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { phaseSensitivity } = scenario;\n\n    phaseSensitivity.forEach(phaseSensitivity => {\n      // Find referenced phase\n      const found = phases.find(phase => phase.id === phaseSensitivity.id);\n\n      // Check phase exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(\n          `Phase sensitivity in ${scenario.name} references phase which does not exist`\n        );\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkPhaseSensitivitiesContainAllPhases(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract phases and scenarios from model instance\n  const { phases, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { phaseSensitivity } = scenario;\n\n    phases.forEach(phase => {\n      // Find referenced phase\n      const found = phaseSensitivity.find(phaseSensitivity => phaseSensitivity.id === phase.id);\n\n      // Check phase exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(`Phase sensitivity for ${phase.name} missing in ${scenario.name}`);\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkBenefitSensitivitiesReferenceValidBenefits(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits and scenarios from model instance\n  const { benefits, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { benefitSensitivity } = scenario;\n\n    benefitSensitivity.forEach(benefitSensitivity => {\n      // Find referenced benefit\n      const found = benefits.find(benefit => benefit.id === benefitSensitivity.id);\n\n      // Check benefit exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(\n          `Benefit sensitivity in ${scenario.name} references benefit which does not exist`\n        );\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkBenefitSensitivitiesContainAllBenefits(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits and scenarios from model instance\n  const { benefits, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { benefitSensitivity } = scenario;\n\n    benefits.forEach(benefit => {\n      // Find referenced benefit\n      const found = benefitSensitivity.find(\n        benefitSensitivity => benefitSensitivity.id === benefit.id\n      );\n\n      // Check benefit exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(`Benefit sensitivity for ${benefit.name} missing in ${scenario.name}`);\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkDeliverableSensitivitiesReferenceValidDeliverables(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract deliverables and scenarios from model instance\n  const { deliverables, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { deliverableSensitivity } = scenario;\n\n    deliverableSensitivity.forEach(deliverableSensitivity => {\n      // Find referenced deliverable\n      const found = deliverables.find(deliverable => deliverable.id === deliverableSensitivity.id);\n\n      // Check deliverable exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(\n          `Deliverable sensitivity in ${scenario.name} references deliverable which does not exist`\n        );\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkDeliverableSensitivitiesContainAllDeliverables(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract deliverables and scenarios from model instance\n  const { deliverables, scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    const { deliverableSensitivity } = scenario;\n\n    deliverables.forEach(deliverable => {\n      // Find referenced deliverable\n      const found = deliverableSensitivity.find(\n        deliverableSensitivity => deliverableSensitivity.id === deliverable.id\n      );\n\n      // Check deliverable exists\n      if (!found) {\n        valid.valid = false;\n        valid.errors.push(\n          `Deliverable sensitivity for ${deliverable.name} missing in ${scenario.name}`\n        );\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkPhaseCostSensitivitiesContainPhaseKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract phases and scenarios from model instance\n  const { phases, scenarios } = model.programmes[0];\n\n  // Store cost types\n  const costTypes = [COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT];\n\n  // Check scenarios are sound\n  scenarios.forEach(scenario => {\n    costTypes.forEach(costType => {\n      phases.forEach(phase => {\n        const { phaseCostSensitivity } = scenario;\n\n        const datum = phaseCostSensitivity[costType][phase.id];\n        if (datum !== 0 && !datum) {\n          valid.valid = false;\n\n          const error = `${phase.name} does not have a key in the ${\n            scenario.name\n          } phase cost sensitivity`;\n          if (!valid.errors.includes(error)) {\n            valid.errors.push(error);\n          }\n        }\n      });\n    });\n  });\n\n  return valid;\n}\n\nfunction checkBenefitBuildupSensitivitiesContainBenefitKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits and scenarios from model instance\n  const { benefits, scenarios } = model.programmes[0];\n\n  // Check scenarios are sound\n  scenarios.forEach(scenario => {\n    benefits.forEach(benefit => {\n      const { benefitBuildupSensitivity } = scenario;\n\n      if (!benefitBuildupSensitivity[benefit.id]) {\n        valid.valid = false;\n\n        const error = `${benefit.name} does not have a key in the ${\n          scenario.name\n        } benefit buildup sensitivity`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkBenefitBuildupSensitivitiesContainPhaseKeys(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefits, phases and scenarios from model instance\n  const { benefits, phases, scenarios } = model.programmes[0];\n\n  // Check scenarios are sound\n  scenarios.forEach(scenario => {\n    benefits.forEach(benefit => {\n      phases.forEach(phase => {\n        const { benefitBuildupSensitivity } = scenario;\n\n        if (!benefitBuildupSensitivity[benefit.id]) return;\n\n        const datum = benefitBuildupSensitivity[benefit.id][phase.id];\n        if (datum !== 0 && !datum) {\n          valid.valid = false;\n\n          const error = `${phase.name} does not have a key in the ${\n            scenario.name\n          } benefit buildup sensitivity`;\n          if (!valid.errors.includes(error)) {\n            valid.errors.push(error);\n          }\n        }\n      });\n    });\n  });\n\n  return valid;\n}\n\nfunction checkThreadsReferenceValidElements(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract threads and elements from model instance\n  const {\n    benefits,\n    deliverables,\n    stakeholders,\n    measures,\n    groups,\n    beneficiaries,\n    causeAndEffect,\n  } = model.programmes[0];\n\n  causeAndEffect.forEach(thread => {\n    // Check benefit exists\n    const foundBenefit = benefits.find(benefit => benefit.id === thread.benefitId);\n    if (!foundBenefit) {\n      valid.valid = false;\n      valid.errors.push(\n        `thread ${thread.reference} references benefit (${thread.benefitId}) which does not exist`\n      );\n    }\n\n    // Check deliverable exists\n    const foundDeliverable = deliverables.find(\n      deliverable => deliverable.id === thread.deliverableId\n    );\n    if (!foundDeliverable) {\n      valid.valid = false;\n      valid.errors.push(\n        `thread ${thread.reference} references deliverable (${\n          thread.deliverableId\n        }) which does not exist`\n      );\n    }\n\n    // Check stakeholder exists\n    const foundStakeholder = stakeholders.find(\n      stakeholder => stakeholder.id === thread.stakeholderId\n    );\n    if (!foundStakeholder) {\n      valid.valid = false;\n      valid.errors.push(\n        `thread ${thread.reference} references stakeholder (${\n          thread.stakeholderId\n        }) which does not exist`\n      );\n    }\n\n    // Check measure exists\n    if (thread.measureId !== 'none') {\n      const foundMeasure = measures.find(measure => measure.id === thread.measureId);\n      if (!foundMeasure) {\n        valid.valid = false;\n        valid.errors.push(\n          `thread ${thread.reference} references measure (${thread.measureId}) which does not exist`\n        );\n      }\n    }\n\n    // Check group exists\n    if (thread.groupId !== 'none') {\n      const foundGroup = groups.find(group => group.id === thread.groupId);\n      if (!foundGroup) {\n        valid.valid = false;\n        valid.errors.push(\n          `thread ${thread.reference} references group (${thread.groupId}) which does not exist`\n        );\n      }\n    }\n\n    // Check beneficiary exists\n    if (thread.beneficiaryId !== 'none') {\n      const foundBeneficiary = beneficiaries.find(\n        beneficiary => beneficiary.id === thread.beneficiaryId\n      );\n      if (!foundBeneficiary) {\n        valid.valid = false;\n        valid.errors.push(\n          `thread ${thread.reference} references beneficiary (${\n            thread.beneficiaryId\n          }) which does not exist`\n        );\n      }\n    }\n  });\n\n  return valid;\n}\n\nfunction checkMeasureData(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract measures and scorecard start from model instance\n  const { measures, scorecardStart: start } = model.programmes[0];\n\n  measures.forEach(measure => {\n    // Create moment from scorecard start\n    const scorecardStart = moment(start, DATE_FORMAT, true);\n\n    // Check baseline start occurs on or after scorecard start\n    const baselineStart = moment(measure.baselineStart, DATE_FORMAT, true);\n    if (baselineStart.isBefore(scorecardStart, 'days')) {\n      valid.valid = false;\n      valid.errors.push(`${measure.name} baseline start occurs before scorecard start`);\n    }\n\n    // Check baseline complete occurs after baseline start\n    const baselineComplete = moment(measure.baselineComplete, DATE_FORMAT, true);\n    if (baselineComplete.isSameOrBefore(baselineStart, 'days')) {\n      valid.valid = false;\n      valid.errors.push(`${measure.name} baseline complete occurs on or before baseline start`);\n    }\n\n    // Determine upper, lower bound and direction of travel\n    let upper, lower, direction;\n\n    // Compare best and worst values\n    if (measure.best === measure.worst && measure.best !== 0) {\n      valid.valid = false;\n      valid.errors.push(`${measure.name} best and worst values were the same`);\n      return;\n    } else if (measure.best > measure.worst) {\n      upper = measure.best;\n      lower = measure.worst;\n      direction = 'INCREASE';\n    } else if (measure.best < measure.worst) {\n      upper = measure.worst;\n      lower = measure.best;\n      direction = 'DECREASE';\n    } else {\n      upper = measure.best;\n      lower = measure.worst;\n      direction = 'ZERO';\n    }\n\n    // Check values exist within boundaries\n    const { baselineValue, standard, minimumStandard, change } = measure;\n\n    // Check baseline value\n    if (direction !== 'ZERO') {\n      if (baselineValue > upper) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} baseline value was greater than the upper bound`);\n      } else if (baselineValue < lower) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} baseline value was smaller than the lower bound`);\n      }\n\n      // Check standard\n      if (standard > upper) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} standard value was greater than the upper bound`);\n      } else if (standard < lower) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} standard value was smaller than the lower bound`);\n      }\n\n      // Check minimum standard\n      if (minimumStandard > upper) {\n        valid.valid = false;\n        valid.errors.push(\n          `${measure.name} minimum standard value was greater than the upper bound`\n        );\n      } else if (minimumStandard < lower) {\n        valid.valid = false;\n        valid.errors.push(\n          `${measure.name} minimum standard value was smaller than the lower bound`\n        );\n      }\n    }\n\n    // Check standard, minimum standard and change respect best and worst direction\n    if (direction === 'INCREASE') {\n      // Check change value\n      if (change < 0) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name}'s best was greater than worst but change was negative`);\n      }\n\n      // Check minimum standard is lower than standard\n      if (minimumStandard > standard) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} minimum standard was above standard`);\n      }\n    } else if (direction === 'DECREASE') {\n      // Check change value\n      if (change > 0) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name}'s best was smaller than worst but change was positive`);\n      }\n\n      // Check minimum standard is greater than standard\n      if (minimumStandard < standard) {\n        valid.valid = false;\n        valid.errors.push(`${measure.name} minimum standard was below standard`);\n      }\n    }\n  });\n\n  return valid;\n}\n\nfunction checkStrategyMapWeightings(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract measures, objectives, and perspectives from model instance\n  const { measures, objectives, perspectives } = model.programmes[0];\n\n  // Check perspectives sum to 1\n  const perspectiveSum = perspectives.reduce((sum, perspective) => sum + perspective.weighting, 0);\n  if (perspectiveSum > 1) {\n    valid.valid = false;\n    valid.errors.push('total perspective weighting was greater than 1');\n  }\n\n  // Check objectives under same perspective are not greater 1\n  perspectives.forEach(perspective => {\n    const objectiveSum = objectives\n      .filter(objective => objective.perspectiveId === perspective.id)\n      .reduce((sum, objective) => sum + objective.weighting, 0);\n\n    if (objectiveSum > 1) {\n      valid.valid = false;\n      valid.errors.push(`total objective weighting for ${perspective.name} was greater than 1`);\n    }\n  });\n\n  // Check measures under same objective are not greater 1\n  objectives.forEach(objective => {\n    const measureSum = measures\n      .filter(measure => measure.objectiveId === objective.id)\n      .reduce((sum, measure) => sum + measure.weighting, 0);\n\n    if (measureSum > 1) {\n      valid.valid = false;\n      valid.errors.push(`total measure weighting for ${objective.name} was greater than 1`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkPhaseDates(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract number of years of analysis from model\n  const { _analysisYears: analysisYears } = model;\n\n  // Extract phases and programme start date from model instance\n  const { phases, start } = model.programmes[0];\n\n  // Create moment from programme start\n  const programmeStart = moment(start, DATE_FORMAT, true);\n  const analysisEnds = moment(programmeStart).add(analysisYears, 'years');\n\n  phases.forEach(phase => {\n    // Create moment when phase starts\n    const phaseStart = moment(phase.start, DATE_FORMAT, true);\n\n    // Check phase start is after programme start\n    if (programmeStart.isAfter(phaseStart)) {\n      valid.valid = false;\n      valid.errors.push(`${phase.name} starts after programme start`);\n    }\n\n    // Create moment when phase ends\n    const phaseEnds = moment(phaseStart).add(phase.duration, 'weeks');\n\n    // Check phase ends before analysis ends\n    if (phaseEnds.isAfter(analysisEnds)) {\n      valid.valid = false;\n      valid.errors.push(`${phase.name} finishes after analysis period ends`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkAllBenefitAttributionKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefit attribution, benefits, deliverables, and phases from model\n  const { benefitAttribution, benefits, deliverables, phases } = model.programmes[0];\n\n  // Map element arrays to ids\n  const benefitIds = benefits.map(benefit => benefit.id);\n  const deliverableIds = deliverables.map(deliverable => deliverable.id);\n  const phaseIds = phases.map(phase => phase.id);\n\n  // Extract benefit attribution keys\n  const benefitKeys = Object.keys(benefitAttribution);\n\n  benefitKeys.forEach((benefitKey: string) => {\n    // Check key is valid\n    if (!benefitIds.includes(benefitKey)) {\n      valid.valid = false;\n\n      const benefitError = 'benefit attribution contained benefit key which does not exist';\n      if (!valid.errors.includes(benefitError)) {\n        valid.errors.push(benefitError);\n      }\n    }\n\n    // If the key exists in benefit attribution\n    if (benefitAttribution[benefitKey]) {\n      // Extract benefit attribution deliverable keys\n      const deliverableKeys = Object.keys(benefitAttribution[benefitKey]);\n\n      deliverableKeys.forEach((deliverableKey: string) => {\n        // Check key is valid\n        if (!deliverableIds.includes(deliverableKey)) {\n          valid.valid = false;\n\n          const deliverableError =\n            'benefit attribution contained deliverable key which does not exist';\n          if (!valid.errors.includes(deliverableError)) {\n            valid.errors.push(deliverableError);\n          }\n        }\n\n        // If the keys exists in benefit attribution\n        if (benefitAttribution[benefitKey][deliverableKey]) {\n          // Extract phase keys\n          const phaseKeys = Object.keys(benefitAttribution[benefitKey][deliverableKey]);\n\n          phaseKeys.forEach((phaseKey: string) => {\n            // Check key is valid\n            if (!phaseIds.includes(phaseKey)) {\n              valid.valid = false;\n\n              const phaseError = 'benefit attribution contained phase key which does not exist';\n              if (!valid.errors.includes(phaseError)) {\n                valid.errors.push(phaseError);\n              }\n            }\n          });\n        }\n      });\n    }\n  });\n\n  return valid;\n}\n\nfunction checkAllBenefitBuildupKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefit buildup, benefits, and phases from model\n  const { benefitBuildup, benefits, phases } = model.programmes[0];\n\n  // Map element arrays to ids\n  const benefitIds = benefits.map(benefit => benefit.id);\n  const phaseIds = phases.map(phase => phase.id);\n\n  // Extract benefit buildup keys\n  const benefitKeys = Object.keys(benefitBuildup);\n\n  benefitKeys.forEach((benefitKey: string) => {\n    // Check key is valid\n    if (!benefitIds.includes(benefitKey)) {\n      valid.valid = false;\n\n      const benefitError = 'benefit buildup contained benefit key which does not exist';\n      if (!valid.errors.includes(benefitError)) {\n        valid.errors.push(benefitError);\n      }\n    }\n\n    // If the key exists in benefit buildup\n    if (benefitBuildup[benefitKey]) {\n      // Extract benefit buildup phase keys\n      const phaseKeys = Object.keys(benefitBuildup[benefitKey]);\n\n      phaseKeys.forEach((phaseKey: string) => {\n        // Check key is valid\n        if (!phaseIds.includes(phaseKey)) {\n          valid.valid = false;\n\n          const phaseError = 'benefit buildup contained phase key which does not exist';\n          if (!valid.errors.includes(phaseError)) {\n            valid.errors.push(phaseError);\n          }\n        }\n      });\n    }\n  });\n\n  return valid;\n}\n\nfunction checkAllStakeholderBenefitKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract stakeholder benefits, benefits, and stakeholders from model\n  const { stakeholderBenefits, benefits, stakeholders } = model.programmes[0];\n\n  // Map element arrays to ids\n  const benefitIds = benefits.map(benefit => benefit.id);\n  const stakeholderIds = stakeholders.map(stakeholder => stakeholder.id);\n\n  // Extract stakeholder benefit keys\n  const benefitKeys = Object.keys(stakeholderBenefits);\n\n  benefitKeys.forEach((benefitKey: string) => {\n    // Check key is valid\n    if (!benefitIds.includes(benefitKey)) {\n      valid.valid = false;\n\n      const benefitError = 'stakeholder benefits contained benefit key which does not exist';\n      if (!valid.errors.includes(benefitError)) {\n        valid.errors.push(benefitError);\n      }\n    }\n\n    // If the key exists in stakeholder benefits\n    if (stakeholderBenefits[benefitKey]) {\n      // Extract stakeholder benefits stakeholder keys\n      const stakeholderKeys = Object.keys(stakeholderBenefits[benefitKey]);\n\n      stakeholderKeys.forEach((stakeholderKey: string) => {\n        // Check key is valid\n        if (!stakeholderIds.includes(stakeholderKey)) {\n          valid.valid = false;\n\n          const stakeholderError =\n            'stakeholder benefits contained stakeholder key which does not exist';\n          if (!valid.errors.includes(stakeholderError)) {\n            valid.errors.push(stakeholderError);\n          }\n        }\n      });\n    }\n  });\n\n  return valid;\n}\n\nfunction checkAllCostAttributionKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract cost attribution, costs, and phases from model\n  const { costAttribution, costs, phases } = model.programmes[0];\n\n  // Map element arrays to ids\n  const costIds = costs.map(cost => cost.id);\n  const phaseIds = phases.map(phase => phase.id);\n\n  // Extract cost attribution keys\n  const costKeys = Object.keys(costAttribution);\n\n  costKeys.forEach((costKey: string) => {\n    // Check key is valid\n    if (!costIds.includes(costKey)) {\n      valid.valid = false;\n\n      const costError = 'cost attribution contained cost key which does not exist';\n      if (!valid.errors.includes(costError)) {\n        valid.errors.push(costError);\n      }\n    }\n\n    // If the key exists in cost attribution\n    if (costAttribution[costKey]) {\n      // Extract cost attribution phase keys\n      const phaseKeys = Object.keys(costAttribution[costKey]);\n\n      phaseKeys.forEach((phaseKey: string) => {\n        // Check key is valid\n        if (!phaseIds.includes(phaseKey)) {\n          valid.valid = false;\n\n          const phaseError = 'cost attribution contained phase key which does not exist';\n          if (!valid.errors.includes(phaseError)) {\n            valid.errors.push(phaseError);\n          }\n        }\n      });\n    }\n  });\n\n  return valid;\n}\n\nfunction checkAllBenefitBuildupSensitivityKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefit buildup, benefits, and phases from model\n  const { scenarios, benefits, phases } = model.programmes[0];\n\n  // Map element arrays to ids\n  const benefitIds = benefits.map(benefit => benefit.id);\n  const phaseIds = phases.map(phase => phase.id);\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    // Extract benefit buildup sensitivity\n    const { benefitBuildupSensitivity } = scenario;\n\n    // Extract benefit buildup sensitivity keys\n    const benefitKeys = Object.keys(benefitBuildupSensitivity);\n\n    benefitKeys.forEach((benefitKey: string) => {\n      // Check key is valid\n      if (!benefitIds.includes(benefitKey)) {\n        valid.valid = false;\n\n        const benefitError = `${\n          scenario.name\n        } benefit buildup sensitivity contained benefit key which does not exist`;\n        if (!valid.errors.includes(benefitError)) {\n          valid.errors.push(benefitError);\n        }\n      }\n\n      // If the key exists in benefit buildup sensitivity\n      if (benefitBuildupSensitivity[benefitKey]) {\n        // Extract benefit buildup sensitivity phase keys\n        const phaseKeys = Object.keys(benefitBuildupSensitivity[benefitKey]);\n\n        phaseKeys.forEach((phaseKey: string) => {\n          // Check key is valid\n          if (!phaseIds.includes(phaseKey)) {\n            valid.valid = false;\n\n            const phaseError = `${\n              scenario.name\n            } benefit buildup sensitivity contained phase key which does not exist`;\n            if (!valid.errors.includes(phaseError)) {\n              valid.errors.push(phaseError);\n            }\n          }\n        });\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction checkAllPhaseCostSensitivityKeysExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract scenarios, and phases from model\n  const { scenarios, phases } = model.programmes[0];\n\n  // Define cost types\n  const costTypes = [COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT];\n\n  // Map element arrays to ids\n  const phaseIds = phases.map(phase => phase.id);\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    // Extract phase cost sensitivity\n    const { phaseCostSensitivity } = scenario;\n\n    costTypes.forEach(costType => {\n      // Extract phase cost sensitivity phase keys\n      const phaseKeys = Object.keys(phaseCostSensitivity[costType]);\n\n      phaseKeys.forEach((phaseKey: string) => {\n        // Check key is valid\n        if (!phaseIds.includes(phaseKey)) {\n          valid.valid = false;\n\n          const phaseError = `${\n            scenario.name\n          } phase cost sensitivity contained phase key which does not exist`;\n          if (!valid.errors.includes(phaseError)) {\n            valid.errors.push(phaseError);\n          }\n        }\n      });\n    });\n  });\n\n  return valid;\n}\n\nfunction checkAllThreadsHaveThreadValues(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract scenarios, and phases from model\n  const { _threadValues: values, causeAndEffect } = model.programmes[0];\n\n  // Determine present value ids\n  const valueIds = values.map(value => value.id);\n\n  // Check all thread value entries\n  causeAndEffect.forEach(thread => {\n    if (!valueIds.includes(thread.id)) {\n      valid.valid = false;\n      valid.errors.push(`thread ${thread.reference} did not have associated thread values`);\n    }\n  });\n\n  if (hasDuplicates(valueIds)) {\n    valid.valid = false;\n    valid.errors.push('thread values contain duplicate thread ids');\n  }\n\n  return valid;\n}\n\nfunction checkAllThreadValuesAreValid(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract analysis years from model\n  const { _analysisYears: years } = model;\n\n  // Extract scenarios, and phases from model\n  const { _threadValues: values, causeAndEffect } = model.programmes[0];\n\n  // Map all thread ids from cause and effect\n  const threadIds = causeAndEffect.map(thread => thread.id);\n\n  // Check all thread value entries\n  values.forEach(value => {\n    if (!threadIds.includes(value.id)) {\n      valid.valid = false;\n      valid.errors.push('thread value referenced cause and effect thread which does not exist');\n      return;\n    }\n\n    // Get thread reference for better error message\n    const foundThread = causeAndEffect.find(thread => thread.id === value.id);\n    const threadReference = (foundThread && foundThread.reference) || value.id;\n\n    // Check if there are too many values\n    if (value.values.length > years) {\n      valid.valid = false;\n      valid.errors.push(\n        `thread values for ${threadReference} had too many values for analysis years`\n      );\n    } else if (value.values.length < years) {\n      valid.valid = false;\n      valid.errors.push(\n        `thread values for ${threadReference} did not have enough values for analysis years`\n      );\n    }\n  });\n\n  return valid;\n}\n\nfunction checkNoDuplicateSensitivitiesExist(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract scenarios and benefits from model\n  const { scenarios } = model.programmes[0];\n\n  // Check all scenarios are sound\n  scenarios.forEach(scenario => {\n    // Extract sensitivities\n    const { benefitSensitivity, deliverableSensitivity, phaseSensitivity } = scenario;\n\n    // Map to ids\n    const benefitIds = benefitSensitivity.map(sensitivity => sensitivity.id);\n    const deliverableIds = deliverableSensitivity.map(sensitivity => sensitivity.id);\n    const phaseIds = phaseSensitivity.map(sensitivity => sensitivity.id);\n\n    if (hasDuplicates(benefitIds)) {\n      valid.valid = false;\n      valid.errors.push(`duplicate benefit ids exist in ${scenario.name} sensitivity`);\n    }\n\n    if (hasDuplicates(deliverableIds)) {\n      valid.valid = false;\n      valid.errors.push(`duplicate deliverable ids exist in ${scenario.name} sensitivity`);\n    }\n\n    if (hasDuplicates(phaseIds)) {\n      valid.valid = false;\n      valid.errors.push(`duplicate phase ids exist in ${scenario.name} sensitivity`);\n    }\n  });\n\n  return valid;\n}\n\nfunction checkBenefitAttributionSumsToOne(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract benefit attribution, benefits, deliverable, and phases from model\n  const { benefitAttribution, benefits, deliverables, phases } = model.programmes[0];\n\n  benefits.forEach(benefit => {\n    if (benefitAttribution[benefit.id]) {\n      const benefitMatrix = benefitAttribution[benefit.id];\n\n      deliverables.forEach(deliverable => {\n        if (benefitMatrix[deliverable.id]) {\n          const deliverableMatrix = benefitMatrix[deliverable.id];\n\n          const sum = phases.reduce((sum, phase) => {\n            if (deliverableMatrix[phase.id]) {\n              return sum + deliverableMatrix[phase.id];\n            }\n            return sum;\n          }, 0);\n\n          if (sum && sum !== 1) {\n            valid.valid = false;\n            valid.errors.push(\n              `benefit attribution for ${deliverable.name} in ${\n                benefit.name\n              } does not sum to 1 or 0`\n            );\n          }\n        }\n      });\n    }\n  });\n\n  return valid;\n}\n\nfunction checkBalancedScorecardContainsCorrectInformation(model: Model): ValidObject {\n  // Define new validity object\n  const valid = { valid: true, errors: [] };\n\n  // Extract analysis years, balanced scorecard, measures and scorecard start from model\n  const { _analysisYears: analysisYears } = model;\n  const { balancedScorecard, measures, scorecardStart } = model.programmes[0];\n\n  // Map measure ids\n  const measureIds = measures.map(measure => measure.id);\n\n  // Define expected months\n  const months = [];\n  const start = moment(scorecardStart, DATE_FORMAT, true);\n  for (let m = 0; m < 12 * analysisYears; m++) {\n    months.push(\n      moment(start)\n        .add(m, 'months')\n        .format(DATE_FORMAT)\n    );\n  }\n\n  balancedScorecard.forEach(monthItem => {\n    if (!months.includes(monthItem.date)) {\n      valid.valid = false;\n      valid.errors.push(`balanced scorecard contained invalid date ${monthItem.date}`);\n    }\n\n    const { values } = monthItem;\n\n    values.forEach(measureEntry => {\n      if (!measureIds.includes(measureEntry.id)) {\n        valid.valid = false;\n\n        const error = `balanced scorecard contained non-existent measure ${measureEntry.id}`;\n        if (!valid.errors.includes(error)) {\n          valid.errors.push(error);\n        }\n      }\n\n      const targetMeasure = measures.find(measure => measure.id === measureEntry.id);\n\n      if (targetMeasure) {\n        // Extract best and worst values\n        const { best, worst } = targetMeasure;\n\n        if (best === worst && best === 0 && measureEntry.value !== 0) {\n          valid.valid = false;\n          valid.errors.push(\n            'balanced scorecard measure entry was not zero despite best and worst being zero'\n          );\n        } else if (\n          best > worst && \n          measureEntry.value !== 0 && \n          (measureEntry.value > best || measureEntry.value < worst)\n        ) {\n          valid.valid = false;\n          valid.errors.push('balanced scorecard measure entry was not in range [worst, best]');\n        } else if (\n          best < worst && \n          measureEntry.value !== 0 && \n          (measureEntry.value > worst || measureEntry.value < best)\n        ) {\n          valid.valid = false;\n          valid.errors.push('balanced scorecard measure entry was not in range [best, worst]');\n        }\n      }\n    });\n  });\n\n  return valid;\n}\n\nfunction mergeValidityObjects(objects: Array<ValidObject>): ValidObject {\n  return objects.reduce(\n    (merged, obj) => {\n      merged.valid = obj.valid && merged.valid;\n\n      if (!obj.valid) {\n        obj.errors.forEach(error => merged.errors.push(error));\n      }\n\n      return merged;\n    },\n    { valid: true, errors: [] }\n  );\n}\n\nfunction isConsistent(model: Model): ValidObject {\n  const validObjects = [];\n\n  // Model\n  validObjects.push(checkForDuplicateIds(model));\n\n  // Programme\n  validObjects.push(checkProgrammeDates(model));\n  validObjects.push(checkElementsHaveUniqueNames(model));\n\n  // Benefits\n  validObjects.push(checkCoreBenefits(model));\n  validObjects.push(checkMatricesHaveCorrectBenefitKeys(model));\n  validObjects.push(checkBenefitSensitivitiesReferenceValidBenefits(model));\n  validObjects.push(checkBenefitBuildupSensitivitiesContainBenefitKeys(model));\n\n  // Deliverables\n  validObjects.push(checkMatricesHaveCorrectDeliverableKeys(model));\n  validObjects.push(checkDeliverableSensitivitiesReferenceValidDeliverables(model));\n\n  // Phases\n  validObjects.push(checkPhaseDates(model));\n  validObjects.push(checkMatricesHaveCorrectPhaseKeys(model));\n  validObjects.push(checkPhaseLinksReferenceValidPhases(model));\n  validObjects.push(checkPhaseSensitivitiesReferenceValidPhases(model));\n  validObjects.push(checkPhaseCostSensitivitiesContainPhaseKeys(model));\n  validObjects.push(checkBenefitBuildupSensitivitiesContainPhaseKeys(model));\n\n  // Costs\n  validObjects.push(checkMatricesHaveCorrectCostKeys(model));\n\n  // Stakeholders\n  validObjects.push(checkMatricesHaveCorrectStakeholderKeys(model));\n\n  // Measures\n  validObjects.push(checkMeasureData(model));\n\n  // Cause and effect\n  validObjects.push(checkThreadsReferenceValidElements(model));\n  validObjects.push(checkAllThreadsHaveThreadValues(model));\n  validObjects.push(checkAllThreadsHaveUniqueReferences(model));\n\n  // Thread Values\n  validObjects.push(checkAllThreadValuesAreValid(model));\n\n  // Benefit Attribution\n  validObjects.push(checkAllBenefitAttributionKeysExist(model));\n  validObjects.push(checkBenefitAttributionSumsToOne(model));\n\n  // Benefit Buildup\n  validObjects.push(checkAllBenefitBuildupKeysExist(model));\n\n  // Stakeholder Benefits\n  validObjects.push(checkAllStakeholderBenefitKeysExist(model));\n\n  // Cost Attribution\n  validObjects.push(checkAllCostAttributionKeysExist(model));\n\n  // Strategy Map\n  validObjects.push(checkObjectivesReferenceValidPerspectives(model));\n  validObjects.push(checkMeasuresReferenceValidObjectives(model));\n  validObjects.push(checkStrategyMapWeightings(model));\n\n  // Scenarios\n  validObjects.push(checkNoDuplicateSensitivitiesExist(model));\n  validObjects.push(checkBaselineScenario(model));\n  validObjects.push(checkPhaseSensitivitiesContainAllPhases(model));\n  validObjects.push(checkBenefitSensitivitiesContainAllBenefits(model));\n  validObjects.push(checkDeliverableSensitivitiesContainAllDeliverables(model));\n  validObjects.push(checkAllBenefitBuildupSensitivityKeysExist(model));\n  validObjects.push(checkAllPhaseCostSensitivityKeysExist(model));\n\n  // Balanced Scorecard\n  validObjects.push(checkBalancedScorecardContainsCorrectInformation(model));\n\n  return mergeValidityObjects(validObjects);\n}\n\nexport default isConsistent;\n","// @flow\n// Validation functions\nimport isValid from './validation';\nimport isConsistent from './consistency';\n\n// Errors\nimport { InvalidStateError, InconsistentStateError } from '../errors';\n\n// Flow types\nimport { type Model } from '../types';\n\n// Define function to confirm whether state is valid using schema\nfunction checkModel(model: Model, operation: string) {\n  // Validate provided model\n  const { valid, errors: validationErrors } = isValid(model);\n\n  // If model is not valid throw error\n  if (!valid) {\n    // Provide descriptions\n    console.error(`${operation} yielded an invalid model, details below:`);\n    validationErrors.forEach(console.error);\n    console.error('throwing model', model);\n\n    // Throw error\n    throw new InvalidStateError(`${operation} yielded an invalid model`);\n  }\n\n  // Check provided model for consistency\n  const { valid: consistent, errors: consistencyErrors } = isConsistent(model);\n\n  // If model is not consistent throw error\n  if (!consistent) {\n    // Provide descriptions\n    consistencyErrors.forEach(err => console.error(err));\n\n    // Throw error\n    throw new InconsistentStateError(`${operation} yielded an inconsistent model`);\n  }\n\n  // Otherwise, return valid model\n  return model;\n}\n\nexport default checkModel;\n","// @flow\nimport confirmValid from '../validation';\n\nimport { Intent } from '@blueprintjs/core';\nimport { AppToaster } from '../../../components/Toaster';\n\nimport {\n  InvalidStateError,\n  InvalidModelError,\n  InvalidUpdateError,\n  InconsistentArgumentError,\n  InconsistentStateError,\n} from '../errors';\n\nimport { type Model } from '../types';\n\nconst safeUpdate = (rollback: Model) => (f: any => Model, operation: string) => {\n  try {\n    return confirmValid(f(), operation);\n  } catch (e) {\n    if (e instanceof InvalidStateError) {\n      const message = 'The update executed but produced an invalid state';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    } else if (e instanceof InconsistentStateError) {\n      const message = 'The update executed but produced an inconsistent state';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    } else if (e instanceof InvalidUpdateError) {\n      const message = 'The update would have yielded an invalid or inconsistent model';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    } else if (e instanceof InconsistentArgumentError) {\n      const message = 'The arguments provided to the update function were not conistent';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    } else if (e instanceof InvalidModelError) {\n      const message = 'The model provided to the update function was invalid';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    } else {\n      const message = 'An unknown error occured';\n      AppToaster.show({ message, intent: Intent.DANGER });\n      console.error(e.message);\n    }\n\n    return rollback;\n  }\n};\n\nexport default safeUpdate;\n","// Action types\nimport * as actions from '../actions/types';\n\n// Configuration constants and model API functions\nimport * as CONSTANTS from '../config/constants';\nimport * as API from '../model/api';\n\n// Import initial model and schema\n// import BLANK from '../model/examples/blank.json';\n// import JANET_MODEL from '../model/examples/janet.json';\nimport MIDSIZE_BANK_MODEL from '../model/examples/midsize.json';\n// import HOSPITAL from '../model/examples/hospital.json';\n\n// Import functions for checking and safely updating model\nimport safetyCheck from '../model/api/validation/SafeUpdate';\nimport confirmValid from '../model/api/validation';\nimport randomValues from '../utils/createRandomScorecardValues';\n\n// Validate initial model schema\n// confirmValid(BLANK, 'load');\n// confirmValid(JANET_MODEL, 'load');\nconfirmValid(MIDSIZE_BANK_MODEL, 'load');\n// confirmValid(HOSPITAL, 'load');\n\n// Set initial state to model\n// const initialState = BLANK;\n// const initialState = JANET;\nconst initialState = MIDSIZE_BANK_MODEL;\n// const initialState = HOSPITAL;\n\n// Reducer\nexport default (state = initialState, action = {}) => {\n  switch (action.type) {\n    // Upload model action\n    case 'UPLOAD_MODEL':\n      return safetyCheck(state)(() => action.model, 'upload');\n    // Update model action\n    case 'UPDATE_MODEL':\n      return safetyCheck(state)(() => action.model, 'update');\n    // Update Atom action:\n    case actions.UPDATE_ATOM:\n      // Filter action key to select appropriate Model API function\n      switch (action.key) {\n        case CONSTANTS.MODEL_KEY:\n          return safetyCheck(state)(() => API.updateModel(state, action.values), 'update');\n        case CONSTANTS.PROGRAMME_KEY:\n          return safetyCheck(state)(() => API.updateProgramme(state, action.values), 'update');\n        case CONSTANTS.SCENARIO_KEY:\n          return safetyCheck(state)(\n            () => API.updateScenarioById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.BENEFIT_KEY:\n          return safetyCheck(state)(\n            () => API.updateBenefitById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.COST_KEY:\n          return safetyCheck(state)(\n            () => API.updateCostById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.DELIVERABLE_KEY:\n          return safetyCheck(state)(\n            () => API.updateDeliverableById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.PHASE_KEY:\n          return safetyCheck(state)(\n            () => API.updatePhaseById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.STAKEHOLDER_KEY:\n          return safetyCheck(state)(\n            () => API.updateStakeholderById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.GROUP_KEY:\n          return safetyCheck(state)(\n            () => API.updateGroupById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.BENEFICIARY_KEY:\n          return safetyCheck(state)(\n            () => API.updateBeneficiaryById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n          return safetyCheck(state)(\n            () => API.updateThreadById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.PARAMETER_KEY:\n          return safetyCheck(state)(\n            () => API.updateParameterById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.MEASURE_KEY:\n          return safetyCheck(state)(\n            () => API.updateMeasureById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.OBJECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.updateObjectiveById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.PERSPECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.updatePerspectiveById(state, action.id, action.values),\n            'update'\n          );\n        case CONSTANTS.THEME_KEY:\n          return safetyCheck(state)(\n            () => API.updateThemeById(state, action.id, action.values),\n            'update'\n          );\n        default:\n          throw new Error('Unrecognised type key when updating atom');\n      }\n    // Delete atom action\n    case actions.DELETE_ATOM:\n      switch (action.key) {\n        case CONSTANTS.BENEFIT_KEY:\n          return safetyCheck(state)(\n            () => API.removeBenefitById(state, action.id, 'cascade'),\n            'delete'\n          );\n        case CONSTANTS.COST_KEY:\n          return safetyCheck(state)(() => API.removeCostById(state, action.id), 'delete');\n        case CONSTANTS.DELIVERABLE_KEY:\n          return safetyCheck(state)(\n            () => API.removeDeliverableById(action.id, 'cascade'),\n            'delete'\n          );\n        case CONSTANTS.PHASE_KEY:\n          return safetyCheck(state)(() => API.removePhaseById(state, action.id), 'delete');\n        case CONSTANTS.STAKEHOLDER_KEY:\n          return safetyCheck(state)(\n            () => API.removeStakeholderById(state, action.id, 'cascade'),\n            'delete'\n          );\n        case CONSTANTS.GROUP_KEY:\n          return safetyCheck(state)(() => API.removeGroupById(state, action.id, 'null'), 'delete');\n        case CONSTANTS.BENEFICIARY_KEY:\n          return safetyCheck(state)(\n            () => API.removeBeneficiaryById(state, action.id, 'null'),\n            'delete'\n          );\n        case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n          return safetyCheck(state)(() => API.removeThreadById(state, action.id), 'delete');\n        case CONSTANTS.PARAMETER_KEY:\n          return safetyCheck(state)(() => API.removeParameterById(state, action.id), 'delete');\n        case CONSTANTS.MEASURE_KEY:\n          return safetyCheck(state)(\n            () => API.removeMeasureById(state, action.id, 'null'),\n            'delete'\n          );\n        case CONSTANTS.OBJECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.removeObjectiveById(state, action.id, 'null'),\n            'delete'\n          );\n        case CONSTANTS.PERSPECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.removePerspectiveById(state, action.id, 'null'),\n            'delete'\n          );\n        case CONSTANTS.THEME_KEY:\n          return safetyCheck(state)(() => API.removeThemeById(state, action.id), 'delete');\n        case CONSTANTS.SCENARIO_KEY:\n          return safetyCheck(state)(() => API.removeScenarioById(state, action.id), 'delete');\n        case CONSTANTS.MODEL_KEY:\n        case CONSTANTS.PROGRAMME_KEY:\n          throw new Error('Tried to delete model or programme');\n        default:\n          throw new Error('Unrecognised type key when deleting atom');\n      }\n    // Add new atom action\n    case actions.ADD_ATOM:\n      switch (action.key) {\n        case CONSTANTS.BENEFIT_KEY:\n          return safetyCheck(state)(() => API.newBenefit(state, action.element, action.id), 'add');\n        case CONSTANTS.COST_KEY:\n          return safetyCheck(state)(() => API.newCost(state, action.element, action.id), 'add');\n        case CONSTANTS.DELIVERABLE_KEY:\n          return safetyCheck(state)(\n            () => API.newDeliverable(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.PHASE_KEY:\n          return safetyCheck(state)(() => API.newPhase(state, action.element, action.id), 'add');\n        case CONSTANTS.STAKEHOLDER_KEY:\n          return safetyCheck(state)(\n            () => API.newStakeholder(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.GROUP_KEY:\n          return safetyCheck(state)(() => API.newGroup(state, action.element, action.id), 'add');\n        case CONSTANTS.BENEFICIARY_KEY:\n          return safetyCheck(state)(\n            () => API.newBeneficiary(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n          return safetyCheck(state)(() => API.newThread(state, action.element, action.id), 'add');\n        case CONSTANTS.PARAMETER_KEY:\n          return safetyCheck(state)(\n            () => API.newParameter(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.MEASURE_KEY:\n          return safetyCheck(state)(() => API.newMeasure(state, action.element, action.id), 'add');\n        case CONSTANTS.THEME_KEY:\n          return safetyCheck(state)(() => API.newTheme(state, action.element, action.id), 'add');\n        case CONSTANTS.OBJECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.newObjective(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.PERSPECTIVE_KEY:\n          return safetyCheck(state)(\n            () => API.newPerspective(state, action.element, action.id),\n            'add'\n          );\n        case CONSTANTS.SCENARIO_KEY:\n          return safetyCheck(state)(() => API.newScenario(state, action.element, action.id), 'add');\n        case CONSTANTS.MODEL_KEY:\n        case CONSTANTS.PROGRAMME_KEY:\n          throw new Error('Tried to add a new model or programme');\n        default:\n          throw new Error('Unrecognised type key when adding atom');\n      }\n    // Update matrix action\n    case actions.UPDATE_MATRIX:\n      switch (action.key) {\n        case CONSTANTS.BENEFIT_ATTRIBUTION_KEY:\n          return safetyCheck(state)(\n            () => API.setBenefitAttribution(state, action.values),\n            'update matrix'\n          );\n        case CONSTANTS.BENEFIT_BUILDUP_KEY:\n          return safetyCheck(state)(\n            () => API.setBenefitBuildup(state, action.values),\n            'update matrix'\n          );\n        case CONSTANTS.COST_ATTRIBUTION_KEY:\n          return safetyCheck(state)(\n            () => API.setCostAttribution(state, action.values),\n            'update matrix'\n          );\n        case CONSTANTS.STAKEHOLDER_BENEFITS_KEY:\n          return safetyCheck(state)(\n            () => API.setStakeholderBenefits(state, action.values),\n            'update matrix'\n          );\n        default:\n          throw new Error('Unrecognised type key when updating matrix');\n      }\n    // Remove phase link action\n    case actions.DELETE_PHASE_LINK:\n      return safetyCheck(state)(() => API.deletePhaseLink(state, action.id), 'remove phase link');\n    // Add new phase link action\n    case actions.ADD_PHASE_LINK:\n      return safetyCheck(state)(\n        () => API.addPhaseLink(state, action.id, action.linkType, action.sourceId, action.targetId),\n        'add phase link'\n      );\n    // Update Sensitivity values\n    case actions.UPDATE_SENSITIVITY:\n      switch (action.typeKey) {\n        case 'phaseSensitivity':\n          return safetyCheck(state)(\n            () => API.setPhaseSensitivityValues(state, action.id, action.values),\n            'update phase sensitivities'\n          );\n        case 'benefitSensitivity':\n          return safetyCheck(state)(\n            () => API.setBenefitSensitivityValues(state, action.id, action.values),\n            'update benefit sensitivities'\n          );\n        case 'deliverableSensitivity':\n          return safetyCheck(state)(\n            () => API.setDeliverableSensitivityValues(state, action.id, action.values),\n            'update deliverable sensitivities'\n          );\n        case 'benefitBuildupSensitivity':\n          return safetyCheck(state)(\n            () => API.setBenefitBuildupSensitivityValues(state, action.id, action.values),\n            'update benefit buildup sensitivities'\n          );\n        case 'phaseCostSensitivity':\n          return safetyCheck(state)(\n            () => API.setPhaseCostSensitivityValues(state, action.id, action.values),\n            'update phase cost sensitivities'\n          );\n        default:\n          throw new Error('Unrecognised type key when updating scenario sensitivities');\n      }\n    // Otherwise return current state\n    default:\n      return state;\n  }\n};\n","// @flow\nimport {\n  SET_SELECTED_STRATEGY_ITEM,\n  SET_STRATEGY_ITEM_EXPANDED,\n  SET_ACTIVE_SCORECARD_MONTH,\n} from '../actions/types';\n\nimport { type Action } from '../actions/types';\nimport { type ScorecardState } from './types';\n\nconst initialState: ScorecardState = {\n  activeMonth: undefined,\n  strategyMap: {\n    selected: undefined,\n    expanded: {\n      STRATEGY_ROOT: true,\n    },\n  },\n};\n\nexport default (state: ScorecardState = initialState, action: Action): ScorecardState => {\n  switch (action.type) {\n    case SET_STRATEGY_ITEM_EXPANDED:\n      return {\n        ...state,\n        strategyMap: {\n          ...state.strategyMap,\n          expanded: {\n            ...state.strategyMap.expanded,\n            [action.id]: action.expanded,\n          },\n        },\n      };\n    case SET_SELECTED_STRATEGY_ITEM:\n      return {\n        ...state,\n        strategyMap: {\n          ...state.strategyMap,\n          selected: action.element,\n        },\n      };\n    case SET_ACTIVE_SCORECARD_MONTH:\n      return {\n        ...state,\n        activeMonth: action.month,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport analysis from './analysis';\nimport auth from './auth';\nimport certainty from './certainty';\nimport editor from './editor';\nimport model from './model';\nimport scorecard from './scorecard';\n\nexport default combineReducers({\n  analysis,\n  auth,\n  certainty,\n  editor,\n  model,\n  scorecard,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux dependencies\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport HOSPITAL from './model/examples/hospital.json';\n\n// Redux Persist dependencies\n// import { persistStore, persistReducer } from 'redux-persist';\n// import { PersistGate } from 'redux-persist/integration/react';\n// import storage from 'redux-persist/lib/storage'; // localstorage\n\n// Redux Middleware\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\n// Redux development tools\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Global Stylesheet\nimport './index.css';\n\n// React app\nimport App from './App';\n// import Loading from './components/Loading';\nimport * as serviceWorker from './utils/serviceWorker';\nimport rootReducer from './reducers';\n\n// Plural library\nimport pluralize from 'pluralize';\n\n// Flow Types\nimport { type GetState, type Action } from './actions/types';\nimport { COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT } from './config/constants.js';\nimport createRandomScorecardValues from './utils/createRandomScorecardValues.js';\n\nconst newBenefitSchedule = {};\nHOSPITAL.programmes[0].scenarios.forEach(scenario => {\n  newBenefitSchedule[scenario.id] = new Array(4 * 8).fill(0);\n});\n\nconsole.log(newBenefitSchedule);\n\nconst newCostSchedule = {};\nHOSPITAL.programmes[0].scenarios.forEach(scenario => {\n  newCostSchedule[scenario.id] = new Array(4 * 8).fill(0);\n});\n\nconsole.log(newCostSchedule);\n\n// Configure Plural Library\npluralize.addSingularRule(/beneficiaries$/i, 'beneficiary');\npluralize.addPluralRule(/beneficiary$/i, 'beneficiaries');\n\nconst filterLogs = (getState: GetState, action: Action) => {\n  if (typeof action === 'undefined') {\n    return true;\n  } else {\n    return true;\n  }\n};\n\n// Configure Redux Logger\nconst logger = createLogger({\n  predicate: filterLogs,\n  diff: true,\n  collapsed: () => true,\n  actionTransformer: (action: Action) =>\n    typeof action === 'function' ? { type: 'THUNK_DISPATCH', originalAction: action } : action,\n});\n\n// Redux Persisted state configuration and reducer\n// NOTE: TURNED OFF the persist functionality whilst in active development\n// TODO: Need to decide what get's persisted and what doesn't as ids could change now on load\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n//   blacklist: ['auth', 'editor'],\n// };\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Redux Middleware\nconst middleware = [];\nmiddleware.push(logger); // Logs to console\nmiddleware.push(thunk); // Allows thunks\n\n// Redux create store with persisted reducer, dev tools, and middlewares\n// NB: Uncomment the next line and comment out line after to add persisted reducer\n// const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(...middleware)));\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n\n// Create the persistor function\n// NB: Uncomment this line and uncomment persist gate in app render to add persisted reducer\n// const persistor = persistStore(store);\n\n// Import the WebAssembly library and then render\n// Wasm modules need to be loaded async\n// https://github.com/webpack/webpack/issues/6615\nimport('api')\n  .then(() => {\n    // Render the Application with store, showing spinner whilst rehydrating\n    ReactDOM.render(\n      <Provider store={store}>\n        {/* <PersistGate\n          loading={<Loading text={'Loading Value Management Toolset'} />}\n          persistor={persistor}\n        > */}\n        <App />\n        {/* </PersistGate> */}\n      </Provider>,\n      document.getElementById('root')\n    );\n  })\n  .catch(console.error);\n\n// TODO: Offline first\nserviceWorker.unregister();\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getPhases } from '../Phase';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Constants\nimport { COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT } from '../../../../config/constants';\n\n// Flow Types\nimport type { Cost, CostData, Model } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of costs from the programme instance\n * @param {Model} model model instance\n * @return {Array<Cost>} array of costs\n **/\nexport function getCosts(model: Model): Array<Cost> {\n  const programme = getProgramme(model);\n  if (!programme.costs) {\n    throw new InvalidModelError('Programme did not contain an array of costs');\n  } else if (!Array.isArray(programme.costs)) {\n    throw new InvalidModelError(\"Programme 'costs' was not an array\");\n  }\n  return programme.costs;\n}\n\n/**\n * Returns a specific cost from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id cost id\n * @return {Cost} cost with provided id\n **/\nexport function getCostById(model: Model, id: string): Cost {\n  const costs = getCosts(model);\n  const found = costs.find(cost => cost.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find cost in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkCostData(cost: CostData): boolean {\n  if (cost.hasOwnProperty('name')) {\n    if (typeof cost.name !== 'string' || cost.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided cost update values for name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (cost.hasOwnProperty('type')) {\n    if (\n      typeof cost.type !== 'string' ||\n      ![COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT].includes(cost.type)\n    ) {\n      throw new InvalidUpdateError(\n        'Provided cost update values for type was not a string (or it was not a predefined type)'\n      );\n    }\n  }\n  if (cost.hasOwnProperty('definition')) {\n    if (typeof cost.definition !== 'string') {\n      throw new InvalidUpdateError('Provided cost update values for definition was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new cost (with data if provided)\n * @param {Model} model model instance\n * @param {CostData} cost optional cost data to store as cost\n * @return {Model} updated model instance\n */\nexport function newCost(model: Model, cost?: CostData, id?: string): Model {\n  const newCostId = id || nanoId();\n\n  // Default new cost\n  let costData = {\n    id: newCostId,\n    name: `New Cost ${++newCount}`,\n    type: COST_TYPE_DEVELOPMENT,\n    definition: '',\n  };\n\n  if (cost) {\n    // Check validity of cost data\n    checkCostData(cost);\n\n    // Override default cost data\n    costData = { ...costData, ...cost };\n  }\n\n  // Update Cost Attribution\n  const { costAttribution } = getProgramme(model);\n\n  const phases = getPhases(model);\n\n  const newCostAttribution = {\n    ...costAttribution,\n    [newCostId]: phases.reduce((acc, cur) => {\n      acc[cur.id] = 0;\n      return acc;\n    }, {}),\n  };\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        costs: [...model.programmes[0].costs, costData],\n        costAttribution: newCostAttribution,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a cost with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id cost id\n * @returns {Model} updated model instance\n */\nexport function removeCostById(model: Model, id: string): Model {\n  if (!model.programmes[0].costs.find(c => c.id === id)) {\n    throw new InconsistentArgumentError(\n      `No cost with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cost attribution\n  const updatedCosts = getCosts(model).filter(c => c.id !== id);\n  const { costAttribution, phases } = getProgramme(model);\n  const newCostAttribution = updatedCosts.reduce((acc, cost) => {\n    acc[cost.id] = phases.reduce((acc, phase) => {\n      acc[phase.id] = costAttribution[cost.id][phase.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        costs: model.programmes[0].costs.filter(c => c.id !== id),\n        costAttribution: newCostAttribution,\n      },\n    ],\n  };\n}\n\n/**\n * Sets a cost's attributes by id\n * @param {Model} model model instance\n * @param {string} id cost id\n * @param {CostData} cost new cost\n * @return {Model} updated model instance\n */\nexport function updateCostById(model: Model, id: string, cost: CostData): Model {\n  const found = model.programmes[0].costs.find(cost => cost.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No cost with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkCostData(cost);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        costs: model.programmes[0].costs.map(c =>\n          c.id === id\n            ? {\n                ...c,\n                name: cost.hasOwnProperty('name') ? cost.name : c.name,\n                type: cost.hasOwnProperty('type') ? cost.type : c.type,\n                definition: cost.hasOwnProperty('definition') ? cost.definition : c.definition,\n              }\n            : c),\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// Date Time Library\nimport moment from 'moment';\n\n// API Functions\nimport { getProgramme, getProgrammeAttributes } from '../Programme';\nimport { getBenefits } from '../Benefit';\nimport { getDeliverables } from '../Deliverable';\nimport { getCosts } from '../Cost';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Constants\nimport {\n  DATE_FORMAT,\n  PHASE_SLIP_RULE_TIME_AND_MATERIALS,\n  PHASE_SLIP_RULE_FIXED,\n  COST_TYPE_DEVELOPMENT,\n  COST_TYPE_SUPPORT,\n  PHASE_LINK_TYPES,\n} from '../../../../config/constants';\n\n// Flow Types\nimport type { Phase, PhaseData, Model, PhaseLink } from '../../types';\n\ntype PhaseLinkType = 'START_TO_START' | 'START_TO_FINISH' | 'FINISH_TO_START' | 'FINISH_TO_FINISH';\n\nlet newCount = 0;\n\n/**\n * Returns the array of phases from the programme instance\n * @param {Model} model model instance\n * @return {Array<Phase>} array of phases\n **/\nexport function getPhases(model: Model): Array<Phase> {\n  const programme = getProgramme(model);\n  if (!programme.phases) {\n    throw new InvalidModelError('Programme did not contain an array of phases');\n  } else if (!Array.isArray(programme.phases)) {\n    throw new InvalidModelError(\"Programme 'phases' was not an array\");\n  }\n  return programme.phases;\n}\n\n/**\n * Returns a specific phase from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id phase id\n * @return {Phase} phase with provided id\n **/\nexport function getPhaseById(model: Model, id: string): Phase {\n  const phases = getPhases(model);\n  const found = phases.find(phase => phase.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find phase in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkPhaseData(phase: PhaseData, model: Model): boolean {\n  if (phase.hasOwnProperty('name')) {\n    if (typeof phase.name !== 'string' || phase.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided phase update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (phase.hasOwnProperty('slip')) {\n    if (\n      typeof phase.slip !== 'string' ||\n      ![PHASE_SLIP_RULE_FIXED, PHASE_SLIP_RULE_TIME_AND_MATERIALS].includes(phase.slip)\n    ) {\n      throw new InvalidUpdateError(\n        'Provided phase update value slip was not a string (or it was not a predefined type)'\n      );\n    }\n  }\n  if (phase.hasOwnProperty('duration')) {\n    if (typeof phase.duration !== 'number' || Number.isNaN(phase.duration) || phase.duration < 0) {\n      throw new InvalidUpdateError(\n        'Provided phase update value duration was not a number (or it was negative)'\n      );\n    }\n  }\n  if (phase.hasOwnProperty('start')) {\n    // Construct moment from start date\n    const startMoment = moment(phase.start, DATE_FORMAT, true);\n\n    // Get programme start as moment\n    const programmeStart = getProgrammeAttributes(model).start;\n\n    if (typeof phase.start !== 'string' || !startMoment.isValid()) {\n      throw new InvalidUpdateError(\n        'Provided phase update value start was not a string (or it was not in valid format)'\n      );\n    } else if (startMoment.isBefore(programmeStart)) {\n      throw new InvalidUpdateError('Provided phase start date would be before programme start');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new phase (with data if provided)\n * @param {Model} model model instance\n * @param {PhaseData} phase optional phase data to store as phase\n * @return {Model} updated model instance\n */\nexport function newPhase(model: Model, phase?: PhaseData, id?: string): Model {\n  const newPhaseId = id || nanoId();\n\n  // Default new phase\n  let phaseData = {\n    id: newPhaseId,\n    name: `New Phase ${++newCount}`,\n    slip: 'TIME_AND_MATERIALS_PHASE',\n    duration: 12,\n    start: '2020-01-01',\n  };\n\n  if (phase) {\n    // Check validity of phase data\n    checkPhaseData(phase, model);\n\n    // Override default phase data\n    phaseData = { ...phaseData, ...phase };\n  }\n\n  // Update benefit attribution, cost attribution, and benefit buildup\n  const { benefitAttribution, costAttribution, benefitBuildup } = getProgramme(model);\n  const [benefits, deliverables, costs] = [\n    getBenefits(model),\n    getDeliverables(model),\n    getCosts(model),\n  ];\n\n  const newBenefitAttribution = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = deliverables.reduce((acc, deliverable) => {\n      acc[deliverable.id] = {\n        ...benefitAttribution[benefit.id][deliverable.id],\n        [newPhaseId]: 0,\n      };\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  const newCostAttribution = costs.reduce((acc, cur) => {\n    acc[cur.id] = {\n      ...costAttribution[cur.id],\n      [newPhaseId]: 0,\n    };\n    return acc;\n  }, {});\n\n  const newBenefitBuildup = benefits.reduce((acc, cur) => {\n    acc[cur.id] = {\n      ...benefitBuildup[cur.id],\n      [newPhaseId]: 0,\n    };\n    return acc;\n  }, {});\n\n  // Update phase cost sensitivity, benefit buildup sensitivity, and phase sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    phaseCostSensitivity: [COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT].reduce((acc, costId) => {\n      acc[costId] = {\n        ...scenario.phaseCostSensitivity[costId],\n        [newPhaseId]: 0,\n      };\n      return acc;\n    }, {}),\n    benefitBuildupSensitivity: benefits.reduce((acc, benefit) => {\n      acc[benefit.id] = {\n        ...scenario.benefitBuildupSensitivity[benefit.id],\n        [newPhaseId]: 0,\n      };\n      return acc;\n    }, {}),\n    phaseSensitivity: [\n      ...scenario.phaseSensitivity,\n      {\n        id: newPhaseId,\n        start: phaseData.start,\n        duration: phaseData.duration,\n        switch: true,\n      },\n    ],\n  }));\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        phases: [...model.programmes[0].phases, phaseData],\n        benefitAttribution: newBenefitAttribution,\n        costAttribution: newCostAttribution,\n        benefitBuildup: newBenefitBuildup,\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a phase with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id phase id\n * @returns {Model} updated model instance\n */\nexport function removePhaseById(model: Model, id: string): Model {\n  if (!model.programmes[0].phases.find(p => p.id === id)) {\n    throw new InconsistentArgumentError(\n      `No phase with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update benefit attribution and benefit buildup\n  const updatedPhases = getPhases(model).filter(p => p.id !== id);\n  const {\n    benefitAttribution,\n    benefits,\n    deliverables,\n    benefitBuildup,\n    costs,\n    costAttribution,\n  } = getProgramme(model);\n  const newBenefitAttribution = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = deliverables.reduce((acc, deliverable) => {\n      acc[deliverable.id] = updatedPhases.reduce((acc, phase) => {\n        acc[phase.id] = benefitAttribution[benefit.id][deliverable.id][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  const newBenefitBuildup = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = updatedPhases.reduce((acc, phase) => {\n      acc[phase.id] = benefitBuildup[benefit.id][phase.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  const newCostAttribution = costs.reduce((acc, cost) => {\n    acc[cost.id] = updatedPhases.reduce((acc, phase) => {\n      acc[phase.id] = costAttribution[cost.id][phase.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  // Update benefit buildup sensitivity, phase cost sensitivity, and phase sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    phaseCostSensitivity: [COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT].reduce((acc, costId) => {\n      acc[costId] = updatedPhases.reduce((acc, phase) => {\n        acc[phase.id] = scenario.phaseCostSensitivity[costId][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {}),\n    benefitBuildupSensitivity: benefits.reduce((acc, benefit) => {\n      acc[benefit.id] = updatedPhases.reduce((acc, phase) => {\n        acc[phase.id] = scenario.benefitBuildupSensitivity[benefit.id][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {}),\n    phaseSensitivity: scenario.phaseSensitivity.filter(ps => ps.id !== id),\n  }));\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        phases: model.programmes[0].phases.filter(p => p.id !== id),\n        benefitAttribution: newBenefitAttribution,\n        benefitBuildup: newBenefitBuildup,\n        costAttribution: newCostAttribution,\n        scenarios: newScenarios,\n        phaseLinks: model.programmes[0].phaseLinks.filter(\n          l => ![l.sourceId, l.targetId].includes(id)\n        ),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a phase's attributes by id\n * @param {Model} model model instance\n * @param {string} id phase id\n * @param {PhaseData} phase new phase\n * @return {Model} updated model instance\n */\nexport function updatePhaseById(model: Model, id: string, phase: PhaseData): Model {\n  // Get phase by id to ensure it exists\n  getPhaseById(model, id);\n\n  // Check validity of data\n  checkPhaseData(phase, model);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        phases: model.programmes[0].phases.map(p =>\n          p.id === id\n            ? {\n                ...p,\n                name: phase.hasOwnProperty('name') ? phase.name : p.name,\n                slip: phase.hasOwnProperty('slip') ? phase.slip : p.slip,\n                duration: phase.hasOwnProperty('duration') ? phase.duration : p.duration,\n                start: phase.hasOwnProperty('start') ? phase.start : p.start,\n              }\n            : p),\n      },\n    ],\n  };\n}\n\nexport function getPhaseLinks(model: Model): Array<PhaseLink> {\n  // Get programme from model\n  const programme = getProgramme(model);\n\n  // Check type of phase links array\n  if (!programme.phaseLinks) {\n    throw new InvalidModelError('Phase links key was not present in programme');\n  } else if (!Array.isArray(programme.phaseLinks)) {\n    throw new InvalidModelError('Phase links key was not an array in programme');\n  }\n\n  // Return phase links\n  return programme.phaseLinks;\n}\n\nexport function addPhaseLink(\n  model: Model,\n  id: number,\n  type: PhaseLinkType,\n  sourceId: string,\n  targetId: string\n): Model {\n  // Get programme form model\n  const programme = getProgramme(model);\n\n  // Check source and target ids exist by retreiving respective phases\n  getPhaseById(model, sourceId);\n  getPhaseById(model, targetId);\n\n  // Check phase id is a number\n  if (typeof id !== 'number' || Number.isNaN(id)) {\n    throw new InvalidUpdateError('Phase link ids should be a number');\n  }\n\n  // Check phase type\n  if (!PHASE_LINK_TYPES.includes(type)) {\n    throw new InvalidUpdateError('Phase link type was not one of the predefined types');\n  }\n\n  const newLink = {\n    id,\n    type,\n    sourceId,\n    targetId,\n  };\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        phaseLinks: [...programme.phaseLinks, newLink],\n      },\n    ],\n  };\n}\n\nexport function deletePhaseLink(model: Model, id: number): Model {\n  const programme = getProgramme(model);\n\n  if (!programme.phaseLinks.find(link => link.id === id)) {\n    throw new InconsistentArgumentError('Could not find phase link with provided id');\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        phaseLinks: programme.phaseLinks.filter(link => link.id !== id),\n      },\n    ],\n  };\n}\n","// @flow\n// Date Time Library\nimport moment from 'moment';\n\n// API Functions\nimport { getBenefits } from '../Benefit';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError } from '../../errors';\n\n// Constants\nimport { DATE_FORMAT, BENEFIT_TYPE_FINANCIAL } from '../../../../config/constants';\n\n// Flow Types\nimport type { Model, Programme, ProgrammeData } from '../../types';\n\n// Constants\nconst programmeAttributes = [\n  'id',\n  'name',\n  'mission',\n  'vision',\n  'unitOfMeasure',\n  'start',\n  'financialStart',\n  'scorecardStart',\n];\n\n/**\n * Returns the (only) programme instance contained within the model\n * @param {Model} model model instance\n * @return {Programme}  programme instance\n */\nexport function getProgramme(model: Model): Programme {\n  if (!model.programmes) {\n    throw new InvalidModelError(\"Provided model did not have a 'programmes' attribute\");\n  } else if (!Array.isArray(model.programmes)) {\n    throw new InvalidModelError(\"Provided model's 'programmes' attribute was not an array\");\n  } else if (!model.programmes[0]) {\n    throw new InvalidModelError(\"Provided model's 'programmes[0]' was not defined\");\n  }\n\n  return model.programmes[0];\n}\n\n/**\n * Returns all the (only) programme's non-array attributes\n * @param {Model} model model instance\n * @return {ProgrammeAttributes} object containing all the programme's (non-array) attributes\n */\n// NB: Return type flow annotation omitted due to issue with flow recognising moment refinement\nexport function getProgrammeAttributes(model: Model) {\n  const programme = getProgramme(model);\n  const attributes = {};\n\n  programmeAttributes.forEach(key => {\n    if (!programme[key] && key !== 'mission' && key !== 'vision') {\n      throw new InvalidModelError(`Programme did not contain the '${key}' attribute`);\n    } else if (typeof programme[key] !== 'string') {\n      throw new InvalidModelError(`The programme's '${key}' attribute was not a string`);\n    }\n\n    // If attribute is a date attribute then try to parse as moment\n    if (['start', 'financialStart', 'scorecardStart'].includes(key)) {\n      const m = moment(programme[key], DATE_FORMAT, true);\n\n      // If moment is invalid then throw error\n      if (!m.isValid()) {\n        throw new InvalidModelError(\n          `The programme's 'start' attribute was not in valid date format ${DATE_FORMAT}`\n        );\n      }\n\n      // Otherwise set moment as attribute\n      attributes[key] = m;\n    } else {\n      // If not date than set raw as attribute\n      attributes[key] = programme[key];\n    }\n  });\n  return attributes;\n}\n\nfunction checkProgrammeData(data: ProgrammeData, model: Model): boolean {\n  // Check the name attribute if it exists\n  if (data.hasOwnProperty('name')) {\n    if (typeof data.name !== 'string' || data.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have name attribute (or it was length 0)'\n      );\n    }\n  }\n  // Check the mission attribute if it exists\n  if (data.hasOwnProperty('mission')) {\n    if (typeof data.mission !== 'string') {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have mission attribute'\n      );\n    }\n  }\n  // Check the vision attribute if it exists\n  if (data.hasOwnProperty('vision')) {\n    if (typeof data.vision !== 'string') {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have vision attribute'\n      );\n    }\n  }\n  // Check the unitOfMeasure attribute if it exists\n  if (data.hasOwnProperty('unitOfMeasure')) {\n    if (typeof data.unitOfMeasure !== 'string' || data.unitOfMeasure.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have unitOfMeasure attribute (or it was length 0)'\n      );\n    }\n  }\n\n  // Check the start attribute if it exists\n  let hasProgrammeStart = false;\n  if (data.hasOwnProperty('start')) {\n    hasProgrammeStart = true;\n\n    if (typeof data.start !== 'string' || !moment(data.start, DATE_FORMAT, true).isValid()) {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have start attribute (or it was not valid)'\n      );\n    }\n  }\n\n  // Check the financialStart attribute if it exists\n  let hasFinancialStart = false;\n  if (data.hasOwnProperty('financialStart')) {\n    hasFinancialStart = true;\n\n    if (\n      typeof data.financialStart !== 'string' ||\n      !moment(data.financialStart, DATE_FORMAT, true).isValid()\n    ) {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have financialStart attribute (or it not valid)'\n      );\n    }\n  }\n\n  // Check the scorecardStart attribute if it exists\n  let hasScorecardStart = false;\n  if (data.hasOwnProperty('scorecardStart')) {\n    hasScorecardStart = true;\n\n    if (\n      typeof data.scorecardStart !== 'string' ||\n      !moment(data.scorecardStart, DATE_FORMAT, true).isValid()\n    ) {\n      throw new InvalidUpdateError(\n        'Provided programme update values did not have scorecardStart attribute (or it was not valid)'\n      );\n    }\n  }\n\n  // Get programme start for comparison purposes\n  const comparisonDate = hasProgrammeStart\n    ? moment(data.start, DATE_FORMAT, true)\n    : getProgrammeStart(model);\n\n  const financialStartComparison = hasFinancialStart\n    ? moment(data.financialStart, DATE_FORMAT, true)\n    : getProgrammeFinancialStart(model);\n\n  const scorecardStartComparison = hasScorecardStart\n    ? moment(data.scorecardStart, DATE_FORMAT, true)\n    : getProgrammeScorecardStart(model);\n\n  if (hasProgrammeStart) {\n    if (financialStartComparison.isAfter(moment(data.start, DATE_FORMAT, true))) {\n      throw new InvalidUpdateError('Programme start occured before financial start');\n    } else if (scorecardStartComparison.isAfter(moment(data.start, DATE_FORMAT, true))) {\n      throw new InvalidUpdateError('Programme start occured before scorecard start');\n    }\n  }\n\n  // Check whether financial start is consistent with other start dates\n  if (hasFinancialStart) {\n    if (moment(data.financialStart, DATE_FORMAT, true).isAfter(comparisonDate)) {\n      throw new InvalidUpdateError('Financial start occured after programme start');\n    }\n  }\n\n  // Check whether scorecard start is consistent with other start dates\n  if (hasScorecardStart) {\n    if (moment(data.scorecardStart, DATE_FORMAT, true).isAfter(comparisonDate)) {\n      throw new InvalidUpdateError('Scorecard start occured after programme start');\n    }\n  }\n\n  return true;\n}\n\n/**\n * Updates a programme instance with the provided values\n * @param {Model} model model instance\n * @param {Programme} values programme values\n */\nexport function updateProgramme(model: Model, values: ProgrammeData): Model {\n  checkProgrammeData(values, model);\n\n  const programme = getProgramme(model);\n\n  let newBenefits;\n  const benefits = getBenefits(model);\n  if (values.hasOwnProperty('unitOfMeasure')) {\n    // Update financial benefit units of measure\n    newBenefits = benefits.map(benefit => {\n      if (\n        benefit.type === BENEFIT_TYPE_FINANCIAL &&\n        benefit.id !== model.programmes[0]._coreBenefits[2]\n      ) {\n        return {\n          ...benefit,\n          unitOfMeasure: values.unitOfMeasure,\n        };\n      } else {\n        return benefit;\n      }\n    });\n  } else {\n    newBenefits = benefits;\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        benefits: newBenefits,\n        name: values.hasOwnProperty('name') ? values.name : programme.name,\n        mission: values.hasOwnProperty('mission') ? values.mission : programme.mission,\n        vision: values.hasOwnProperty('vision') ? values.vision : programme.vision,\n        unitOfMeasure: values.hasOwnProperty('unitOfMeasure')\n          ? values.unitOfMeasure\n          : programme.unitOfMeasure,\n        start: values.hasOwnProperty('start') ? values.start : programme.start,\n        financialStart: values.hasOwnProperty('financialStart')\n          ? values.financialStart\n          : programme.financialStart,\n        scorecardStart: values.hasOwnProperty('scorecardStart')\n          ? values.scorecardStart\n          : programme.scorecardStart,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme id\n * @param  {Model} model model instance\n * @return {string}      id\n **/\nexport function getProgrammeId(model: Model): string {\n  const programme = getProgramme(model);\n  if (!programme.id) {\n    throw new InvalidModelError(\"Programme did not contain the 'id' attribute\");\n  } else if (typeof programme.id !== 'string') {\n    throw new InvalidModelError(\"The programme's 'id' attribute was not a string\");\n  }\n\n  return programme.id;\n}\n\n/**\n * Returns the programme name\n * @param  {Model} model model instance\n * @return {string}      name\n **/\nexport function getProgrammeName(model: Model): string {\n  const programme = getProgramme(model);\n  if (!programme.name) {\n    throw new InvalidModelError(\"Programme did not contain the 'name' attribute\");\n  } else if (typeof programme.name !== 'string') {\n    throw new InvalidModelError(\"The programme's 'name' attribute was not a string\");\n  }\n\n  return programme.name;\n}\n\n/**\n * Returns the programme mission\n * @param  {Model} model model instance\n * @return {string}      mission\n **/\nexport function getProgrammeMission(model: Model): string {\n  const programme = getProgramme(model);\n  if (typeof programme.mission !== 'string') {\n    throw new InvalidModelError(\"The programme's 'mission' attribute was not a string\");\n  }\n\n  return programme.mission;\n}\n\n/**\n * Returns the programme vision\n * @param  {Model} model model instance\n * @return {string}      vision\n **/\nexport function getProgrammeVision(model: Model): string {\n  const programme = getProgramme(model);\n  if (typeof programme.vision !== 'string') {\n    throw new InvalidModelError(\"The programme's 'vision' attribute was not a string\");\n  }\n\n  return programme.vision;\n}\n\n/**\n * Returns the programme unit of measure\n * @param  {Model} model model instance\n * @return {string}      unit of measure\n **/\nexport function getProgrammeUnitOfMeasure(model: Model): string {\n  const programme = getProgramme(model);\n  if (!programme.unitOfMeasure) {\n    throw new InvalidModelError(\"Programme did not contain the 'unitOfMeasure' attribute\");\n  } else if (typeof programme.unitOfMeasure !== 'string') {\n    throw new InvalidModelError(\"The programme's 'unitOfMeasure' attribute was not a string\");\n  }\n\n  return programme.unitOfMeasure;\n}\n\n/**\n * Returns the programme start\n * @param  {Model} model model instance\n * @return {string}      start\n **/\nexport function getProgrammeStart(model: Model): moment {\n  const programme = getProgramme(model);\n  if (!programme.start) {\n    throw new InvalidModelError(\"Programme did not contain the 'start' attribute\");\n  } else if (typeof programme.start !== 'string') {\n    throw new InvalidModelError(\"The programme's 'start' attribute was not a string\");\n  }\n\n  // Try to parse as moment\n  const date = moment(programme.start, DATE_FORMAT, true);\n\n  // If failed throw location-specific error\n  if (!date.isValid()) {\n    throw new InvalidModelError(\n      `The programme's 'start' attribute was not in valid date format ${DATE_FORMAT}`\n    );\n  }\n\n  return date;\n}\n\n/**\n * Returns the programme financial start\n * @param  {Model} model model instance\n * @return {string}      financial start\n **/\nexport function getProgrammeFinancialStart(model: Model): moment {\n  const programme = getProgramme(model);\n  if (!programme.financialStart) {\n    throw new InvalidModelError(\"Programme did not contain the 'financialStart' attribute\");\n  } else if (typeof programme.financialStart !== 'string') {\n    throw new InvalidModelError(\"The programme's 'financialStart' attribute was not a string\");\n  }\n\n  // Try to parse as moment\n  const date = moment(programme.financialStart, DATE_FORMAT, true);\n\n  // If failed throw location-specific error\n  if (!date.isValid()) {\n    throw new InvalidModelError(\n      `The programme's 'start' attribute was not in valid date format ${DATE_FORMAT}`\n    );\n  }\n\n  return date;\n}\n\n/**\n * Returns the programme scorecard start\n * @param  {Model} model model instance\n * @return {string}      scorecard start\n **/\nexport function getProgrammeScorecardStart(model: Model): moment {\n  const programme = getProgramme(model);\n  if (!programme.scorecardStart) {\n    throw new InvalidModelError(\"Programme did not contain the 'scorecardStart' attribute\");\n  } else if (typeof programme.scorecardStart !== 'string') {\n    throw new InvalidModelError(\"The programme's 'scorecardStart' attribute was not a string\");\n  }\n\n  // Try to parse as moment\n  const date = moment(programme.scorecardStart, DATE_FORMAT, true);\n\n  // If failed throw location-specific error\n  if (!date.isValid()) {\n    throw new InvalidModelError(\n      `The programme's 'start' attribute was not in valid date format ${DATE_FORMAT}`\n    );\n  }\n\n  return date;\n}\n\n/**\n * Returns the programme name\n * @param  {Model} model model instance\n * @param  {string} name new name\n * @return {Model}      updated model instance\n **/\nexport function setProgrammeName(model: Model, name: string): Model {\n  if (!name) {\n    throw new InvalidUpdateError('Name must be defined to update programme attribute');\n  } else if (typeof name !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the programme name to ${name} is invalid, name must be a string`\n    );\n  }\n\n  // Get the programme instance\n  const programme = getProgramme(model);\n\n  // Return new model instance with updated programme values\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        name,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme mission\n * @param  {Model} model model instance\n * @param  {string} mission new mission\n * @return {Model}      updated model instance\n **/\nexport function setProgrammeMission(model: Model, mission: string): Model {\n  if (!mission) {\n    throw new InvalidUpdateError('Mission must be defined to update programme attribute');\n  } else if (typeof mission !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the programme mission to ${mission} is invalid, mission must be a string`\n    );\n  }\n\n  // Get the programme instance\n  const programme = getProgramme(model);\n\n  // Return new model instance with updated programme values\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        mission,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme vision\n * @param  {Model} model model instance\n * @param  {string} vision new vision\n * @return {Model}      updated model instance\n **/\nexport function setProgrammeVision(model: Model, vision: string): Model {\n  if (!vision) {\n    throw new InvalidUpdateError('Vision must be defined to update programme attribute');\n  } else if (typeof vision !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the programme vision to ${vision} is invalid, vision must be a string`\n    );\n  }\n\n  // Get the programme instance\n  const programme = getProgramme(model);\n\n  // Return new model instance with updated programme values\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        vision,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme unit of measure\n * @param  {Model} model model instance\n * @param  {string} unitofmeasure new unit of measure\n * @return {string}      Modelof updated model instance\n **/\nexport function setProgrammeUnitOfMeasure(model: Model, unitOfMeasure: string): Model {\n  if (!unitOfMeasure) {\n    throw new InvalidUpdateError(\n      'Updating the Unit of measure must be defined to update programme attribute'\n    );\n  } else if (typeof unitOfMeasure !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the programme unit of measure to ${unitOfMeasure} is invalid, unit of measure must be a string`\n    );\n  }\n\n  // Get the programme instance\n  const programme = getProgramme(model);\n\n  // Update financial benefit units of measure\n  const benefits = getBenefits(model);\n  const newBenefits = benefits.map(benefit => {\n    if (\n      benefit.type === BENEFIT_TYPE_FINANCIAL &&\n      benefit.id !== model.programmes[0]._coreBenefits[2]\n    ) {\n      return {\n        ...benefit,\n        unitOfMeasure,\n      };\n    } else {\n      return benefit;\n    }\n  });\n\n  // Return new model instance with updated programme values\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        unitOfMeasure,\n        benefits: newBenefits,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme start\n * @param  {Model} model model instance\n * @return {string}      start\n **/\nexport function setProgrammeStart(model: Model, start: string): Model {\n  if (!start) {\n    throw new InvalidUpdateError('Cannot update programme start as it was not defined');\n  } else if (typeof start !== 'string') {\n    throw new InvalidUpdateError('New programme start was not a string');\n  }\n\n  // Try to parse as moment\n  const m = moment(start, DATE_FORMAT, true);\n  if (!m.isValid()) {\n    throw new InvalidUpdateError(`Provided start was not in correct date format ${DATE_FORMAT}`);\n  }\n\n  if (m.isBefore(getProgrammeFinancialStart(model))) {\n    throw new InvalidUpdateError('Provided start occured before the financial start');\n  } else if (m.isBefore(getProgrammeScorecardStart(model))) {\n    throw new InvalidUpdateError('Provided start occured before the scorecard start');\n  }\n\n  // Get Programme instance\n  const programme = getProgramme(model);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        start,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme financial start\n * @param  {Model} model model instance\n * @return {string}      financial start\n **/\nexport function setProgrammeFinancialStart(model: Model, financialStart: string): Model {\n  if (!financialStart) {\n    throw new InvalidUpdateError('Cannot update programme financial start as it was not defined');\n  } else if (typeof financialStart !== 'string') {\n    throw new InvalidUpdateError('New programme financial start was not a string');\n  }\n\n  // Try to parse as moment\n  const m = moment(financialStart, DATE_FORMAT, true);\n  if (!m.isValid()) {\n    throw new InvalidUpdateError(\n      `Provided financial start was not in correct date format ${DATE_FORMAT}`\n    );\n  }\n\n  if (m.isAfter(getProgrammeStart(model))) {\n    throw new InvalidUpdateError('Provided financial start occured after the programme start');\n  }\n\n  // Get Programme instance\n  const programme = getProgramme(model);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        financialStart,\n      },\n    ],\n  };\n}\n\n/**\n * Returns the programme scorecard start\n * @param  {Model} model model instance\n * @return {string}      scorecard start\n **/\nexport function setProgrammeScorecardStart(model: Model, scorecardStart: string): Model {\n  if (!scorecardStart) {\n    throw new InvalidUpdateError('Cannot update programme scorecard start as it was not defined');\n  } else if (typeof scorecardStart !== 'string') {\n    throw new InvalidUpdateError('New programme scorecard start was not a string');\n  }\n\n  // Try to parse as moment\n  const m = moment(scorecardStart, DATE_FORMAT, true);\n  if (!m.isValid()) {\n    throw new InvalidUpdateError(\n      `Provided scorecard start was not in correct date format ${DATE_FORMAT}`\n    );\n  }\n\n  if (m.isAfter(getProgrammeStart(model))) {\n    throw new InvalidUpdateError('Provided scorecard start occured after the programme start');\n  }\n\n  // Get Programme instance\n  const programme = getProgramme(model);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        scorecardStart,\n      },\n    ],\n  };\n}\n","// @flow\n// ID generator\nimport nanoId from 'nanoid';\n\n// Other model functions\nimport { getProgramme } from '../Programme';\nimport { updateThreadById } from '../Thread';\n\n// Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Beneficiary, BeneficiaryData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of beneficiaries from the programme instance\n * @param {Model} model model instance\n * @return {Array<Beneficiary>} array of beneficiaries\n **/\nexport function getBeneficiaries(model: Model): Array<Beneficiary> {\n  // Get programme instance\n  const programme = getProgramme(model);\n\n  // Throw an error if beneficiaries is not present or invalid\n  if (!programme.beneficiaries) {\n    throw new InvalidModelError('Programme did not contain an array of beneficiaries');\n  } else if (!Array.isArray(programme.beneficiaries)) {\n    throw new InvalidModelError(\"Programme 'beneficiaries' was not an array\");\n  }\n\n  // Return array\n  return programme.beneficiaries;\n}\n\n/**\n * Returns a specific beneficiary from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id beneficiary id\n * @return {Beneficiary} beneficiary with provided id\n **/\nexport function getBeneficiaryById(model: Model, id: string): Beneficiary {\n  // Retrieve all beneficiaries\n  const beneficiaries = getBeneficiaries(model);\n\n  // Try and find matching beneficiary\n  const found = beneficiaries.find(beneficiary => beneficiary.id === id);\n\n  // If beneficiary is not found, throw an error\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find beneficiary in programme with id ${id}`);\n  }\n\n  // Otherwise return found beneficiary\n  return found;\n}\n\nfunction checkBeneficiaryData(beneficiary: BeneficiaryData): boolean {\n  if (beneficiary.hasOwnProperty('name')) {\n    if (typeof beneficiary.name !== 'string' || beneficiary.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided beneficiary update value name was not a string (or it was empty)'\n      );\n    }\n  }\n\n  if (beneficiary.hasOwnProperty('owner')) {\n    if (typeof beneficiary.owner !== 'string') {\n      throw new InvalidUpdateError('Provided beneficiary update value owner was not a string');\n    }\n  }\n\n  if (beneficiary.hasOwnProperty('definition')) {\n    if (typeof beneficiary.definition !== 'string') {\n      throw new InvalidUpdateError('Provided beneficiary update value definition was not a string');\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns a new model instance with a new beneficiary (with data if provided)\n * @param {Model} model model instance\n * @param {BeneficiaryData} beneficiary optional beneficiary data to store as beneficiary\n * @return {Model} updated model instance\n */\nexport function newBeneficiary(model: Model, beneficiary?: BeneficiaryData, id: ?string): Model {\n  // Default new beneficiary\n  let beneficiaryData = {\n    id: id || nanoId(),\n    name: `New Beneficiary ${++newCount}`,\n    owner: '',\n    definition: '',\n  };\n\n  // If beneficiary data was supplied\n  if (beneficiary) {\n    // Check validity of beneficiary data\n    checkBeneficiaryData(beneficiary);\n\n    // Override default beneficiary data\n    beneficiaryData = { ...beneficiaryData, ...beneficiary };\n  }\n\n  // Retrieve programme\n  const programme = getProgramme(model);\n\n  // Define new beneficiaries array\n  const newBeneficiaries = [...programme.beneficiaries, beneficiaryData];\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        beneficiaries: newBeneficiaries,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a beneficiary with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id beneficiary id\n * @returns {Model} updated model instance\n */\nexport function removeBeneficiaryById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'null'\n): Model {\n  // Retrieve beneficiary to check it exists\n  getBeneficiaryById(model, id);\n\n  // Define a new model to store updated cause and effect\n  let modifiedModel;\n\n  // Retrieve cause and effect from programme\n  const { causeAndEffect } = getProgramme(model);\n\n  // Update cause and effects\n  switch (onDelete) {\n    // Update threads with null value\n    case 'null':\n      modifiedModel = causeAndEffect\n        .filter(thread => thread.beneficiaryId === id)\n        .reduce(\n          (acc, cur) =>\n            updateThreadById(acc, cur.id, {\n              beneficiaryId: 'none',\n            }),\n          model\n        );\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when removing beneficiary');\n  }\n\n  // Return modified model with beneficiary removed\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        beneficiaries: modifiedModel.programmes[0].beneficiaries.filter(b => b.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a beneficiary's attributes by id\n * @param {Model} model model instance\n * @param {string} id beneficiary id\n * @param {BeneficiaryData} beneficiary new beneficiary\n * @return {Model} updated model instance\n */\nexport function updateBeneficiaryById(\n  model: Model,\n  id: string,\n  beneficiary: BeneficiaryData\n): Model {\n  // Retrieve existing beneficiary to check it exists\n  getBeneficiaryById(model, id);\n\n  // Check validity of data\n  checkBeneficiaryData(beneficiary);\n\n  // Updated beneficiary array\n  const updatedBeneficiaries = model.programmes[0].beneficiaries.map(b => {\n    if (b.id === id) {\n      return {\n        ...b,\n        name: beneficiary.hasOwnProperty('name') ? beneficiary.name : b.name,\n        owner: beneficiary.hasOwnProperty('owner') ? beneficiary.owner : b.owner,\n        definition: beneficiary.hasOwnProperty('definition')\n          ? beneficiary.definition\n          : b.definition,\n      };\n    }\n    return b;\n  });\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        beneficiaries: updatedBeneficiaries,\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { updateThreadById } from '../Thread';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Group, GroupData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of groups from the programme instance\n * @param {Model} model model instance\n * @return {Array<Group>} array of groups\n **/\nexport function getGroups(model: Model): Array<Group> {\n  const programme = getProgramme(model);\n  if (!programme.groups) {\n    throw new InvalidModelError('Programme did not contain an array of groups');\n  } else if (!Array.isArray(programme.groups)) {\n    throw new InvalidModelError(\"Programme 'groups' was not an array\");\n  }\n  return programme.groups;\n}\n\n/**\n * Returns a specific group from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id group id\n * @return {Group} group with provided id\n **/\nexport function getGroupById(model: Model, id: string): Group {\n  const groups = getGroups(model);\n  const found = groups.find(group => group.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find group in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkGroupData(group: GroupData): boolean {\n  if (group.hasOwnProperty('name')) {\n    if (typeof group.name !== 'string' || group.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided group update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (group.hasOwnProperty('definition')) {\n    if (typeof group.definition !== 'string') {\n      throw new InvalidUpdateError('Provided group update value definition was not a string ');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new group (with data if provided)\n * @param {Model} model model instance\n * @param {GroupData} group optional group data to store as group\n * @return {Model} updated model instance\n */\nexport function newGroup(model: Model, group?: GroupData, id?: string): Model {\n  // Default new group\n  let groupData = {\n    id: id || nanoId(),\n    name: `New Group ${++newCount}`,\n    definition: '',\n  };\n\n  if (group) {\n    // Check validity of group data\n    checkGroupData(group);\n\n    // Override default group data\n    groupData = { ...groupData, ...group };\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        groups: [...model.programmes[0].groups, groupData],\n      },\n    ],\n  };\n}\n\n/**\n * Removes a group with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id group id\n * @returns {Model} updated model instance\n */\nexport function removeGroupById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'null'\n): Model {\n  if (!model.programmes[0].groups.find(g => g.id === id)) {\n    throw new InconsistentArgumentError(\n      `No group with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cause and effects\n  let modifiedModel;\n  switch (onDelete) {\n    case 'null':\n      const { causeAndEffect } = getProgramme(model);\n      modifiedModel = causeAndEffect\n        .filter(t => t.groupId === id)\n        .reduce((acc, cur) => updateThreadById(acc, cur.id, { groupId: 'none' }), model);\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when removing group');\n  }\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        groups: modifiedModel.programmes[0].groups.filter(g => g.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a group's attributes by id\n * @param {Model} model model instance\n * @param {string} id group id\n * @param {GroupData} group new group\n * @return {Model} updated model instance\n */\nexport function updateGroupById(model: Model, id: string, group: GroupData): Model {\n  const found = model.programmes[0].groups.find(g => g.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No group with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkGroupData(group);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        groups: model.programmes[0].groups.map(g =>\n          g.id === id\n            ? {\n                ...g,\n                name: group.hasOwnProperty('name') ? group.name : g.name,\n                definition: group.hasOwnProperty('definition') ? group.definition : g.definition,\n              }\n            : g),\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { updateObjectiveById } from '../Objective';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Perspective, PerspectiveData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of perspectives from the programme instance\n * @param {Model} model model instance\n * @return {Array<Perspective>} array of perspectives\n **/\nexport function getPerspectives(model: Model): Array<Perspective> {\n  const programme = getProgramme(model);\n  if (!programme.perspectives) {\n    throw new InvalidModelError('Programme did not contain an array of perspectives');\n  } else if (!Array.isArray(programme.perspectives)) {\n    throw new InvalidModelError(\"Programme 'perspectives' was not an array\");\n  }\n  return programme.perspectives;\n}\n\n/**\n * Returns a specific perspective from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id perspective id\n * @return {Perspective} perspective with provided id\n **/\nexport function getPerspectiveById(model: Model, id: string): Perspective {\n  const perspectives = getPerspectives(model);\n  const found = perspectives.find(perspective => perspective.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find perspective in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkPerspectiveData(perspective: PerspectiveData): boolean {\n  if (perspective.hasOwnProperty('name')) {\n    if (typeof perspective.name !== 'string' || perspective.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided perspective update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (perspective.hasOwnProperty('weighting')) {\n    if (\n      typeof perspective.weighting !== 'number' ||\n      Number.isNaN(perspective.weighting) ||\n      perspective.weighting < 0\n    ) {\n      throw new InvalidUpdateError(\n        'Provided perspective update value weighting was not a number (or it was negative)'\n      );\n    }\n  }\n  if (perspective.hasOwnProperty('definition')) {\n    if (typeof perspective.definition !== 'string') {\n      throw new InvalidUpdateError('Provided perspective update value definition was not a string');\n    }\n  }\n  return true;\n}\n\nfunction checkTotalWeighting(perspectives: Array<Perspective>, newWeighting: number) {\n  // Calculate current total weighting\n  const currentSum = perspectives.reduce((acc, cur) => cur.weighting + acc, 0);\n\n  // Throw error if new perspective will create invalid weights\n  if (currentSum + newWeighting > 1) {\n    throw new InvalidUpdateError(\n      'New/changed perspective would yield a total weighting greater than 1'\n    );\n  }\n}\n\n/**\n * Returns a new model instance with a new perspective (with data if provided)\n * @param {Model} model model instance\n * @param {PerspectiveData} perspective optional perspective data to store as perspective\n * @return {Model} updated model instance\n */\nexport function newPerspective(model: Model, perspective?: PerspectiveData, id?: string): Model {\n  // Default new perspective\n  let perspectiveData = {\n    id: id || nanoId(),\n    name: `New Perspective ${++newCount}`,\n    weighting: 0,\n    definition: '',\n  };\n\n  if (perspective) {\n    // Check validity of perspective data\n    checkPerspectiveData(perspective);\n\n    // Override default perspective data\n    perspectiveData = { ...perspectiveData, ...perspective };\n\n    // Check total weighting without new perspective\n    checkTotalWeighting(model.programmes[0].perspectives, perspectiveData.weighting);\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        perspectives: [...model.programmes[0].perspectives, perspectiveData],\n      },\n    ],\n  };\n}\n\n/**\n * Removes a perspective with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id perspective id\n * @returns {Model} updated model instance\n */\nexport function removePerspectiveById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'null'\n): Model {\n  if (!model.programmes[0].perspectives.find(p => p.id === id)) {\n    throw new InconsistentArgumentError(\n      `No perspective with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update objectives\n  const { objectives } = getProgramme(model);\n  let modifiedModel;\n  switch (onDelete) {\n    case 'null':\n      modifiedModel = objectives\n        .filter(o => o.perspectiveId === id)\n        .reduce(\n          (acc, cur) =>\n            updateObjectiveById(acc, cur.id, {\n              perspectiveId: 'none',\n            }),\n          model\n        );\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when deleting objective');\n  }\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        perspectives: modifiedModel.programmes[0].perspectives.filter(p => p.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a perspective's attributes by id\n * @param {Model} model model instance\n * @param {string} id perspective id\n * @param {PerspectiveData} perspective new perspective\n * @return {Model} updated model instance\n */\nexport function updatePerspectiveById(\n  model: Model,\n  id: string,\n  perspective: PerspectiveData\n): Model {\n  const found = model.programmes[0].perspectives.find(p => p.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No perspective with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkPerspectiveData(perspective);\n\n  // Check total weights\n  checkTotalWeighting(model.programmes[0].perspectives, perspective.weighting);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        perspectives: model.programmes[0].perspectives.map(p =>\n          p.id === id\n            ? {\n                ...p,\n                name: perspective.hasOwnProperty('name') ? perspective.name : p.name,\n                weighting: perspective.hasOwnProperty('weighting')\n                  ? perspective.weighting\n                  : p.weighting,\n                definition: perspective.hasOwnProperty('definition')\n                  ? perspective.definition\n                  : p.definition,\n              }\n            : p),\n      },\n    ],\n  };\n}\n","// @flow\nimport nanoId from 'nanoid';\n\nimport { getProgramme } from '../Programme';\nimport { getPerspectives } from '../Perspective';\nimport { updateMeasureById } from '../Measure';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Objective, ObjectiveData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of objectives from the programme instance\n * @param {Model} model model instance\n * @return {Array<Objective>} array of objectives\n **/\nexport function getObjectives(model: Model): Array<Objective> {\n  const programme = getProgramme(model);\n  if (!programme.objectives) {\n    throw new InvalidModelError('Programme did not contain an array of objectives');\n  } else if (!Array.isArray(programme.objectives)) {\n    throw new InvalidModelError(\"Programme 'objectives' was not an array\");\n  }\n  return programme.objectives;\n}\n\n/**\n * Returns a specific objective from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id objective id\n * @return {Objective} objective with provided id\n **/\nexport function getObjectiveById(model: Model, id: string): Objective {\n  const objectives = getObjectives(model);\n  const found = objectives.find(objective => objective.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find objective in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkObjectiveData(objective: ObjectiveData, model: Model): boolean {\n  if (objective.hasOwnProperty('name')) {\n    if (typeof objective.name !== 'string' || objective.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided objective update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (objective.hasOwnProperty('perspectiveId')) {\n    if (typeof objective.perspectiveId !== 'string' || objective.perspectiveId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided objective update value perspectiveId was not a string (or it was empty)'\n      );\n    }\n\n    if (objective.perspectiveId !== 'none') {\n      const found = getPerspectives(model).find(\n        perspective => perspective.id === objective.perspectiveId\n      );\n\n      if (!found) {\n        throw new InvalidUpdateError(\n          'Provided objective perspective id referenced non-existent perspective'\n        );\n      }\n    }\n  }\n  if (objective.hasOwnProperty('weighting')) {\n    if (typeof objective.weighting !== 'number' || Number.isNaN(objective.weighting)) {\n      throw new InvalidUpdateError('Provided objective update value weighting was not a number');\n    }\n  }\n  if (objective.hasOwnProperty('owner')) {\n    if (typeof objective.owner !== 'string') {\n      throw new InvalidUpdateError('Provided objective update value owner was not a string');\n    }\n  }\n  if (objective.hasOwnProperty('definition')) {\n    if (typeof objective.definition !== 'string') {\n      throw new InvalidUpdateError('Provided objective update value definition was not a string');\n    }\n  }\n  return true;\n}\n\nfunction checkTotalWeighting(model: Model, perspectiveId: string, weighting: number) {\n  const applicableObjectives = model.programmes[0].objectives.filter(\n    objective => objective.perspectiveId === perspectiveId\n  );\n  const currentTotalWeighting = applicableObjectives.reduce((acc, cur) => cur.weighting + acc, 0);\n\n  if (currentTotalWeighting + weighting > 1) {\n    throw new InvalidUpdateError(\n      'New/changed measure would yield a total weighting for objective greater than 1'\n    );\n  }\n}\n/**\n * Returns a new model instance with a new objective (with data if provided)\n * @param {Model} model model instance\n * @param {ObjectiveData} objective optional objective data to store as objective\n * @return {Model} updated model instance\n */\nexport function newObjective(model: Model, objective?: ObjectiveData, id?: string): Model {\n  // Default new objective\n  let objectiveData = {\n    id: id || nanoId(),\n    name: `New Objective ${++newCount}`,\n    perspectiveId: getPerspectives(model)[0].id,\n    weighting: 0,\n    owner: '',\n    definition: '',\n  };\n\n  if (objective) {\n    // Check validity of objective data\n    checkObjectiveData(objective, model);\n\n    // Override default objective data\n    objectiveData = { ...objectiveData, ...objective };\n\n    checkTotalWeighting(model, objectiveData.perspectiveId, objectiveData.weighting);\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        objectives: [...model.programmes[0].objectives, objectiveData],\n      },\n    ],\n  };\n}\n\n/**\n * Removes a objective with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id objective id\n * @returns {Model} updated model instance\n */\nexport function removeObjectiveById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'null'\n): Model {\n  if (!model.programmes[0].objectives.find(o => o.id === id)) {\n    throw new InconsistentArgumentError(\n      `No objective with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update measures\n  const { measures } = getProgramme(model);\n  let modifiedModel;\n  switch (onDelete) {\n    case 'null':\n      modifiedModel = measures\n        .filter(m => m.objectiveId === id)\n        .reduce((acc, cur) => updateMeasureById(acc, cur.id, { objectiveId: 'none' }), model);\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when deleting objective');\n  }\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        objectives: modifiedModel.programmes[0].objectives.filter(o => o.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a objective's attributes by id\n * @param {Model} model model instance\n * @param {string} id objective id\n * @param {ObjectiveData} objective new objective\n * @return {Model} updated model instance\n */\nexport function updateObjectiveById(model: Model, id: string, objective: ObjectiveData): Model {\n  // Retrieve existing objective to update\n  const existingObjective = getObjectiveById(model, id);\n\n  // Check validity of data\n  checkObjectiveData(objective, model);\n\n  // Determine perspective id and weighting\n  const perspectiveId = objective.perspectiveId || existingObjective.perspectiveId;\n  const weighting =\n    objective.weighting === 0 ? 0 : objective.weighting || existingObjective.weighting;\n\n  // Confirm total weighting is within bounds\n  checkTotalWeighting(model, perspectiveId, weighting);\n\n  // Update measure\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        objectives: model.programmes[0].objectives.map(o =>\n          o.id === id\n            ? {\n                ...o,\n                name: objective.hasOwnProperty('name') ? objective.name : o.name,\n                perspectiveId: objective.hasOwnProperty('perspectiveId')\n                  ? objective.perspectiveId\n                  : o.perspectiveId,\n                weighting: objective.hasOwnProperty('weighting')\n                  ? objective.weighting\n                  : o.weighting,\n                owner: objective.hasOwnProperty('owner') ? objective.owner : o.owner,\n                definition: objective.hasOwnProperty('definition')\n                  ? objective.definition\n                  : o.definition,\n              }\n            : o),\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// Date Time Library\nimport moment from 'moment';\n\n// API Functions\nimport { getProgramme, getProgrammeStart, getProgrammeUnitOfMeasure } from '../Programme';\nimport { updateThreadById, getThreadById } from '../Thread';\nimport { getObjectives } from '../Objective';\nimport { getPhases } from '../Phase';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Constants\nimport { DATE_FORMAT } from '../../../../config/constants';\n\n// Flow Types\nimport type { Measure, MeasureData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of measure from the programme instance\n * @param {Model} model model instance\n * @return {Array<Measure>} array of measure\n **/\nexport function getMeasures(model: Model): Array<Measure> {\n  const programme = getProgramme(model);\n  if (!programme.measures) {\n    throw new InvalidModelError('Programme did not contain an array of measure');\n  } else if (!Array.isArray(programme.measures)) {\n    throw new InvalidModelError(\"Programme 'measure' was not an array\");\n  }\n  return programme.measures;\n}\n\n/**\n * Returns a specific measure from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id measure id\n * @return {Measure} measure with provided id\n **/\nexport function getMeasureById(model: Model, id: string): Measure {\n  const measures = getMeasures(model);\n  const found = measures.find(measure => measure.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find measure in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkMeasureData(measure: MeasureData): boolean {\n  if (measure.hasOwnProperty('name')) {\n    if (typeof measure.name !== 'string' || measure.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided measure update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (measure.hasOwnProperty('objectiveId')) {\n    if (typeof measure.objectiveId !== 'string' || measure.objectiveId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided measure update value objectiveId was not a string (or it was empty)'\n      );\n    }\n  }\n  if (measure.hasOwnProperty('weighting')) {\n    if (\n      typeof measure.weighting !== 'number' ||\n      Number.isNaN(measure.weighting) ||\n      measure.weighting < 0\n    ) {\n      throw new InvalidUpdateError(\n        'Provided measure update value weighting was not a number (or was negative)'\n      );\n    } else if (measure.weighting > 1) {\n      throw new InvalidUpdateError('Provided measure update value weighting was greater than 1');\n    }\n  }\n  if (measure.hasOwnProperty('dataOwner')) {\n    if (typeof measure.dataOwner !== 'string') {\n      throw new InvalidUpdateError('Provided measure update value dataOwner was not a string');\n    }\n  }\n  if (measure.hasOwnProperty('definition')) {\n    if (typeof measure.definition !== 'string') {\n      throw new InvalidUpdateError('Provided measure update value definition was not a string');\n    }\n  }\n  if (measure.hasOwnProperty('unitOfMeasure')) {\n    if (typeof measure.unitOfMeasure !== 'string') {\n      throw new InvalidUpdateError('Provided measure update value unitOfMeasure was not a string');\n    }\n  }\n  if (measure.hasOwnProperty('baselineStart')) {\n    if (\n      typeof measure.baselineStart !== 'string' ||\n      !moment(measure.baselineStart, DATE_FORMAT, true).isValid()\n    ) {\n      throw new InvalidUpdateError(\n        'Provided measure update value baselineStart was not a string or it was not in valid date format'\n      );\n    }\n  }\n  if (measure.hasOwnProperty('baselineComplete')) {\n    if (\n      typeof measure.baselineComplete !== 'string' ||\n      !moment(measure.baselineComplete, DATE_FORMAT, true).isValid()\n    ) {\n      throw new InvalidUpdateError(\n        'Provided measure update value baselineComplete was not a string or it was not in valid date format'\n      );\n    }\n  }\n  if (measure.hasOwnProperty('baselineValue')) {\n    if (typeof measure.baselineValue !== 'number' || Number.isNaN(measure.baselineValue)) {\n      throw new InvalidUpdateError('Provided measure update value baselineValue was not a number');\n    }\n  }\n  if (measure.hasOwnProperty('change')) {\n    if (typeof measure.change !== 'number' || Number.isNaN(measure.change)) {\n      throw new InvalidUpdateError('Provided measure update value change was not a number');\n    }\n  }\n  if (measure.hasOwnProperty('best')) {\n    if (typeof measure.best !== 'number' || Number.isNaN(measure.best)) {\n      throw new InvalidUpdateError('Provided measure update value best was not a number');\n    }\n  }\n  if (measure.hasOwnProperty('worst')) {\n    if (typeof measure.worst !== 'number' || Number.isNaN(measure.worst)) {\n      throw new InvalidUpdateError('Provided measure update value worst was not a number');\n    }\n  }\n  if (measure.hasOwnProperty('standard')) {\n    if (typeof measure.standard !== 'number' || Number.isNaN(measure.standard)) {\n      throw new InvalidUpdateError('Provided measure update value standard was not a number');\n    }\n  }\n  if (measure.hasOwnProperty('minimumStandard')) {\n    if (typeof measure.minimumStandard !== 'number' || Number.isNaN(measure.minimumStandard)) {\n      throw new InvalidUpdateError(\n        'Provided measure update value minimumStandard was not a number'\n      );\n    }\n  }\n  return true;\n}\n\nfunction checkTotalWeighting(model: Model, objectiveId: string, weighting: number) {\n  const applicableMeasures = model.programmes[0].measures.filter(\n    measure => measure.objectiveId === objectiveId\n  );\n  const currentTotalWeighting = applicableMeasures.reduce((acc, cur) => cur.weighting + acc, 0);\n\n  if (currentTotalWeighting + weighting > 1) {\n    throw new InvalidUpdateError(\n      'New/changed measure would yield a total weighting for objective greater than 1'\n    );\n  }\n}\n\n/**\n * Returns a new model instance with a new measure (with data if provided)\n * @param {Model} model model instance\n * @param {MeasureData} measure optional measure data to store as measure\n * @return {Model} updated model instance\n */\nexport function newMeasure(model: Model, measure?: MeasureData, id?: string): Model {\n  const newMeasureId = id || nanoId();\n\n  // Default new measure\n  let measureData = {\n    id: newMeasureId,\n    name: `New Measure ${++newCount}`,\n    objectiveId: getObjectives(model)[0].id,\n    weighting: 0,\n    dataOwner: '',\n    unitOfMeasure: getProgrammeUnitOfMeasure(model),\n    baselineStart: getProgrammeStart(model).format(DATE_FORMAT),\n    baselineComplete: getPhases(model)\n      .reduce(\n        (acc, cur) => (moment(cur.start).isAfter(acc) ? moment(cur.start) : acc),\n        getProgrammeStart(model)\n      )\n      .add(1, 'year')\n      .format(DATE_FORMAT),\n    baselineValue: 0,\n    change: 0,\n    best: 0,\n    worst: 0,\n    standard: 0,\n    minimumStandard: 0,\n    definition: '',\n  };\n\n  if (measure) {\n    // Check validity of measure data\n    checkMeasureData(measure);\n\n    // Override default measure data\n    measureData = { ...measureData, ...measure };\n\n    checkTotalWeighting(model, measureData.objectiveId, measureData.weighting);\n  }\n\n  const { balancedScorecard } = getProgramme(model);\n  const newBalancedScorecard = balancedScorecard.map(item => {\n    return {\n      ...item,\n      values: [\n        ...item.values,\n        {\n          id: newMeasureId,\n          value: measureData.baselineValue,\n        },\n      ],\n    };\n  });\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        measures: [...model.programmes[0].measures, measureData],\n        balancedScorecard: newBalancedScorecard,\n      },\n    ],\n  };\n}\n\nfunction escapeRegExp(regexString) {\n  return regexString.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport function replaceMeasureNames(\n  measure: Measure,\n  equation: string,\n  type: 'rename' | 'delete',\n  newName?: string\n) {\n  const standardVariable = `ms_${measure.name.replace(/ /gi, '_')}`;\n  const baselineVariable = `mb_${measure.name.replace(/ /gi, '_')}`;\n  const changeVariable = `mc_${measure.name.replace(/ /gi, '_')}`;\n\n  const standardRegex = new RegExp(escapeRegExp(standardVariable), 'g');\n  const baselineRegex = new RegExp(escapeRegExp(baselineVariable), 'g');\n  const changeRegex = new RegExp(escapeRegExp(changeVariable), 'g');\n\n  let newEquation;\n  if (type === 'rename' && newName) {\n    const newVariableName = newName.replace(/ /gi, '_');\n\n    newEquation = equation.replace(standardRegex, `ms_${newVariableName}`);\n    newEquation = newEquation.replace(baselineRegex, `mb_${newVariableName}`);\n    newEquation = newEquation.replace(changeRegex, `mc_${newVariableName}`);\n  } else if (type === 'delete') {\n    const { standard, baselineValue, change } = measure;\n\n    newEquation = equation.replace(standardRegex, `${standard}`);\n    newEquation = newEquation.replace(baselineRegex, `${baselineValue}`);\n    newEquation = newEquation.replace(changeRegex, `${change}`);\n  } else {\n    throw new InconsistentArgumentError('Unknown measure thread update type');\n  }\n  return newEquation;\n}\n\n/**\n * Removes a measure with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id measure id\n * @returns {Model} updated model instance\n */\nexport function removeMeasureById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'null'\n): Model {\n  const found = model.programmes[0].measures.find(m => m.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No measure with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cause and effects\n  let modifiedModel;\n  switch (onDelete) {\n    case 'null':\n      const { causeAndEffect } = getProgramme(model);\n      modifiedModel = causeAndEffect\n        .filter(t => t.measureId === id)\n        .reduce((acc, cur) => updateThreadById(acc, cur.id, { measureId: 'none' }), model);\n      modifiedModel = causeAndEffect.reduce(\n        (acc, cur) =>\n          updateThreadById(acc, cur.id, {\n            equation: replaceMeasureNames(found, getThreadById(acc, cur.id).equation, 'delete'),\n          }),\n        modifiedModel\n      );\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when removing measure');\n  }\n\n  // Update balanced scorecard\n  const { balancedScorecard } = getProgramme(model);\n  const newBalancedScorecard = balancedScorecard.map(item => {\n    return {\n      ...item,\n      values: item.values.filter(entry => entry.id !== id),\n    };\n  });\n\n  // Update themes\n  const { themes } = getProgramme(model);\n  const newThemes = themes.map(theme => {\n    return {\n      ...theme,\n      measures: theme.measures.filter(measureId => measureId !== id),\n    };\n  });\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        measures: modifiedModel.programmes[0].measures.filter(m => m.id !== id),\n        balancedScorecard: newBalancedScorecard,\n        themes: newThemes,\n      },\n    ],\n  };\n}\n\n/**\n * Sets a measure's attributes by id\n * @param {Model} model model instance\n * @param {string} id measure id\n * @param {MeasureData} measure new measure\n * @return {Model} updated model instance\n */\nexport function updateMeasureById(model: Model, id: string, measure: MeasureData): Model {\n  // Find the existing measure to update\n  const existingMeasure = getMeasureById(model, id);\n\n  // Get either new or existing objective id and weighting\n  const objectiveId = measure.objectiveId || existingMeasure.objectiveId;\n  const weighting = measure.weighting === 0 ? 0 : measure.weighting || existingMeasure.weighting;\n\n  // Check validity of data\n  checkMeasureData(measure);\n  checkTotalWeighting(model, objectiveId, weighting);\n\n  // Ensure an objective exists if updating objective id\n  if (measure.hasOwnProperty('objectiveId') && measure.objectiveId !== 'none') {\n    const foundObjective = model.programmes[0].objectives.find(o => o.id === measure.objectiveId);\n    if (!foundObjective) {\n      throw new InvalidUpdateError('Tried to update measure with objective which does not exist');\n    }\n  }\n\n  // Retrieve cause and effect to update threads\n  const { causeAndEffect } = getProgramme(model);\n\n  // Define a modified model\n  let modifiedModel = model;\n\n  // Update equation variables if measure name has changed\n  if (measure.hasOwnProperty('name') && measure.name !== existingMeasure.name) {\n    // Iteratively update model\n    modifiedModel = causeAndEffect.reduce((acc, cur) => {\n      // Determine new equation\n      const newEquation = replaceMeasureNames(\n        existingMeasure,\n        getThreadById(acc, cur.id).equation,\n        'rename',\n        measure.name\n      );\n\n      // Return update model as accumulator\n      return updateThreadById(acc, cur.id, { equation: newEquation });\n    }, model);\n  }\n\n  // Update measure details with modified model\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        measures: modifiedModel.programmes[0].measures.map(m =>\n          m.id === id\n            ? {\n                ...m,\n                name: measure.hasOwnProperty('name') ? measure.name : m.name,\n                objectiveId: measure.hasOwnProperty('objectiveId')\n                  ? measure.objectiveId\n                  : m.objectiveId,\n                weighting: measure.hasOwnProperty('weighting') ? measure.weighting : m.weighting,\n                dataOwner: measure.hasOwnProperty('dataOwner') ? measure.dataOwner : m.dataOwner,\n                unitOfMeasure: measure.hasOwnProperty('unitOfMeasure')\n                  ? measure.unitOfMeasure\n                  : m.unitOfMeasure,\n                baselineStart: measure.hasOwnProperty('baselineStart')\n                  ? measure.baselineStart\n                  : m.baselineStart,\n                baselineComplete: measure.hasOwnProperty('baselineComplete')\n                  ? measure.baselineComplete\n                  : m.baselineComplete,\n                baselineValue: measure.hasOwnProperty('baselineValue')\n                  ? measure.baselineValue\n                  : m.baselineValue,\n                best: measure.hasOwnProperty('best') ? measure.best : m.best,\n                worst: measure.hasOwnProperty('worst') ? measure.worst : m.worst,\n                standard: measure.hasOwnProperty('standard') ? measure.standard : m.standard,\n                minimumStandard: measure.hasOwnProperty('minimumStandard')\n                  ? measure.minimumStandard\n                  : m.minimumStandard,\n                change: measure.hasOwnProperty('change') ? measure.change : m.change,\n                definition: measure.hasOwnProperty('definition')\n                  ? measure.definition\n                  : m.definition,\n              }\n            : m),\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getBenefits } from '../Benefit';\nimport { removeThreadById } from '../Thread';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Stakeholder, StakeholderData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of stakeholders from the programme instance\n * @param {Model} model model instance\n * @return {Array<Stakeholder>} array of stakeholders\n **/\nexport function getStakeholders(model: Model): Array<Stakeholder> {\n  const programme = getProgramme(model);\n  if (!programme.stakeholders) {\n    throw new InvalidModelError('Programme did not contain an array of stakeholders');\n  } else if (!Array.isArray(programme.stakeholders)) {\n    throw new InvalidModelError(\"Programme 'stakeholders' was not an array\");\n  }\n  return programme.stakeholders;\n}\n\n/**\n * Returns a specific stakeholder from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id stakeholder id\n * @return {Stakeholder} stakeholder with provided id\n **/\nexport function getStakeholderById(model: Model, id: string): Stakeholder {\n  const stakeholders = getStakeholders(model);\n  const found = stakeholders.find(stakeholder => stakeholder.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find stakeholder in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkStakeholderData(stakeholder: StakeholderData): boolean {\n  if (stakeholder.hasOwnProperty('name')) {\n    if (typeof stakeholder.name !== 'string' || stakeholder.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided stakeholder update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (stakeholder.hasOwnProperty('owner')) {\n    if (typeof stakeholder.owner !== 'string') {\n      throw new InvalidUpdateError('Provided stakeholder update value owner was not a string');\n    }\n  }\n  if (stakeholder.hasOwnProperty('budgetRef')) {\n    if (typeof stakeholder.budgetRef !== 'string') {\n      throw new InvalidUpdateError('Provided stakeholder update value budgetRef was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new stakeholder (with data if provided)\n * @param {Model} model model instance\n * @param {StakeholderData} stakeholder optional stakeholder data to store as stakeholder\n * @return {Model} updated model instance\n */\nexport function newStakeholder(model: Model, stakeholder?: StakeholderData, id?: string): Model {\n  // Create new stakeholder id\n  const newStakeholderId = id || nanoId();\n\n  // Default new stakeholder\n  let stakeholderData = {\n    id: newStakeholderId,\n    name: `New Stakeholder ${++newCount}`,\n    owner: '',\n    budgetRef: '',\n  };\n\n  if (stakeholder) {\n    // Check validity of stakeholder data\n    checkStakeholderData(stakeholder);\n\n    // Override default stakeholder data\n    stakeholderData = { ...stakeholderData, ...stakeholder };\n  }\n\n  // Update benefit attribution, cost attribution, and benefit buildup\n  const { stakeholderBenefits } = getProgramme(model);\n  const benefits = getBenefits(model);\n\n  const newStakeholderBenefits = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = {\n      ...stakeholderBenefits[benefit.id],\n      [newStakeholderId]: 0,\n    };\n    return acc;\n  }, {});\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        stakeholders: [...model.programmes[0].stakeholders, stakeholderData],\n        stakeholderBenefits: newStakeholderBenefits,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a stakeholder with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id stakeholder id\n * @returns {Model} updated model instance\n */\nexport function removeStakeholderById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'cascade'\n): Model {\n  if (!model.programmes[0].stakeholders.find(s => s.id === id)) {\n    throw new InconsistentArgumentError(\n      `No stakeholder with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cause and effects\n  let modifiedModel;\n  switch (onDelete) {\n    case 'cascade':\n      const { causeAndEffect } = getProgramme(model);\n      modifiedModel = causeAndEffect\n        .filter(t => t.stakeholderId === id)\n        .reduce((acc, cur) => removeThreadById(acc, cur.id), model);\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when removing stakeholder');\n  }\n\n  // Update stakeholder benefits\n  const updatedStakeholders = getStakeholders(model).filter(s => s.id !== id);\n  const { stakeholderBenefits, benefits } = getProgramme(model);\n  const newStakeholderBenefits = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = updatedStakeholders.reduce((acc, stakeholder) => {\n      acc[stakeholder.id] = stakeholderBenefits[benefit.id][stakeholder.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        stakeholders: modifiedModel.programmes[0].stakeholders.filter(s => s.id !== id),\n        stakeholderBenefits: newStakeholderBenefits,\n      },\n    ],\n  };\n}\n\n/**\n * Sets a stakeholder's attributes by id\n * @param {Model} model model instance\n * @param {string} id stakeholder id\n * @param {StakeholderData} stakeholder new stakeholder\n * @return {Model} updated model instance\n */\nexport function updateStakeholderById(\n  model: Model,\n  id: string,\n  stakeholder: StakeholderData\n): Model {\n  const found = model.programmes[0].stakeholders.find(s => s.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No stakeholder with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkStakeholderData(stakeholder);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        stakeholders: model.programmes[0].stakeholders.map(s =>\n          s.id === id\n            ? {\n                ...s,\n                name: stakeholder.hasOwnProperty('name') ? stakeholder.name : s.name,\n                owner: stakeholder.hasOwnProperty('owner') ? stakeholder.owner : s.owner,\n                budgetRef: stakeholder.hasOwnProperty('budgetRef')\n                  ? stakeholder.budgetRef\n                  : s.budgetRef,\n              }\n            : s),\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// Evaluator function\nimport safeEval from 'safe-eval';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getBeneficiaries } from '../Beneficiary';\nimport { getGroups } from '../Group';\nimport { getBenefits } from '../Benefit';\nimport { getDeliverables } from '../Deliverable';\nimport { getMeasures } from '../Measure';\nimport { getStakeholders } from '../Stakeholder';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Reference Generator\nimport { nextRef } from '../../../../utils/utils';\n\n// Constants\nimport {\n  PARAMETER_CHANGE_TYPE_ARITHMETIC,\n  PARAMETER_CHANGE_TYPE_GEOMETRIC,\n} from '../../../../config/constants';\n\n// Flow Types\nimport type { Thread, ThreadData, Model } from '../../types';\n\n/**\n * Returns the array of threads from the programme instance\n * @param {Model} model model instance\n * @return {Array<Thread>} array of threads\n **/\nexport function getThreads(model: Model): Array<Thread> {\n  const programme = getProgramme(model);\n  if (!programme.causeAndEffect) {\n    throw new InvalidModelError('Programme did not contain an array of threads');\n  } else if (!Array.isArray(programme.causeAndEffect)) {\n    throw new InvalidModelError(\"Programme 'causeAndEffect' was not an array\");\n  }\n  return programme.causeAndEffect;\n}\n\n/**\n * Returns a specific thread from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id thread id\n * @return {Thread} thread with provided id\n **/\nexport function getThreadById(model: Model, id: string): Thread {\n  const threads = getThreads(model);\n  const found = threads.find(thread => thread.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find thread in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkThreadData(thread: ThreadData, model: Model): boolean {\n  if (thread.hasOwnProperty('reference')) {\n    if (typeof thread.reference !== 'string' || thread.reference.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value reference was not a string (or it was empty)'\n      );\n    }\n  }\n  if (thread.hasOwnProperty('benefitId')) {\n    if (typeof thread.benefitId !== 'string' || thread.benefitId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value benefitId was not a string (or it was empty)'\n      );\n    }\n    const found = getBenefits(model).find(benefit => benefit.id === thread.benefitId);\n    if (!found) {\n      throw new InvalidUpdateError('Tried to update thread benefit id to a non-existent benefit');\n    }\n  }\n  if (thread.hasOwnProperty('deliverableId')) {\n    if (typeof thread.deliverableId !== 'string' || thread.deliverableId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value deliverableId was not a string (or it was empty)'\n      );\n    }\n    const found = getDeliverables(model).find(\n      deliverable => deliverable.id === thread.deliverableId\n    );\n    if (!found) {\n      throw new InvalidUpdateError(\n        'Tried to update thread deliverable id to a non-existent deliverable'\n      );\n    }\n  }\n  if (thread.hasOwnProperty('measureId')) {\n    if (typeof thread.measureId !== 'string' || thread.measureId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value measureId was not a string (or it was empty)'\n      );\n    } else if (thread.measureId !== 'none') {\n      const found = getMeasures(model).find(measure => measure.id === thread.measureId);\n      if (!found) {\n        throw new InvalidUpdateError('Tried to update thread measure id to a non-existent measure');\n      }\n    }\n  }\n  if (thread.hasOwnProperty('stakeholderId')) {\n    if (typeof thread.stakeholderId !== 'string' || thread.stakeholderId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value stakeholderId was not a string (or it was empty)'\n      );\n    }\n    const found = getStakeholders(model).find(\n      stakeholder => stakeholder.id === thread.stakeholderId\n    );\n    if (!found) {\n      throw new InvalidUpdateError(\n        'Tried to update thread stakeholder id to a non-existent stakeholder'\n      );\n    }\n  }\n  if (thread.hasOwnProperty('groupId')) {\n    if (typeof thread.groupId !== 'string' || thread.groupId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value groupId was not a string (or it was empty)'\n      );\n    } else if (thread.groupId !== 'none') {\n      const found = getGroups(model).find(group => group.id === thread.groupId);\n      if (!found) {\n        throw new InvalidUpdateError('Tried to update thread group id to a non-existent group');\n      }\n    }\n  }\n  if (thread.hasOwnProperty('beneficiaryId')) {\n    if (typeof thread.beneficiaryId !== 'string' || thread.beneficiaryId.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value beneficiaryId was not a string (or it was empty)'\n      );\n    } else if (thread.beneficiaryId !== 'none') {\n      const found = getBeneficiaries(model).find(\n        beneficiary => beneficiary.id === thread.beneficiaryId\n      );\n      if (!found) {\n        throw new InvalidUpdateError(\n          'Tried to update thread beneficiary id to a non-existent beneficiary'\n        );\n      }\n    }\n  }\n  if (thread.hasOwnProperty('cause')) {\n    if (typeof thread.cause !== 'string') {\n      throw new InvalidUpdateError('Provided thread update value cause was not a string');\n    }\n  }\n  if (thread.hasOwnProperty('effect')) {\n    if (typeof thread.effect !== 'string') {\n      throw new InvalidUpdateError('Provided thread update value effect was not a string');\n    }\n  }\n  if (thread.hasOwnProperty('equation')) {\n    if (typeof thread.equation !== 'string' || thread.equation.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided thread update value equation was not a string (or it was empty)'\n      );\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new thread (with data if provided)\n * @param {Model} model model instance\n * @param {ThreadData} thread optional thread data to store as thread\n * @return {Model} updated model instance\n */\nexport function newThread(model: Model, thread?: ThreadData, id?: string): Model {\n  const newThreadId = id || nanoId();\n\n  // Default new thread\n  let threadData = {\n    id: newThreadId,\n    reference: nextRef(),\n    benefitId: getBenefits(model)[0].id,\n    deliverableId: getDeliverables(model)[0].id,\n    measureId: 'none',\n    stakeholderId: getStakeholders(model)[0].id,\n    groupId: 'none',\n    beneficiaryId: 'none',\n    cause: '',\n    effect: '',\n    equation: '0',\n  };\n\n  if (thread) {\n    // Check validity of thread data\n    checkThreadData(thread, model);\n\n    // Override default thread data\n    threadData = { ...threadData, ...thread };\n  }\n\n  const newModel = {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        causeAndEffect: [...model.programmes[0].causeAndEffect, threadData],\n      },\n    ],\n  };\n\n  return updateThreadValues(newModel, newThreadId);\n}\n\n/**\n * Removes a thread with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id thread id\n * @returns {Model} updated model instance\n */\nexport function removeThreadById(model: Model, id: string): Model {\n  if (!model.programmes[0].causeAndEffect.find(t => t.id === id)) {\n    throw new InconsistentArgumentError(\n      `No thread with id '${id}' was contained in the model instance`\n    );\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        causeAndEffect: model.programmes[0].causeAndEffect.filter(t => t.id !== id),\n        _threadValues: model.programmes[0]._threadValues.filter(tv => tv.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a thread's attributes by id\n * @param {Model} model model instance\n * @param {string} id thread id\n * @param {ThreadData} thread new thread\n * @return {Model} updated model instance\n */\nexport function updateThreadById(model: Model, id: string, thread: ThreadData): Model {\n  // Check validity of data\n  checkThreadData(thread, model);\n\n  const newModel = {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        causeAndEffect: model.programmes[0].causeAndEffect.map(t =>\n          t.id === id\n            ? {\n                ...t,\n                reference: thread.hasOwnProperty('reference') ? thread.reference : t.reference,\n                benefitId: thread.hasOwnProperty('benefitId') ? thread.benefitId : t.benefitId,\n                deliverableId: thread.hasOwnProperty('deliverableId')\n                  ? thread.deliverableId\n                  : t.deliverableId,\n                measureId: thread.hasOwnProperty('measureId') ? thread.measureId : t.measureId,\n                stakeholderId: thread.hasOwnProperty('stakeholderId')\n                  ? thread.stakeholderId\n                  : t.stakeholderId,\n                groupId: thread.hasOwnProperty('groupId') ? thread.groupId : t.groupId,\n                beneficiaryId: thread.hasOwnProperty('beneficiaryId')\n                  ? thread.beneficiaryId\n                  : t.beneficiaryId,\n                cause: thread.hasOwnProperty('cause') ? thread.cause : t.cause,\n                effect: thread.hasOwnProperty('effect') ? thread.effect : t.effect,\n                equation: thread.hasOwnProperty('equation') ? thread.equation : t.equation,\n              }\n            : t),\n      },\n    ],\n  };\n\n  if (thread.hasOwnProperty('equation')) {\n    return updateThreadValues(newModel, id);\n  }\n\n  return newModel;\n}\n\nfunction toUnderscore(val: string): string {\n  return val.replace(/ /gi, '_');\n}\n\nfunction generateContextObject(model: Model, year: number): { [string]: number } {\n  const programme = getProgramme(model);\n  const { parameters, measures, stakeholders, stakeholderBenefits, _coreBenefits } = programme;\n\n  // Context object\n  const returnObject = {};\n\n  // Calculate dynamic parameters\n  parameters.forEach(parameter => {\n    // Initial value\n    let value = parameter.value;\n\n    if (parameter.dynamic) {\n      for (let y = 0; y < year; y++) {\n        if (parameter.changeType === PARAMETER_CHANGE_TYPE_ARITHMETIC) {\n          value += parameter.change;\n        } else if (parameter.changeType === PARAMETER_CHANGE_TYPE_GEOMETRIC) {\n          value *= parameter.change;\n        }\n      }\n    }\n\n    // Add parameter to context object\n    returnObject[toUnderscore(parameter.name)] = value;\n  });\n\n  // Add measure standard\n  measures.forEach(\n    measure => (returnObject[`ms_${toUnderscore(measure.name)}`] = measure.standard)\n  );\n\n  // Add measure baseline\n  measures.forEach(\n    measure => (returnObject[`mb_${toUnderscore(measure.name)}`] = measure.baselineValue)\n  );\n\n  // Add measure change\n  measures.forEach(measure => (returnObject[`mc_${toUnderscore(measure.name)}`] = measure.change));\n\n  // Add stakeholder revenue datum\n  stakeholders.forEach(\n    stakeholder =>\n      (returnObject[`sr_${toUnderscore(stakeholder.name)}`] =\n        stakeholderBenefits[_coreBenefits[0]][stakeholder.id])\n  );\n\n  // Add stakeholder margin datum\n  stakeholders.forEach(\n    stakeholder =>\n      (returnObject[`sm_${toUnderscore(stakeholder.name)}`] =\n        stakeholderBenefits[_coreBenefits[2]][stakeholder.id])\n  );\n\n  return returnObject;\n}\n\nexport function evaluateThread(model: Model, id: string, year: number): number {\n  const equation = getThreadById(model, id).equation;\n\n  // console.log('evaluating equation: ', equation);\n  let answer = 0;\n  try {\n    const context = generateContextObject(model, year);\n    answer = safeEval(equation, context);\n  } catch (e) {\n    answer = 0;\n  }\n  return answer;\n}\n\nexport function updateThreadValues(model: Model, id: string): Model {\n  const years = model._analysisYears;\n  const { _threadValues: threadValues } = getProgramme(model);\n\n  const filteredThreadValues = threadValues.filter(tv => tv.id !== id);\n\n  const yearsArray = [...Array(years).keys()];\n  const values = yearsArray.map(y => evaluateThread(model, id, y));\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        _threadValues: [\n          ...filteredThreadValues,\n          {\n            id,\n            values,\n          },\n        ],\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getBenefits } from '../Benefit';\nimport { getPhases } from '../Phase';\nimport { removeThreadById } from '../Thread';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Deliverable, DeliverableData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of deliverables from the programme instance\n * @param {Model} model model instance\n * @return {Array<Deliverable>} array of deliverables\n **/\nexport function getDeliverables(model: Model): Array<Deliverable> {\n  const programme = getProgramme(model);\n  if (!programme.deliverables) {\n    throw new InvalidModelError('Programme did not contain an array of deliverables');\n  } else if (!Array.isArray(programme.deliverables)) {\n    throw new InvalidModelError(\"Programme 'deliverables' was not an array\");\n  }\n  return programme.deliverables;\n}\n\n/**\n * Returns a specific deliverable from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id deliverable id\n * @return {Deliverable} deliverable with provided id\n **/\nexport function getDeliverableById(model: Model, id: string): Deliverable {\n  const deliverables = getDeliverables(model);\n  const found = deliverables.find(deliverable => deliverable.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find deliverable in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkDeliverableData(deliverable: DeliverableData): boolean {\n  if (deliverable.hasOwnProperty('name')) {\n    if (typeof deliverable.name !== 'string' || deliverable.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided deliverable update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (deliverable.hasOwnProperty('definition')) {\n    if (typeof deliverable.definition !== 'string') {\n      throw new InvalidUpdateError('Provided deliverable update value definition was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new deliverable (with data if provided)\n * @param {Model} model model instance\n * @param {DeliverableData} deliverable optional deliverable data to store as deliverable\n * @return {Model} updated model instance\n */\nexport function newDeliverable(model: Model, deliverable?: DeliverableData, id?: string): Model {\n  const newDeliverableId = id || nanoId();\n  // Default new deliverable\n  let deliverableData = {\n    id: newDeliverableId,\n    name: `New Deliverable ${++newCount}`,\n    definition: '',\n  };\n\n  if (deliverable) {\n    // Check validity of deliverable data\n    checkDeliverableData(deliverable);\n\n    // Override default deliverable data\n    deliverableData = { ...deliverableData, ...deliverable };\n  }\n\n  // Update Benefit Attribution\n  const { benefitAttribution } = getProgramme(model);\n\n  const benefits = getBenefits(model);\n  const phases = getPhases(model);\n  const newBenefitAttribution = benefits.reduce((acc, cur) => {\n    acc[cur.id] = {\n      ...benefitAttribution[cur.id],\n      [newDeliverableId]: phases.reduce((acc, cur) => {\n        acc[cur.id] = 0;\n        return acc;\n      }, {}),\n    };\n    return acc;\n  }, {});\n\n  // Update deliverable sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    deliverableSensitivity: [\n      ...scenario.deliverableSensitivity,\n      {\n        id: newDeliverableId,\n        switch: true,\n      },\n    ],\n  }));\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        deliverables: [...model.programmes[0].deliverables, deliverableData],\n        benefitAttribution: newBenefitAttribution,\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a deliverable with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id deliverable id\n * @returns {Model} updated model instance\n */\nexport function removeDeliverableById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'cascade'\n): Model {\n  if (!model.programmes[0].deliverables.find(d => d.id === id)) {\n    throw new InconsistentArgumentError(\n      `No deliverable with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cause and effects\n  let modifiedModel;\n  switch (onDelete) {\n    case 'cascade':\n      const { causeAndEffect } = getProgramme(model);\n      modifiedModel = causeAndEffect\n        .filter(t => t.deliverableId === id)\n        .reduce((acc, cur) => removeThreadById(acc, cur.id), model);\n      break;\n    default:\n      throw new InconsistentArgumentError('Unrecognised delete strategy when removing deliverable');\n  }\n\n  // Update benefit attribution\n  const updatedDeliverables = getDeliverables(model).filter(d => d.id !== id);\n  const { benefitAttribution, benefits, phases } = getProgramme(model);\n  const newBenefitAttribution = benefits.reduce((acc, benefit) => {\n    acc[benefit.id] = updatedDeliverables.reduce((acc, deliverable) => {\n      acc[deliverable.id] = phases.reduce((acc, phase) => {\n        acc[phase.id] = benefitAttribution[benefit.id][deliverable.id][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  // Update deliverable sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    deliverableSensitivity: scenario.deliverableSensitivity.filter(ds => ds.id !== id),\n  }));\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        deliverables: modifiedModel.programmes[0].deliverables.filter(d => d.id !== id),\n        benefitAttribution: newBenefitAttribution,\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n\n/**\n * Sets a deliverable's attributes by id\n * @param {Model} model model instance\n * @param {string} id deliverable id\n * @param {DeliverableData} deliverable new deliverable\n * @return {Model} updated model instance\n */\nexport function updateDeliverableById(\n  model: Model,\n  id: string,\n  deliverable: DeliverableData\n): Model {\n  const found = model.programmes[0].deliverables.find(d => d.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No deliverable with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkDeliverableData(deliverable);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        deliverables: model.programmes[0].deliverables.map(d =>\n          d.id === id\n            ? {\n                ...d,\n                name: deliverable.hasOwnProperty('name') ? deliverable.name : d.name,\n                definition: deliverable.hasOwnProperty('definition')\n                  ? deliverable.definition\n                  : d.definition,\n              }\n            : d),\n      },\n    ],\n  };\n}\n","// @flow\nimport nanoId from 'nanoid';\nimport { getProgramme, getProgrammeUnitOfMeasure } from '../Programme';\nimport { getDeliverables } from '../Deliverable';\nimport { getPhases } from '../Phase';\nimport { getStakeholders } from '../Stakeholder';\nimport { getThreads, removeThreadById } from '../Thread';\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\nimport { BENEFIT_TYPE_NON_FINANCIAL, BENEFIT_TYPE_FINANCIAL } from '../../../../config/constants';\nimport type { Benefit, BenefitData, Model, DeleteStrategy } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of benefits from the programme instance\n * @param {Model} model model instance\n * @return {Array<Benefit>} array of benefits\n **/\nexport function getBenefits(model: Model): Array<Benefit> {\n  const programme = getProgramme(model);\n  if (!programme.benefits) {\n    throw new InvalidModelError('Programme did not contain an array of benefits');\n  } else if (!Array.isArray(programme.benefits)) {\n    throw new InvalidModelError(\"Programme 'benefits' was not an array\");\n  }\n  return programme.benefits;\n}\n\n/**\n * Returns a specific benefit from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id benefit id\n * @return {Benefit} benefit with provided id\n **/\nexport function getBenefitById(model: Model, id: string): Benefit {\n  const benefits = getBenefits(model);\n  const found = benefits.find(benefit => benefit.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find benefit in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkBenefitData(benefit: BenefitData): boolean {\n  if (benefit.hasOwnProperty('name')) {\n    if (typeof benefit.name !== 'string' || benefit.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided benefit update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (benefit.hasOwnProperty('type')) {\n    if (\n      typeof benefit.type !== 'string' ||\n      ![BENEFIT_TYPE_FINANCIAL, BENEFIT_TYPE_NON_FINANCIAL].includes(benefit.type)\n    ) {\n      throw new InvalidUpdateError(\n        'Provided benefit update value type was not a string (or it was not one of predefined types)'\n      );\n    }\n  }\n  if (benefit.hasOwnProperty('unitOfMeasure')) {\n    if (typeof benefit.unitOfMeasure !== 'string' || benefit.unitOfMeasure.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided benefit update value unitOfMeasure was not a string (or it was empty)'\n      );\n    }\n  }\n  if (benefit.hasOwnProperty('definition')) {\n    if (typeof benefit.definition !== 'string') {\n      throw new InvalidUpdateError('Provided benefit update value definition was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new benefit (with data if provided)\n * @param {Model} model model instance\n * @param {BenefitData} benefit optional benefit data to store as benefit\n * @return {Model} updated model instance\n */\nexport function newBenefit(model: Model, benefit?: BenefitData, id?: string): Model {\n  const newBenefitId = id || nanoId();\n  // Default new benefit\n  let benefitData = {\n    id: newBenefitId,\n    name: `New Benefit ${++newCount}`,\n    type: BENEFIT_TYPE_NON_FINANCIAL,\n    unitOfMeasure: getProgrammeUnitOfMeasure(model),\n    definition: '',\n  };\n\n  if (benefit) {\n    // Check validity of benefit data\n    checkBenefitData(benefit);\n\n    // Override default benefit data\n    benefitData = { ...benefitData, ...benefit };\n  }\n\n  // Update benefit attribution, buildup, and stakeholder benefits;\n  const { benefitAttribution, benefitBuildup, stakeholderBenefits } = getProgramme(model);\n  const [deliverables, phases, stakeholders] = [\n    getDeliverables(model),\n    getPhases(model),\n    getStakeholders(model),\n  ];\n\n  const newBenefitAttribution = {\n    ...benefitAttribution,\n    [newBenefitId]: deliverables.reduce((acc, cur) => {\n      acc[cur.id] = phases.reduce((acc, cur) => {\n        acc[cur.id] = 0;\n        return acc;\n      }, {});\n      return acc;\n    }, {}),\n  };\n\n  const newBenefitBuildup = {\n    ...benefitBuildup,\n    [newBenefitId]: phases.reduce((acc, cur) => {\n      acc[cur.id] = 0;\n      return acc;\n    }, {}),\n  };\n\n  const newStakeholderBenefits = {\n    ...stakeholderBenefits,\n    [newBenefitId]: stakeholders.reduce((acc, cur) => {\n      acc[cur.id] = 0;\n      return acc;\n    }, {}),\n  };\n\n  // Update benefit buildup sensitivity and benefit sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    benefitBuildupSensitivity: {\n      ...scenario.benefitBuildupSensitivity,\n      [newBenefitId]: phases.reduce((acc, phase) => {\n        acc[phase.id] = 0;\n        return acc;\n      }, {}),\n    },\n    benefitSensitivity: [\n      ...scenario.benefitSensitivity,\n      {\n        id: newBenefitId,\n        switch: true,\n        sensitivity: 0,\n      },\n    ],\n  }));\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        benefits: [...model.programmes[0].benefits, benefitData],\n        benefitAttribution: newBenefitAttribution,\n        benefitBuildup: newBenefitBuildup,\n        stakeholderBenefits: newStakeholderBenefits,\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n\n/**\n * Removes a benefit with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id benefit id\n * @returns {Model} updated model instance\n */\nexport function removeBenefitById(\n  model: Model,\n  id: string,\n  onDelete: ?DeleteStrategy = 'cascade'\n): Model {\n  // Check model exists, core benefits exists, and whether to remove is core benefit\n  if (!model.programmes[0].benefits.find(b => b.id === id)) {\n    throw new InconsistentArgumentError(\n      `No benefit with id '${id}' was contained in the model instance`\n    );\n  } else if (\n    !model.programmes[0]._coreBenefits ||\n    !Array.isArray(model.programmes[0]._coreBenefits) ||\n    model.programmes[0]._coreBenefits.length !== 3\n  ) {\n    throw new InvalidModelError('Core benefits array was not present in programme');\n  } else if (model.programmes[0]._coreBenefits.includes(id)) {\n    throw new InvalidUpdateError(`Cannot remove core benefit ${id}`);\n  }\n\n  // Modify cause and effect threads before removing benefit\n  let modifiedModel;\n  const causeAndEffect = getThreads(model);\n  switch (onDelete) {\n    case 'cascade':\n      modifiedModel = causeAndEffect\n        .filter(t => t.benefitId === id)\n        .reduce((acc, cur) => removeThreadById(acc, cur.id), model);\n      break;\n    default:\n      throw new InconsistentArgumentError(\n        'Unknown onDelete strategy when removing benefit from model'\n      );\n  }\n\n  // Update benefit attribution, benefit buildup, and stakeholder benefits\n  const {\n    benefitAttribution,\n    benefitBuildup,\n    stakeholderBenefits,\n    deliverables,\n    phases,\n    stakeholders,\n  } = getProgramme(model);\n\n  // Filter out benefit to remove\n  const updatedBenefits = getBenefits(model).filter(b => b.id !== id);\n\n  // Calculate new benefit attribtuion\n  const newBenefitAttribution = updatedBenefits.reduce((acc, benefit) => {\n    // Reconstruct new benefit attribution from old one\n    acc[benefit.id] = deliverables.reduce((acc, deliverable) => {\n      acc[deliverable.id] = phases.reduce((acc, phase) => {\n        acc[phase.id] = benefitAttribution[benefit.id][deliverable.id][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  // Calculate new benefit buildup\n  const newBenefitBuildup = updatedBenefits.reduce((acc, benefit) => {\n    acc[benefit.id] = phases.reduce((acc, phase) => {\n      acc[phase.id] = benefitBuildup[benefit.id][phase.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  // Calculate new cost attribution\n  const newStakeholderBenefits = updatedBenefits.reduce((acc, benefit) => {\n    acc[benefit.id] = stakeholders.reduce((acc, stakeholder) => {\n      acc[stakeholder.id] = stakeholderBenefits[benefit.id][stakeholder.id];\n      return acc;\n    }, {});\n    return acc;\n  }, {});\n\n  // Update benefit buildup sensitivity, and benefit sensitivities\n  const { scenarios } = getProgramme(model);\n  const newScenarios = scenarios.map(scenario => ({\n    ...scenario,\n    benefitBuildupSensitivity: updatedBenefits.reduce((acc, benefit) => {\n      acc[benefit.id] = phases.reduce((acc, phase) => {\n        acc[phase.id] = scenario.benefitBuildupSensitivity[benefit.id][phase.id];\n        return acc;\n      }, {});\n      return acc;\n    }, {}),\n    benefitSensitivity: scenario.benefitSensitivity.filter(bs => bs.id !== id),\n  }));\n\n  // Return modified model with benefit removed\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        benefits: modifiedModel.programmes[0].benefits.filter(b => b.id !== id),\n        benefitAttribution: newBenefitAttribution,\n        benefitBuildup: newBenefitBuildup,\n        stakeholderBenefits: newStakeholderBenefits,\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n\n/**\n * Sets a benefit's attributes by id\n * @param {Model} model model instance\n * @param {string} id benefit id\n * @param {BenefitData} benefit new benefit\n * @return {Model} updated model instance\n */\nexport function updateBenefitById(model: Model, id: string, benefit: BenefitData): Model {\n  const found = model.programmes[0].benefits.find(benefit => benefit.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No benefit with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkBenefitData(benefit);\n\n  // Check if trying to update core benefit to non financial\n  if (\n    model.programmes[0]._coreBenefits.includes(id) &&\n    benefit.hasOwnProperty('type') &&\n    benefit.type !== BENEFIT_TYPE_FINANCIAL\n  ) {\n    throw new InvalidUpdateError(`Cannot update core benefit ${id} to a non financial benefit`);\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        benefits: model.programmes[0].benefits.map(b =>\n          b.id === id\n            ? {\n                ...b,\n                name: benefit.hasOwnProperty('name') ? benefit.name : b.name,\n                type: benefit.hasOwnProperty('type') ? benefit.type : b.type,\n                unitOfMeasure: benefit.hasOwnProperty('unitOfMeasure')\n                  ? benefit.unitOfMeasure\n                  : b.unitOfMeasure,\n                definition: benefit.hasOwnProperty('definition')\n                  ? benefit.definition\n                  : b.definition,\n              }\n            : b),\n      },\n    ],\n  };\n}\n","// @flow\nimport moment from 'moment';\n\n// Model Errors\nimport { InconsistentArgumentError, InvalidModelError } from '../../errors';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getMeasures } from '../Measure';\n\n// Constants\nimport { DATE_FORMAT } from '../../../../config/constants';\n\n// Flow Types\nimport { type Model, type ScorecardItem } from '../../types';\n\nexport function getScorecardItem(model: Model, date: string): ScorecardItem {\n  const programme = getProgramme(model);\n  const { balancedScorecard } = programme;\n\n  const m = moment(date, DATE_FORMAT, true);\n  if (!m.isValid()) {\n    throw new InconsistentArgumentError(\n      `Date ${date} was not in the required format '${DATE_FORMAT}'`\n    );\n  }\n\n  const found = balancedScorecard.find(item => item.date === date);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `Balanced scorecard did not contain and item with date ${date}`\n    );\n  } else {\n    return found;\n  }\n}\n\nexport function getScorecardValue(model: Model, date: string, id: string): number {\n  const { values } = getScorecardItem(model, date);\n\n  const measures = getMeasures(model);\n  const foundMeasure = measures.find(measure => measure.id === id);\n  if (!foundMeasure) {\n    throw new InconsistentArgumentError('Programme did not contain a measure with the provided id');\n  }\n\n  const foundValue = values.find(value => value.id === id);\n  if (!foundValue) {\n    throw new InvalidModelError('Measure exists but entry in balanced scorecard did not exist');\n  }\n\n  return foundValue.value;\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getDeliverables } from '../Deliverable';\nimport { getPhases } from '../Phase';\nimport { getBenefits } from '../Benefit';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Constants\nimport { COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT } from '../../../../config/constants';\n\n// Flow Types\nimport type { Scenario, ScenarioData, Model } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of scenarios from the programme instance\n * @param {Model} model model instance\n * @return {Array<Scenario>} array of scenarios\n **/\nexport function getScenarios(model: Model): Array<Scenario> {\n  const programme = getProgramme(model);\n  if (!programme.scenarios) {\n    throw new InvalidModelError('Programme did not contain an array of scenarios');\n  } else if (!Array.isArray(programme.scenarios)) {\n    throw new InvalidModelError(\"Programme 'scenarios' was not an array\");\n  }\n  return programme.scenarios;\n}\n\n/**\n * Returns a specific scenario from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id scenario id\n * @return {Scenario} scenario with provided id\n **/\nexport function getScenarioById(model: Model, id: string): Scenario {\n  const scenarios = getScenarios(model);\n  const found = scenarios.find(scenario => scenario.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find scenario in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkScenarioData(scenario: ScenarioData): boolean {\n  if (scenario.hasOwnProperty('name')) {\n    if (typeof scenario.name !== 'string' || scenario.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided scenario update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (scenario.hasOwnProperty('definition')) {\n    if (typeof scenario.definition !== 'string') {\n      throw new InvalidUpdateError('Provided scenario update value definition was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new scenario (with data if provided)\n * @param {Model} model model instance\n * @param {ScenarioData} scenario optional scenario data to store as scenario\n * @return {Model} updated model instance\n */\nexport function newScenario(model: Model, scenario?: ScenarioData, id?: string): Model {\n  const newScenarioId = id || nanoId();\n  // Default new scenario\n  let scenarioData = {\n    id: newScenarioId,\n    name: `New Scenario ${++newCount}`,\n    definition: '',\n  };\n\n  if (scenario) {\n    // Check validity of benefit data\n    checkScenarioData(scenario);\n\n    // Override default benefit data\n    scenarioData = { ...scenarioData, ...scenario };\n  }\n\n  const phases = getPhases(model);\n  const phaseSensitivity = phases.map(phase => ({\n    id: phase.id,\n    duration: phase.duration,\n    start: phase.start,\n    switch: true,\n  }));\n\n  const deliverables = getDeliverables(model);\n  const deliverableSensitivity = deliverables.map(deliverable => ({\n    id: deliverable.id,\n    switch: true,\n  }));\n\n  const benefits = getBenefits(model);\n  const benefitSensitivity = benefits.map(benefit => ({\n    id: benefit.id,\n    switch: true,\n    sensitivity: 0,\n  }));\n\n  const costTypes = [COST_TYPE_DEVELOPMENT, COST_TYPE_SUPPORT];\n  const phaseCostSensitivity = costTypes.reduce((costAcc, curCost) => {\n    costAcc[curCost] = phases.reduce((phaseAcc, curPhase) => {\n      phaseAcc[curPhase.id] = 0;\n      return phaseAcc;\n    }, {});\n    return costAcc;\n  }, {});\n\n  const benefitBuildupSensitivity = benefits.reduce((benefitAcc, curBenefit) => {\n    benefitAcc[curBenefit.id] = phases.reduce((phaseAcc, curPhase) => {\n      phaseAcc[curPhase.id] = 0;\n      return phaseAcc;\n    }, {});\n    return benefitAcc;\n  }, {});\n\n  scenarioData = {\n    ...scenarioData,\n    phaseSensitivity,\n    deliverableSensitivity,\n    benefitSensitivity,\n    phaseCostSensitivity,\n    benefitBuildupSensitivity,\n  };\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: [...model.programmes[0].scenarios, scenarioData],\n      },\n    ],\n  };\n}\n\n/**\n * Removes a scenario with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id scenario id\n * @returns {Model} updated model instance\n */\nexport function removeScenarioById(model: Model, id: string): Model {\n  // Check model exists, core benefits exists, and whether to remove is core benefit\n  if (!model.programmes[0].scenarios.find(s => s.id === id)) {\n    throw new InconsistentArgumentError(\n      `No scenario with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Return modified model with scenario removed\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: model.programmes[0].scenarios.filter(s => s.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a scenario's attributes by id\n * @param {Model} model model instance\n * @param {string} id scenario id\n * @param {ScenarioData} scenario new scenario\n * @return {Model} updated model instance\n */\nexport function updateScenarioById(model: Model, id: string, scenario: ScenarioData): Model {\n  // Get scenario by id to confirm it exists\n  getScenarioById(model, id);\n\n  // Check validity of data\n  checkScenarioData(scenario);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: model.programmes[0].scenarios.map(s =>\n          s.id === id\n            ? {\n                ...s,\n                name: scenario.hasOwnProperty('name') ? scenario.name : s.name,\n                definition: scenario.hasOwnProperty('definition')\n                  ? scenario.definition\n                  : s.definition,\n              }\n            : s),\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getScenarios } from '../Scenario';\n\n// Flow Types\nimport { type Model, type BenefitSensitivity } from '../../types';\n\nexport function setBenefitSensitivityValues(\n  model: Model,\n  scenarioId: string,\n  values: BenefitSensitivity\n): Model {\n  // Retrieve existing scenarios\n  const scenarios = getScenarios(model);\n\n  // Map the existing scenarios to a new array\n  const newScenarios = scenarios.map(scenario => {\n    // If this scenario is the one to be updated\n    if (scenario.id === scenarioId) {\n      // Return the new scenario in same location\n      return {\n        ...scenario,\n        benefitSensitivity: values,\n      };\n    } else {\n      // Return existing scenario\n      return scenario;\n    }\n  });\n\n  // Return model with scenarios updated\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getProgramme } from '../Programme';\n\n// Model Errors\nimport { InvalidModelError, InconsistentArgumentError, InvalidUpdateError } from '../../errors';\n\n// Flow Types\nimport type { Model } from '../../types';\n\n/**\n * Returns the element at the provided location in the matrix (referenced by id)\n * @param {Model} model model instance\n * @param {Array<string>} location array of string ids indicating location within matrix\n * @return {number} entry at location\n **/\nexport function getBenefitAttributionEntry(model: Model, location: Array<string>): number {\n  const programme = getProgramme(model);\n  if (!programme.benefitAttribution) {\n    throw new InvalidModelError(\"The programme did not contain the 'benefitAttribution' attribute\");\n  } else if (!programme.benefitAttribution[location[0]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'benefitAttribution' did not contain a key for ${location[0]}`\n    );\n  } else if (!programme.benefitAttribution[location[0]][location[1]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'benefitAttribution' did not contain the secondary key ${location[1]}`\n    );\n  } else if (!programme.benefitAttribution[location[0]][location[1]][location[2]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'benefitAttribution' did not contain the tertiary key ${location[1]}`\n    );\n  } else if (\n    typeof programme.benefitAttribution[location[0]][location[1]][location[2]] === 'number'\n  ) {\n    throw new InvalidModelError(\n      `Entry at location ${location[0]}-${location[1]}-${location[2]} was not a number`\n    );\n  } else if (Number.isNaN(programme.benefitAttribution[location[0]][location[1]][location[2]])) {\n    throw new InvalidModelError(\n      `Entry at location ${location[0]}-${location[1]}-${location[2]} was NaN (not a number)`\n    );\n  }\n\n  return programme.benefitAttribution[location[0]][location[1]][location[2]];\n}\n\n/**\n * Update the benefit attribution in the model with a type-checked set of new values\n * @param {Model} model model instance\n * @param {Matrix3D} values values to update with\n * @return {Model} updated model instance\n */\nexport function setBenefitAttribution(\n  model: Model,\n  values: { [string]: { [string]: { [string]: number } } }\n): Model {\n  // Throw error if values is undefined\n  if (!values) {\n    throw new InvalidUpdateError('Tried to update benefit attribution with undefined values');\n  }\n\n  // Get programme instance\n  const programme = getProgramme(model);\n\n  // Throw error if benefitAttribution not defined\n  if (!programme.benefitAttribution) {\n    throw new InvalidModelError(\"The programme did not contain the 'benefitAttribution' attribute\");\n  }\n\n  // Extract benefit ids from provided values\n  const benefitIds = Object.keys(values);\n  const benefitIdsValid = benefitIds.reduce(\n    (acc, id) => acc && programme.benefits.map(b => b.id).includes(id),\n    true\n  );\n  if (!benefitIdsValid || benefitIds.length !== programme.benefits.length) {\n    throw new InvalidUpdateError('The benefit keys in the provided update values were invalid');\n  }\n\n  // Extract deliverable ids from provided values\n  const deliverableIds = Object.keys(values[benefitIds[0]]);\n  const deliverableIdsValid = deliverableIds.reduce(\n    (acc, id) => acc && programme.deliverables.map(d => d.id).includes(id),\n    true\n  );\n  if (!deliverableIdsValid || deliverableIds.length !== programme.deliverables.length) {\n    throw new InvalidUpdateError('The deliverable keys in the provided update values were invalid');\n  }\n\n  // Extract phase ids from provided values\n  const phaseIds = Object.keys(values[benefitIds[0]][deliverableIds[0]]);\n  const phaseIdsValid = phaseIds.reduce(\n    (acc, id) => acc && programme.phases.map(p => p.id).includes(id),\n    true\n  );\n  if (!phaseIdsValid || phaseIds.length !== programme.phases.length) {\n    throw new InvalidUpdateError('The phase keys in the provided update values were invalid');\n  }\n\n  // Create a new object which we will insert type checked values\n  const newMatrix = {};\n\n  // Loop each benefit id...\n  benefitIds.forEach(bId => {\n    // Declare an object to store benefit data in\n    const newBenefitObject = {};\n\n    deliverableIds.forEach(dId => {\n      // Declare an object to store deliverable data in\n      const newDeliverableObject = {};\n\n      phaseIds.forEach(pId => {\n        // If value is properly defined and a number update matrix\n        if (\n          values[bId][dId] &&\n          typeof values[bId][dId][pId] === 'number' &&\n          !Number.isNaN(values[bId][dId][pId]) &&\n          values[bId][dId][pId] <= 1 &&\n          values[bId][dId][pId] >= 0\n        ) {\n          // Set deliverable object phase key to values\n          newDeliverableObject[pId] = values[bId][dId][pId];\n        } else if (!values[bId][dId]) {\n          // Throw error if deliverable object not defined for this benefit\n          throw new InvalidUpdateError(\n            'Tried to update benefit attribution when values did not have the correct deliverable keys'\n          );\n        } else if (!values[bId][dId][pId]) {\n          // Throw error if phase object not defined for this benefit x deliverable\n          throw new InvalidUpdateError(\n            'Tried to update benefit attribution when values did not have the correct phase keys'\n          );\n        } else if (\n          typeof values[bId][dId][pId] !== 'number' ||\n          Number.isNaN(values[bId][dId][pId])\n        ) {\n          // Throw error if value was not a number (NaN or different type)\n          throw new InvalidUpdateError(\n            'Tried to update benefit attribution when some values were not a number'\n          );\n        } else {\n          throw new InvalidUpdateError(\n            'Tried to update benefit attribution when some values were not a percentage [0-1]'\n          );\n        }\n      });\n      // Update the benefit object with the deliverable object\n      newBenefitObject[dId] = newDeliverableObject;\n    });\n    // Update the matrix object with the benefit object\n    newMatrix[bId] = newBenefitObject;\n  });\n\n  // Finally, return new model instance with benefit attribution swapped out\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        benefitAttribution: newMatrix,\n      },\n    ],\n  };\n}\n","// @flow\nimport { InvalidModelError, InconsistentArgumentError, InvalidUpdateError } from '../../errors';\nimport { getProgramme } from '../Programme';\n\n// Flow Types\nimport type { Model } from '../../types';\n\n/**\n * Returns the element at the provided location in the matrix (referenced by id)\n * @param {Model} model model instance\n * @param {Array<string>} location array of string ids indicating location within matrix\n * @return {number} entry at location\n **/\nexport function getBenefitBuildupEntry(model: Model, location: Array<string>): number {\n  const programme = getProgramme(model);\n  if (!programme.benefitBuildup) {\n    throw new InvalidModelError(\"The programme did not contain the 'benefitBuildup' attribute\");\n  } else if (!programme.benefitBuildup[location[0]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'benefitBuildup' did not contain a key for ${location[0]}`\n    );\n  } else if (!programme.benefitBuildup[location[0]][location[1]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'benefitBuildup' did not contain the secondary key ${location[1]}`\n    );\n  } else if (typeof programme.benefitBuildup[location[0]][location[1]] === 'number') {\n    throw new InvalidModelError(`Entry at location ${location[0]}-${location[1]} was not a number`);\n  } else if (Number.isNaN(programme.benefitBuildup[location[0]][location[1]])) {\n    throw new InvalidModelError(\n      `Entry at location ${location[0]}-${location[1]} was NaN (not a number)`\n    );\n  }\n\n  return programme.benefitBuildup[location[0]][location[1]];\n}\n\n/**\n * Update the benefit buildup in the model with a type-checked set of new values\n * @param {Model} model model instance\n * @param {Matrix2D} values values to update with\n * @return {Model} updated model instance\n */\nexport function setBenefitBuildup(model: Model, values: { [string]: { [string]: number } }): Model {\n  // Throw error if values is undefined\n  if (!values) {\n    throw new InvalidUpdateError('Tried to update benefit buildup with undefined values');\n  }\n\n  // Get programme instance\n  const programme = getProgramme(model);\n\n  // Throw error if benefitBuildup not defined\n  if (!programme.benefitBuildup) {\n    throw new InvalidModelError(\"The programme did not contain the 'benefitBuildup' attribute\");\n  }\n\n  // Extract benefit ids from provided values\n  const benefitIds = Object.keys(values);\n  const benefitIdsValid = benefitIds.reduce(\n    (acc, id) => acc && programme.benefits.map(b => b.id).includes(id),\n    true\n  );\n  if (!benefitIdsValid || benefitIds.length !== programme.benefits.length) {\n    throw new InvalidUpdateError('The benefit keys in the provided update values were invalid');\n  }\n\n  // Extract phase ids from provided values\n  const phaseIds = Object.keys(values[benefitIds[0]]);\n  const phaseIdsValid = phaseIds.reduce(\n    (acc, id) => acc && programme.phases.map(p => p.id).includes(id),\n    true\n  );\n  if (!phaseIdsValid || phaseIds.length !== programme.phases.length) {\n    throw new InvalidUpdateError('The phase keys in the provided update values were invalid');\n  }\n\n  // Create a new object which we will insert type checked values\n  const newMatrix = {};\n\n  // Loop each benefit id...\n  benefitIds.forEach(bId => {\n    // Declare an object to store benefit data in\n    const newBenefitObject = {};\n\n    phaseIds.forEach(pId => {\n      // If value is properly defined and a number update matrix\n      if (\n        typeof values[bId][pId] === 'number' &&\n        !Number.isNaN(values[bId][pId]) &&\n        values[bId][pId] >= 0\n      ) {\n        // Set benefit object phase key to values\n        newBenefitObject[pId] = values[bId][pId];\n      } else if (!values[bId][pId]) {\n        // Throw error if phase object not defined for this benefit\n        throw new InvalidUpdateError(\n          'Tried to update benefit buildup when values did not have the correct phase keys'\n        );\n      } else if (typeof values[bId][pId] !== 'number' || Number.isNaN(values[bId][pId])) {\n        // Throw error if value was not a number (NaN or different type)\n        throw new InvalidUpdateError(\n          'Tried to update benefit buildup when some values were not a number'\n        );\n      } else {\n        throw new InvalidUpdateError(\n          'Tried to update benefit buildup when some values were less than zero'\n        );\n      }\n    });\n\n    // Update the matrix object with the benefit object\n    newMatrix[bId] = newBenefitObject;\n  });\n\n  // Finally, return new model instance with benefit buildup swapped out\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        benefitBuildup: newMatrix,\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getScenarios } from '../Scenario';\n\n// Flow Types\nimport { type Model, type BenefitBuildupSensitivity } from '../../types';\n\nexport function setBenefitBuildupSensitivityValues(\n  model: Model,\n  scenarioId: string,\n  values: BenefitBuildupSensitivity\n): Model {\n  // Retrieve existing scenarios\n  const scenarios = getScenarios(model);\n\n  // Map the existing scenarios to a new array\n  const newScenarios = scenarios.map(scenario => {\n    // If this scenario is the one to be updated\n    if (scenario.id === scenarioId) {\n      // Return the new scenario in same location\n      return {\n        ...scenario,\n        benefitBuildupSensitivity: values,\n      };\n    } else {\n      // Return existing scenario\n      return scenario;\n    }\n  });\n\n  // Return model with scenarios updated\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n","// @flow\nimport { InvalidModelError, InconsistentArgumentError, InvalidUpdateError } from '../../errors';\nimport { getProgramme } from '../Programme';\n\n// Flow Types\nimport type { Model } from '../../types';\n\n/**\n * Returns the element at the provided location in the matrix (referenced by\n * 'development'/'support' and id)\n * @param {Model} model model instance\n * @param {Array<string>} location array of string ids indicating location within matrix\n * @return {number} entry at location\n **/\nexport function getCostAttributionEntry(model: Model, location: Array<string>): number {\n  const programme = getProgramme(model);\n  if (!programme.costAttribution) {\n    throw new InvalidModelError(\"The programme did not contain the 'costAttribution' attribute\");\n  } else if (!programme.costAttribution[location[0]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'costAttribution' did not contain a key for ${location[0]}`\n    );\n  } else if (!programme.costAttribution[location[0]][location[1]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'costAttribution' did not contain the secondary key ${location[1]}`\n    );\n  } else if (typeof programme.costAttribution[location[0]][location[1]] === 'number') {\n    throw new InvalidModelError(`Entry at location ${location[0]}-${location[1]} was not a number`);\n  } else if (Number.isNaN(programme.costAttribution[location[0]][location[1]])) {\n    throw new InvalidModelError(\n      `Entry at location ${location[0]}-${location[1]} was NaN (not a number)`\n    );\n  }\n\n  return programme.costAttribution[location[0]][location[1]];\n}\n\n/**\n * Update the cost attribution in the model with a type-checked set of new values\n * @param {Model} model model instance\n * @param {Matrix2D} values values to update with\n * @return {Model} updated model instance\n */\nexport function setCostAttribution(\n  model: Model,\n  values: { [string]: { [string]: number } }\n): Model {\n  // Throw error if values is undefined\n  if (!values) {\n    throw new InvalidUpdateError('Tried to update cost attribution with undefined values');\n  }\n\n  // Get programme instance\n  const programme = getProgramme(model);\n\n  // Throw error if costAttribution not defined\n  if (!programme.costAttribution) {\n    throw new InvalidModelError(\"The programme did not contain the 'costAttribution' attribute\");\n  }\n\n  // Extract cost ids from provided values\n  const costIds = Object.keys(values);\n  const costIdsValid = costIds.reduce(\n    (acc, id) => acc && programme.costs.map(c => c.id).includes(id),\n    true\n  );\n  if (!costIdsValid || costIds.length !== programme.costs.length) {\n    throw new InvalidUpdateError('The cost keys in the provided update values were invalid');\n  }\n\n  // Extract phase ids from provided values\n  const phaseIds = Object.keys(values[costIds[0]]);\n  const phaseIdsValid = phaseIds.reduce(\n    (acc, id) => acc && programme.phases.map(p => p.id).includes(id),\n    true\n  );\n  if (!phaseIdsValid || phaseIds.length !== programme.phases.length) {\n    throw new InvalidUpdateError('The phase keys in the provided update values were invalid');\n  }\n\n  // Create a new object which we will insert type checked values\n  const newMatrix = {};\n\n  // Loop each cost id...\n  costIds.forEach(cId => {\n    // Declare an object to store cost data in\n    const newCostObject = {};\n\n    phaseIds.forEach(pId => {\n      // If value is properly defined and a number update matrix\n      if (typeof values[cId][pId] === 'number' && !Number.isNaN(values[cId][pId])) {\n        // Set cost object phase key to values\n        newCostObject[pId] = values[cId][pId];\n      } else if (!values[cId][pId]) {\n        // Throw error if deliverable object not defined for this cost\n        throw new InvalidUpdateError(\n          'Tried to update cost attribution when values did not have the correct phase keys'\n        );\n      } else {\n        // Throw error if value was not a number (NaN or different type)\n        throw new InvalidUpdateError(\n          'Tried to update cost attribution when some values were not a number'\n        );\n      }\n    });\n\n    // Update the matrix object with the cost object\n    newMatrix[cId] = newCostObject;\n  });\n\n  // Finally, return new model instance with benefit attribution swapped out\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        costAttribution: newMatrix,\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getScenarios } from '../Scenario';\n\n// Flow Types\nimport { type Model, type DeliverableSensitivity } from '../../types';\n\nexport function setDeliverableSensitivityValues(\n  model: Model,\n  scenarioId: string,\n  values: DeliverableSensitivity\n): Model {\n  // Retrieve existing scenarios\n  const scenarios = getScenarios(model);\n\n  // Map the existing scenarios to a new array\n  const newScenarios = scenarios.map(scenario => {\n    // If this scenario is the one to be updated\n    if (scenario.id === scenarioId) {\n      // Return the new scenario in same location\n      return {\n        ...scenario,\n        deliverableSensitivity: values,\n      };\n    } else {\n      // Return existing scenario\n      return scenario;\n    }\n  });\n\n  // Return model with scenarios updated\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n","// @flow\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError } from '../../errors';\n\n// Flow Types\nimport type { Model, ModelAttributes } from '../../types';\n\n// Constants\nconst modelAttributes = ['id', 'name', 'client', 'author'];\n\n/**\n * Returns the non-array attributes of the provided model instance\n * @param {Model} model model instance\n * @return {ModelAttributes} an object containing all the model's (non-array) attributes\n */\nexport function getModelAttributes(model: Model): ModelAttributes {\n  // Define new object to return\n  const attributes = {};\n\n  // For each attribute check it's validity and add to the return object\n  modelAttributes.forEach(key => {\n    if (!model[key]) {\n      throw new InvalidModelError(`Provided model did not contain the '${key}' attribute`);\n    } else if (typeof model[key] !== 'string') {\n      throw new InvalidModelError(`Provided model's '${key}' attribute was not a string`);\n    }\n\n    attributes[key] = model[key];\n  });\n\n  // Return new object\n  return attributes;\n}\n\nfunction checkModelData(data: ModelAttributes): boolean {\n  if (data.hasOwnProperty('name')) {\n    if (typeof data.name !== 'string' || data.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided model update values did not contain the name attribute (or it was empty)'\n      );\n    }\n  }\n  if (data.hasOwnProperty('client')) {\n    if (typeof data.client !== 'string') {\n      throw new InvalidUpdateError(\n        'Provided model update values did not contain the client attribute'\n      );\n    }\n  }\n  if (data.hasOwnProperty('author')) {\n    if (typeof data.author !== 'string') {\n      throw new InvalidUpdateError(\n        'Provided model update values did not contain the author attribute'\n      );\n    }\n  }\n  return true;\n}\n\n/**\n * Sets model values based on provided values\n * @param {Model} model model instance\n * @param {Model} values model values to update\n */\nexport function updateModel(model: Model, values: ModelAttributes): Model {\n  checkModelData(values);\n\n  return {\n    ...model,\n    name: values.hasOwnProperty('name') ? values.name : model.name,\n    client: values.hasOwnProperty('client') ? values.client : model.client,\n    author: values.hasOwnProperty('author') ? values.author : model.author,\n  };\n}\n\n/**\n * Returns the model id\n * @param  {Model} model model instance\n * @return {string}      model id\n */\nexport function getModelId(model: Model): string {\n  if (!model.id) {\n    throw new InvalidModelError(\"Provided model did not contain the 'id' attribute\");\n  } else if (typeof model.id !== 'string') {\n    throw new InvalidModelError(\"Provided model's 'id' attribute was not a string\");\n  }\n\n  return model.id;\n}\n\n/**\n * Returns the model name\n * @param  {Model} model model instance\n * @return {string}      model name\n */\nexport function getModelName(model: Model): string {\n  if (!model.name) {\n    throw new InvalidModelError(\"Provided model did not contain the 'name' attribute\");\n  } else if (typeof model.name !== 'string') {\n    throw new InvalidModelError(\"Provided model's 'name' attribute was not a string\");\n  }\n\n  return model.name;\n}\n\n/**\n * Returns the model client\n * @param  {Model} model model instance\n * @return {string}      model client\n */\nexport function getModelClient(model: Model): string {\n  if (!model.client) {\n    throw new InvalidModelError(\"Provided model did not contain the 'client' attribute\");\n  } else if (typeof model.client !== 'string') {\n    throw new InvalidModelError(\"Provided model's 'client' attribute was not a string\");\n  }\n\n  return model.client;\n}\n\n/**\n * Returns the model author\n * @param  {Model} model model instance\n * @return {string}      model author\n */\nexport function getModelAuthor(model: Model): string {\n  if (!model.author) {\n    throw new InvalidModelError(\"Provided model did not contain the 'author' attribute\");\n  } else if (typeof model.author !== 'string') {\n    throw new InvalidModelError(\"Provided model's 'author' attribute was not a string\");\n  }\n\n  return model.author;\n}\n\n/**\n * Sets the model name\n * @param  {Model} model model instance\n * @param  {string} name new model name\n */\nexport function setModelName(model: Model, name: string): Model {\n  if (!name || typeof name !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the model name as ${name} is invalid, 'name' must be a string`\n    );\n  }\n\n  return {\n    ...model,\n    name,\n  };\n}\n\n/**\n * Sets the model client\n * @param  {Model} model   model instance\n * @param  {string} client new model client\n */\nexport function setModelClient(model: Model, client: string): Model {\n  if (!client || typeof client !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the model client as ${client} is invalid, 'client' must be a string`\n    );\n  }\n\n  return {\n    ...model,\n    client,\n  };\n}\n\n/**\n * Sets the model author\n * @param  {Model} model model instance\n * @param  {string} author new model author\n */\nexport function setModelAuthor(model: Model, author: string): Model {\n  if (!author || typeof author !== 'string') {\n    throw new InvalidUpdateError(\n      `Updating the model author as ${author} is invalid, 'author' must be a string`\n    );\n  }\n\n  return {\n    ...model,\n    author,\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme, getProgrammeUnitOfMeasure } from '../Programme';\nimport { getThreadById, updateThreadById } from '../Thread';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Constants\nimport {\n  PARAMETER_CHANGE_TYPE_ARITHMETIC,\n  PARAMETER_CHANGE_TYPE_GEOMETRIC,\n} from '../../../../config/constants';\n\n// Flow Types\nimport type { Parameter, ParameterData, Model } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of parameters from the programme instance\n * @param {Model} model model instance\n * @return {Array<Parameter>} array of parameters\n **/\nexport function getParameters(model: Model): Array<Parameter> {\n  const programme = getProgramme(model);\n  if (!programme.parameters) {\n    throw new InvalidModelError('Programme did not contain an array of parameters');\n  } else if (!Array.isArray(programme.parameters)) {\n    throw new InvalidModelError(\"Programme 'parameters' was not an array\");\n  }\n  return programme.parameters;\n}\n\n/**\n * Returns a specific parameter from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id parameter id\n * @return {Parameter} parameter with provided id\n **/\nexport function getParameterById(model: Model, id: string): Parameter {\n  const parameters = getParameters(model);\n  const found = parameters.find(parameter => parameter.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find parameter in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkParameterData(parameter: ParameterData): boolean {\n  if (parameter.hasOwnProperty('name')) {\n    if (typeof parameter.name !== 'string' || parameter.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided parameter update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (parameter.hasOwnProperty('unitOfMeasure')) {\n    if (typeof parameter.unitOfMeasure !== 'string') {\n      throw new InvalidUpdateError(\n        'Provided parameter update value unitOfMeasure was not a string'\n      );\n    }\n  }\n  if (parameter.hasOwnProperty('value')) {\n    if (typeof parameter.value !== 'number' || Number.isNaN(parameter.value)) {\n      throw new InvalidUpdateError('Provided parameter update value value was not a number');\n    }\n  }\n  if (parameter.hasOwnProperty('dynamic')) {\n    if (typeof parameter.dynamic !== 'boolean') {\n      throw new InvalidUpdateError(\n        'Provided parameter update value dynamic was not a boolean value'\n      );\n    }\n  }\n  if (parameter.hasOwnProperty('change')) {\n    if (typeof parameter.change !== 'number' || Number.isNaN(parameter.change)) {\n      throw new InvalidUpdateError('Provided parameter update value change was not a number');\n    }\n  }\n  if (parameter.hasOwnProperty('changeType')) {\n    if (\n      typeof parameter.changeType !== 'string' ||\n      ![PARAMETER_CHANGE_TYPE_ARITHMETIC, PARAMETER_CHANGE_TYPE_GEOMETRIC].includes(\n        parameter.changeType\n      )\n    ) {\n      throw new InvalidUpdateError(\n        'Provided parameter update value changeType was not a string (or it was not of predefined type)'\n      );\n    }\n  }\n  if (parameter.hasOwnProperty('definition')) {\n    if (typeof parameter.definition !== 'string') {\n      throw new InvalidUpdateError('Provided parameter update value definition was not a string');\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new parameter (with data if provided)\n * @param {Model} model model instance\n * @param {ParameterData} parameter optional parameter data to store as parameter\n * @return {Model} updated model instance\n */\nexport function newParameter(model: Model, parameter?: ParameterData, id?: string): Model {\n  // Default new parameter\n  let parameterData = {\n    id: id || nanoId(),\n    name: `p_ParameterName${++newCount}`,\n    unitOfMeasure: getProgrammeUnitOfMeasure(model),\n    value: 0,\n    dynamic: false,\n    change: 0,\n    changeType: PARAMETER_CHANGE_TYPE_ARITHMETIC,\n    definition: '',\n  };\n\n  if (parameter) {\n    // Check validity of parameter data\n    checkParameterData(parameter);\n\n    // Override default parameter data\n    parameterData = { ...parameterData, ...parameter };\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        parameters: [...model.programmes[0].parameters, parameterData],\n      },\n    ],\n  };\n}\n\nfunction escapeRegExp(regexString) {\n  return regexString.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction replaceParameterNames(\n  parameter: Parameter,\n  equation: string,\n  type: 'rename' | 'delete',\n  newName?: string\n) {\n  const variable = parameter.name;\n  const variableRegExp = escapeRegExp(variable);\n  let newEquation;\n  if (type === 'delete') {\n    const { value } = parameter;\n    newEquation = equation.replace(variableRegExp, `${value}`);\n  } else if (type === 'rename') {\n    if (typeof newName !== 'string') {\n      throw new InconsistentArgumentError(\n        'New name was not provided when updating parameter names in cause and effect threads'\n      );\n    }\n    newEquation = equation.replace(variableRegExp, newName);\n  }\n  return newEquation;\n}\n\n/**\n * Removes a parameter with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id parameter id\n * @returns {Model} updated model instance\n */\nexport function removeParameterById(model: Model, id: string): Model {\n  const found = model.programmes[0].parameters.find(p => p.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No parameter with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Update cause and effects\n  let modifiedModel;\n  const { causeAndEffect } = getProgramme(model);\n  modifiedModel = causeAndEffect.reduce((acc, cur) => {\n    const newEquation = replaceParameterNames(found, getThreadById(acc, cur.id).equation, 'delete');\n    if (typeof newEquation !== 'string') {\n      throw new InconsistentArgumentError('Removed parameter but new equation was not a string');\n    }\n    return updateThreadById(acc, cur.id, { equation: newEquation });\n  }, model);\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        parameters: modifiedModel.programmes[0].parameters.filter(p => p.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a parameter's attributes by id\n * @param {Model} model model instance\n * @param {string} id parameter id\n * @param {ParameterData} parameter new parameter\n * @return {Model} updated model instance\n */\nexport function updateParameterById(model: Model, id: string, parameter: ParameterData): Model {\n  // Check validity of data\n  checkParameterData(parameter);\n\n  const { causeAndEffect } = getProgramme(model);\n  const existingParameter = getParameterById(model, id);\n  let modifiedModel = model;\n  // Update equation variables if measure name has changed\n  if (parameter.hasOwnProperty('name') && parameter.name !== existingParameter.name) {\n    modifiedModel = causeAndEffect.reduce((acc, cur) => {\n      const newEquation = replaceParameterNames(\n        existingParameter,\n        getThreadById(acc, cur.id).equation,\n        'rename',\n        parameter.name\n      );\n      if (typeof newEquation !== 'string') {\n        throw new InconsistentArgumentError(\n          'Updated parameter names but new equation was not a string'\n        );\n      }\n      return updateThreadById(acc, cur.id, { equation: newEquation });\n    }, model);\n  }\n\n  return {\n    ...modifiedModel,\n    programmes: [\n      {\n        ...modifiedModel.programmes[0],\n        parameters: modifiedModel.programmes[0].parameters.map(p =>\n          p.id === id\n            ? {\n                ...p,\n                name: parameter.hasOwnProperty('name') ? parameter.name : p.name,\n                unitOfMeasure: parameter.hasOwnProperty('unitOfMeasure')\n                  ? parameter.unitOfMeasure\n                  : p.unitOfMeasure,\n                value: parameter.hasOwnProperty('value') ? parameter.value : p.value,\n                dynamic: parameter.hasOwnProperty('dynamic') ? parameter.dynamic : p.dynamic,\n                change: parameter.hasOwnProperty('change') ? parameter.change : p.change,\n                changeType: parameter.hasOwnProperty('changeType')\n                  ? parameter.changeType\n                  : p.changeType,\n                definition: parameter.hasOwnProperty('definition')\n                  ? parameter.definition\n                  : p.definition,\n              }\n            : p),\n      },\n    ],\n  };\n}\n","// @flow\nimport moment from 'moment';\n\n// Model Errors\nimport { InconsistentArgumentError } from '../../errors';\n\n// API Functions\nimport { getScenarios } from '../Scenario';\n\n// Constants\nimport { DATE_FORMAT } from '../../../../config/constants';\n\n// Flow Types\nimport { type Model, type PhaseSensitivityData } from '../../types';\n\nexport function setPhaseSensitivityValues(\n  model: Model,\n  scenarioId: string,\n  values: PhaseSensitivityData\n): Model {\n  // Retrieve existing scenarios\n  const scenarios = getScenarios(model);\n\n  // Map the existing scenarios to a new array\n  const newScenarios = scenarios.map(scenario => {\n    // If this scenario is the one to be updated\n    if (scenario.id === scenarioId) {\n      // Construct new phase sensitivity array\n      const newPhaseSensitivity = values.map(value => {\n        // Check date is valid\n        const m = moment(value.start, DATE_FORMAT, true);\n        if (!m.isValid()) {\n          throw new InconsistentArgumentError(\n            `Date ${value.start} was not in the required format '${DATE_FORMAT}'`\n          );\n        }\n\n        // Return value as new sensitivity\n        return value;\n      });\n\n      // Return the new scenario in same location\n      return {\n        ...scenario,\n        phaseSensitivity: newPhaseSensitivity,\n      };\n    } else {\n      // Return existing scenario\n      return scenario;\n    }\n  });\n\n  // Return model with scenarios updated\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getScenarios } from '../Scenario';\n\n// Flow Types\nimport { type Model, type PhaseCostSensitivity } from '../../types';\n\nexport function setPhaseCostSensitivityValues(\n  model: Model,\n  scenarioId: string,\n  values: PhaseCostSensitivity\n): Model {\n  // Retrieve existing scenarios\n  const scenarios = getScenarios(model);\n\n  // Map the existing scenarios to a new array\n  const newScenarios = scenarios.map(scenario => {\n    // If this scenario is the one to be updated\n    if (scenario.id === scenarioId) {\n      // Return the new scenario in same location\n      return {\n        ...scenario,\n        phaseCostSensitivity: values,\n      };\n    } else {\n      // Return existing scenario\n      return scenario;\n    }\n  });\n\n  // Return model with scenarios updated\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        scenarios: newScenarios,\n      },\n    ],\n  };\n}\n","// @flow\n// API Functions\nimport { getProgramme } from '../Programme';\n\n// Model Errors\nimport { InvalidModelError, InconsistentArgumentError, InvalidUpdateError } from '../../errors';\n\n// Flow Types\nimport type { Model } from '../../types';\n\n/**\n * Returns the element at the provided location in the matrix (referenced by id)\n * @param {Model} model model instance\n * @param {Array<string>} location array of string ids indicating location within matrix\n * @return {number} entry at location\n **/\nexport function getStakeholderBenefitsEntry(model: Model, location: Array<string>): number {\n  const programme = getProgramme(model);\n  if (!programme.stakeholderBenefits) {\n    throw new InvalidModelError(\n      \"The programme did not contain the 'stakeholderBenefits' attribute\"\n    );\n  } else if (!programme.stakeholderBenefits[location[0]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'stakeholderBenefits' did not contain a key for ${location[0]}`\n    );\n  } else if (!programme.stakeholderBenefits[location[0]][location[1]]) {\n    throw new InconsistentArgumentError(\n      `The programme 'stakeholderBenefits' did not contain the secondary key ${location[1]}`\n    );\n  } else if (typeof programme.stakeholderBenefits[location[0]][location[1]] === 'number') {\n    throw new InvalidModelError(`Entry at location ${location[0]}-${location[1]} was not a number`);\n  } else if (Number.isNaN(programme.stakeholderBenefits[location[0]][location[1]])) {\n    throw new InvalidModelError(\n      `Entry at location ${location[0]}-${location[1]} was NaN (not a number)`\n    );\n  }\n\n  return programme.stakeholderBenefits[location[0]][location[1]];\n}\n\n/**\n * Update the stakeholder benefits in the model with a type-checked set of new values\n * @param {Model} model model instance\n * @param {Matrix2D} values values to update with\n * @return {Model} updated model instance\n */\nexport function setStakeholderBenefits(\n  model: Model,\n  values: { [string]: { [string]: number } }\n): Model {\n  // Throw error if values is undefined\n  if (!values) {\n    throw new InvalidUpdateError('Tried to update stakeholder benefits with undefined values');\n  }\n\n  // Get programme instance\n  const programme = getProgramme(model);\n\n  // Throw error if stakeholderBenefits not defined\n  if (!programme.stakeholderBenefits) {\n    throw new InvalidModelError(\n      \"The programme did not contain the 'stakeholderBenefits' attribute\"\n    );\n  }\n\n  // Extract benefit ids from provided values\n  const benefitIds = Object.keys(values);\n  const benefitIdsValid = benefitIds.reduce(\n    (acc, id) => acc && programme.benefits.map(b => b.id).includes(id),\n    true\n  );\n  if (!benefitIdsValid || benefitIds.length !== programme.benefits.length) {\n    throw new InvalidUpdateError('The benefit keys in the provided update values were invalid');\n  }\n\n  // Extract stakeholder ids from provided values\n  const stakeholderIds = Object.keys(values[benefitIds[0]]);\n  const stakeholderIdsValid = stakeholderIds.reduce(\n    (acc, id) => acc && programme.stakeholders.map(i => i.id).includes(id),\n    true\n  );\n  if (!stakeholderIdsValid || stakeholderIds.length !== programme.stakeholders.length) {\n    throw new InvalidUpdateError('The stakeholder keys in the provided update values were invalid');\n  }\n\n  // Create a new object which we will insert type checked values\n  const newMatrix = {};\n\n  // Loop each benefit id...\n  benefitIds.forEach(bId => {\n    // Declare an object to store benefit data in\n    const newBenefitObject = {};\n\n    stakeholderIds.forEach(sId => {\n      // If value is properly defined and a number update matrix\n      if (typeof values[bId][sId] === 'number' && !Number.isNaN(values[bId][sId])) {\n        // Set benefit object stakeholder key to values\n        newBenefitObject[sId] = values[bId][sId];\n      } else if (!values[bId][sId]) {\n        // Throw error if stakeholder object not defined for this benefit\n        throw new InvalidUpdateError(\n          'Tried to update stakeholder benefits when values did not have the correct stakeholder keys'\n        );\n      } else {\n        // Throw error if value was not a number (NaN or different type)\n        throw new InvalidUpdateError(\n          'Tried to update stakeholder benefits when some values were not a number'\n        );\n      }\n    });\n\n    // Update the matrix object with the benefit object\n    newMatrix[bId] = newBenefitObject;\n  });\n\n  // Finally, return new model instance with benefit buildup swapped out\n  return {\n    ...model,\n    programmes: [\n      {\n        ...programme,\n        stakeholderBenefits: newMatrix,\n      },\n    ],\n  };\n}\n","// @flow\n// ID Generator\nimport nanoId from 'nanoid';\n\n// API Functions\nimport { getProgramme } from '../Programme';\nimport { getMeasureById } from '../Measure';\n\n// Model Errors\nimport { InvalidModelError, InvalidUpdateError, InconsistentArgumentError } from '../../errors';\n\n// Flow Types\nimport type { Theme, ThemeData, Model } from '../../types';\n\nlet newCount = 0;\n\n/**\n * Returns the array of themes from the programme instance\n * @param {Model} model model instance\n * @return {Array<Theme>} array of stakeholders\n **/\nexport function getThemes(model: Model): Array<Theme> {\n  const programme = getProgramme(model);\n  if (!programme.themes) {\n    throw new InvalidModelError('Programme did not contain an array of themes');\n  } else if (!Array.isArray(programme.themes)) {\n    throw new InvalidModelError(\"Programme 'themes' was not an array\");\n  }\n  return programme.themes;\n}\n\n/**\n * Returns a specific theme from the programme instance based on provided id\n * @param {Model} model model instance\n * @param {string} id theme id\n * @return {Theme} theme with provided id\n **/\nexport function getThemeById(model: Model, id: string): Theme {\n  const themes = getThemes(model);\n  const found = themes.find(theme => theme.id === id);\n\n  if (!found) {\n    throw new InconsistentArgumentError(`Could not find theme in programme with id ${id}`);\n  }\n\n  return found;\n}\n\nfunction checkThemeData(theme: ThemeData, model: Model): boolean {\n  if (theme.hasOwnProperty('name')) {\n    if (typeof theme.name !== 'string' || theme.name.length === 0) {\n      throw new InvalidUpdateError(\n        'Provided theme update value name was not a string (or it was empty)'\n      );\n    }\n  }\n  if (theme.hasOwnProperty('measures')) {\n    if (!Array.isArray(theme.measures)) {\n      throw new InvalidUpdateError('Provided theme update value measures was not an array');\n    }\n\n    theme.measures.forEach(measureId => {\n      getMeasureById(model, measureId);\n    });\n  }\n  return true;\n}\n\n/**\n * Returns a new model instance with a new theme (with data if provided)\n * @param {Model} model model instance\n * @param {ThemeData} theme optional theme data to store as theme\n * @return {Model} updated model instance\n */\nexport function newTheme(model: Model, theme?: ThemeData, id?: string): Model {\n  // Create new theme id\n  const newThemeId = id || nanoId();\n\n  // Default new theme\n  let themeData = {\n    id: newThemeId,\n    name: `New Theme ${++newCount}`,\n    measures: [],\n  };\n\n  if (theme) {\n    // Check validity of theme data\n    checkThemeData(theme, model);\n\n    // Override default theme data\n    themeData = { ...themeData, ...theme };\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        themes: [...model.programmes[0].themes, themeData],\n      },\n    ],\n  };\n}\n\n/**\n * Removes a theme with provided in from model instance\n * @param {Model} model model instance\n * @param {string} id theme id\n * @returns {Model} updated model instance\n */\nexport function removeThemeById(model: Model, id: string): Model {\n  if (!model.programmes[0].themes.find(s => s.id === id)) {\n    throw new InconsistentArgumentError(\n      `No theme with id '${id}' was contained in the model instance`\n    );\n  }\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        themes: model.programmes[0].themes.filter(s => s.id !== id),\n      },\n    ],\n  };\n}\n\n/**\n * Sets a theme's attributes by id\n * @param {Model} model model instance\n * @param {string} id theme id\n * @param {ThemeData} theme new theme\n * @return {Model} updated model instance\n */\nexport function updateThemeById(model: Model, id: string, theme: ThemeData): Model {\n  const found = model.programmes[0].themes.find(s => s.id === id);\n  if (!found) {\n    throw new InconsistentArgumentError(\n      `No theme with id '${id}' was contained in the model instance`\n    );\n  }\n\n  // Check validity of data\n  checkThemeData(theme, model);\n\n  return {\n    ...model,\n    programmes: [\n      {\n        ...model.programmes[0],\n        themes: model.programmes[0].themes.map(t =>\n          t.id === id\n            ? {\n                ...t,\n                name: theme.hasOwnProperty('name') ? theme.name : t.name,\n                measures: theme.hasOwnProperty('measures') ? theme.measures : t.measures,\n              }\n            : t),\n      },\n    ],\n  };\n}\n","// @flow\n// Re-export API components\nexport * from './components/BalancedScorecard';\nexport * from './components/Beneficiary';\nexport * from './components/Benefit';\nexport * from './components/BenefitSensitivity';\nexport * from './components/BenefitAttribution';\nexport * from './components/BenefitBuildup';\nexport * from './components/BenefitBuildupSensitivity';\nexport * from './components/Cost';\nexport * from './components/CostAttribution';\nexport * from './components/Deliverable';\nexport * from './components/DeliverableSensitivity';\nexport * from './components/Group';\nexport * from './components/Measure';\nexport * from './components/Model';\nexport * from './components/Objective';\nexport * from './components/Parameter';\nexport * from './components/Perspective';\nexport * from './components/Phase';\nexport * from './components/PhaseSensitivity';\nexport * from './components/PhaseCostSensitivity';\nexport * from './components/Programme';\nexport * from './components/Scenario';\nexport * from './components/Stakeholder';\nexport * from './components/StakeholderBenefits';\nexport * from './components/Thread';\nexport * from './components/Theme';\n"],"sourceRoot":""}