{"version":3,"sources":["actions/scorecard.js","components/Explorer/index.js","components/Explorer/Explorer.js","tiles/StrategyMap/selectors.js","tiles/StrategyMap/StrategyMap.js","tiles/StrategyMap/index.js"],"names":["__webpack_require__","d","__webpack_exports__","setSelectedStrategyItem","setStrategyItemExpanded","setActiveScorecardMonth","_types__WEBPACK_IMPORTED_MODULE_0__","element","type","SET_SELECTED_STRATEGY_ITEM","id","expanded","SET_STRATEGY_ITEM_EXPANDED","month","SET_ACTIVE_SCORECARD_MONTH","Explorer","props","react_default","a","createElement","tree","contents","nodes","onNodeClick","handleNodeClick","onNodeCollapse","handleNodeCollapse","onNodeExpand","handleNodeExpand","comparePerspectives","perspective1","perspective2","name","includes","localeCompare","getStrategyNodes","state","_state$scorecard$stra","scorecard","strategyMap","selected","sortedPerspectives","getPerspectives","model","concat","sort","toMeasureNode","measure","label","unitOfMeasure","CONSTANTS","isExpanded","isSelected","icon","toObjectiveNode","objective","childNodes","getMeasures","filter","m","objectiveId","map","perspectiveRagNodes","perspective","perspectiveId","strategyNode","getObjectives","o","connect","dispatch","node","nodePath","StrategyMap"],"mappings":"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","file":"static/js/18.cef3a7e6.chunk.js","sourcesContent":["// @flow\nimport {\n  SET_SELECTED_STRATEGY_ITEM,\n  SET_STRATEGY_ITEM_EXPANDED,\n  SET_ACTIVE_SCORECARD_MONTH,\n} from './types';\n\nimport type {\n  SetSelectedStrategyItemAction,\n  SetStrategyItemExpandedAction,\n  SetActiveScorecardMonthAction,\n} from './types';\n\nimport { type MonthOption, type StrategyItem } from '../reducers/types';\n\nexport const setSelectedStrategyItem = (element: StrategyItem): SetSelectedStrategyItemAction => ({\n  type: SET_SELECTED_STRATEGY_ITEM,\n  element,\n});\n\nexport const setStrategyItemExpanded = (\n  id: string,\n  expanded: boolean\n): SetStrategyItemExpandedAction => ({\n  type: SET_STRATEGY_ITEM_EXPANDED,\n  id,\n  expanded,\n});\n\nexport const setActiveScorecardMonth = (month: MonthOption): SetActiveScorecardMonthAction => ({\n  type: SET_ACTIVE_SCORECARD_MONTH,\n  month,\n});\n","// @flow\nimport Explorer from './Explorer';\nexport default Explorer;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\nimport { Tree } from '@blueprintjs/core';\n\nimport type { ExplorerProps } from './types';\n\nexport default (props: ExplorerProps): Node => (\n  <Tree\n    contents={props.nodes}\n    onNodeClick={props.handleNodeClick}\n    onNodeCollapse={props.handleNodeCollapse}\n    onNodeExpand={props.handleNodeExpand}\n  />\n);\n","// @flow\nimport * as CONSTANTS from '../../config/constants';\nimport type { State, ExplorerNode } from '../../reducers/types';\nimport type { Perspective } from '../../model/api/types';\n\nimport { getPerspectives, getObjectives, getMeasures } from '../../model/api';\n\nfunction comparePerspectives(perspective1: Perspective, perspective2: Perspective): number {\n  switch (perspective1.name) {\n    case 'Financial':\n      return -1;\n    case 'Customer':\n      return perspective2.name !== 'Financial' ? -1 : 1;\n    case 'Process':\n      return !['Financial', 'Customer'].includes(perspective2.name) ? -1 : 1;\n    case 'Resource':\n      return !['Financial', 'Customer', 'Process'].includes(perspective2.name) ? -1 : 1;\n    default:\n      return perspective1.name.localeCompare(perspective2.name);\n  }\n}\n\nfunction sortPerspectives(perspectives: Array<Perspective>): Array<Perspective> {\n  return perspectives.concat().sort(comparePerspectives);\n}\n\nexport function getStrategyNodes(state: State): Array<ExplorerNode> {\n  // Extract selected element and expanded elements from redux store\n  const { selected, expanded } = state.scorecard.strategyMap;\n\n  // Sort perspectives into correct order\n  const sortedPerspectives = sortPerspectives(getPerspectives(state.model));\n\n  // Define function to match perspectives <- objectives, and objectives <- measures\n  const matchingObjective = id => m => m.objectiveId === id;\n  const matchingPerspective = id => o => o.perspectiveId === id;\n\n  // Define function to create perspective, objective, measure node\n  const toMeasureNode = measure => ({\n    id: measure.id,\n    label: `${measure.name} (${measure.unitOfMeasure})`,\n    type: CONSTANTS.MEASURE_TYPE,\n    isExpanded: expanded[measure.id],\n    isSelected: selected && selected.id === measure.id ? true : false,\n    icon: CONSTANTS.MEASURE_ICON,\n  });\n  const toObjectiveNode = objective => ({\n    id: objective.id,\n    label: objective.name,\n    type: CONSTANTS.OBJECTIVE_TYPE,\n    isExpanded: expanded[objective.id],\n    isSelected: selected && selected.id === objective.id ? true : false,\n    icon: CONSTANTS.OBJECTIVE_ICON,\n    childNodes: getMeasures(state.model)\n      .filter(matchingObjective(objective.id))\n      .map(toMeasureNode),\n  });\n  const toPerspectiveNode = perspective => ({\n    id: perspective.id,\n    label: perspective.name,\n    type: CONSTANTS.PERSPECTIVE_TYPE,\n    isExpanded: typeof expanded[perspective.id] === 'boolean' ? expanded[perspective.id] : true,\n    isSelected: selected && selected.id === perspective.id ? true : false,\n    icon: CONSTANTS.PERSPECTIVE_ICON,\n    childNodes: getObjectives(state.model)\n      .filter(matchingPerspective(perspective.id))\n      .map(toObjectiveNode),\n  });\n\n  // Create Perspective RAG components\n  const perspectiveRagNodes = getPerspectives(state.model).map(perspective => {\n    const id = `${CONSTANTS.PERSPECTIVE_RAG_ID}_${perspective.id}`;\n    return {\n      id,\n      label: `${perspective.name} ${CONSTANTS.PERSPECTIVE_RAG_NAME}`,\n      type: CONSTANTS.PERSPECTIVE_RAG_TYPE,\n      isSelected: selected && selected.id === id ? true : false,\n      icon: CONSTANTS.PERSPECTIVE_RAG_ICON,\n      perspectiveId: perspective.id,\n    };\n  });\n\n  // Create root node\n  const strategyNode = {\n    id: CONSTANTS.STRATEGY_ROOT_TYPE.id,\n    label: CONSTANTS.STRATEGY_ROOT_TYPE.name,\n    type: CONSTANTS.STRATEGY_ROOT_TYPE,\n    isExpanded: expanded[CONSTANTS.STRATEGY_ROOT_TYPE.id],\n    isSelected: selected && selected.id === CONSTANTS.STRATEGY_ROOT_TYPE.id ? true : false,\n    icon: CONSTANTS.STRATEGY_ROOT_TYPE.icon,\n    childNodes: sortedPerspectives.map(toPerspectiveNode),\n  };\n\n  // Create data input node\n  const dataInputNode = {\n    id: CONSTANTS.STRATEGY_DATA_TYPE.id,\n    label: CONSTANTS.STRATEGY_DATA_TYPE.name,\n    type: CONSTANTS.STRATEGY_DATA_TYPE,\n    isExpanded: expanded[CONSTANTS.STRATEGY_DATA_TYPE.id],\n    isSelected: selected && selected.id === CONSTANTS.STRATEGY_DATA_TYPE.id ? true : false,\n    icon: CONSTANTS.STRATEGY_DATA_TYPE.icon,\n  };\n\n  // Create rag view nodes\n  const ragViewNode = {\n    id: CONSTANTS.SCORECARD_RAG_ID,\n    label: CONSTANTS.SCORECARD_RAG_NAME,\n    type: CONSTANTS.SCORECARD_RAG_TYPE,\n    isExpanded: expanded[CONSTANTS.SCORECARD_RAG_ID],\n    isSelected: selected && selected.id === CONSTANTS.SCORECARD_RAG_ID ? true : false,\n    icon: CONSTANTS.SCORECARD_RAG_ICON,\n    childNodes: perspectiveRagNodes,\n  };\n\n  // Return as array\n  return [dataInputNode, ragViewNode, strategyNode];\n}\n","// @flow\nimport { connect } from 'react-redux';\nimport { getStrategyNodes } from './selectors';\nimport { setStrategyItemExpanded, setSelectedStrategyItem } from '../../actions/scorecard';\n\n// Reusable Components\nimport Explorer from '../../components/Explorer';\n\n// Flow Types\nimport { type State } from '../../reducers/types';\nimport { type Dispatch } from '../../actions/types';\n\n// Redux map state => props\nconst mapStateToProps = (state: State) => ({\n  nodes: getStrategyNodes(state),\n});\n\n// Redux map dispatch => props\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  handleNodeClick: (node, nodePath) => {\n    node.isSelected = true;\n    dispatch(\n      setSelectedStrategyItem({\n        id: node.id,\n        type: node.type.id,\n        perspectiveId: node.perspectiveId,\n      })\n    );\n  },\n  handleNodeCollapse: node => {\n    node.isExpanded = false;\n    dispatch(setStrategyItemExpanded(node.id, false));\n  },\n  handleNodeExpand: node => {\n    node.isExpanded = true;\n    dispatch(setStrategyItemExpanded(node.id, true));\n  },\n});\n\n// Inject props\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Explorer);\n","// @flow\nimport StrategyMap from './StrategyMap';\nexport default StrategyMap;\n"],"sourceRoot":""}