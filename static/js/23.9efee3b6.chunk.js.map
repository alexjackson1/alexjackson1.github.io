{"version":3,"sources":["tiles/GraphSelector/selectors.js","tiles/GraphSelector/index.js","actions/analysis.js"],"names":["getSelectedGraph","state","selected","analysis","Array","isArray","keys","utils","type","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","model","programmes","key","map","e","id","CONSTANTS","typeKey","filter","b","getCostOfCapital","costOfCapital","toDecimalPercent","value","rounded","Math","round","concat","Number","isInteger","CostOfCapitalSlider","_ref","handleRelease","_React$useState","React","useState","_React$useState2","slicedToArray","currentValue","setCurrentValue","react_default","a","createElement","formGroup","style","padding","label","slider","labelRenderer","onRelease","newValue","onChange","max","min","labelStepSize","stepSize","large","AnalysisControls","_ref2","handleCostOfCapitalUpdate","GraphSelector_CostOfCapitalSlider","GraphOptions","_ref3","handleGraphChange","html","marginLeft","menu","graph","menuItem","text","pluralize","singular","name","icon","onClick","active","Divider","connect","dispatch","SET_SELECTED_GRAPH","setSelectedGraph","SET_COST_OF_CAPITAL","_ref4","GraphSelector_AnalysisControls","GraphSelector_GraphOptions"],"mappings":"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","file":"static/js/23.9efee3b6.chunk.js","sourcesContent":["// @flow\nimport * as CONSTANTS from '../../config/constants';\nimport * as utils from '../../utils/utils';\n\nimport { type State, type GraphObject } from '../../reducers/types';\n\nexport function getSelectedGraph(state: State): ?GraphObject {\n  const { selected } = state.analysis;\n\n  if (!selected) {\n    return undefined;\n  }\n\n  if (!Array.isArray(selected.keys) && utils.isTypeId(selected.keys)) {\n    const type = utils.getTypeObject(selected.keys);\n\n    return {\n      ...selected,\n      keys: state.model.programmes[0][type.key].map(e => e.id),\n    };\n  }\n\n  if (selected.keys === CONSTANTS.BENEFIT_TYPE_FINANCIAL) {\n    const typeKey = CONSTANTS.BENEFIT_KEY;\n    return {\n      ...selected,\n      keys: state.model.programmes[0][typeKey]\n        .filter(b => b.type === CONSTANTS.BENEFIT_TYPE_FINANCIAL)\n        .map(b => b.id),\n    };\n  }\n\n  return selected;\n}\n\nexport function getCostOfCapital(state: State) {\n  return state.analysis.costOfCapital;\n}\n","// @flow\nimport React from 'react';\n\n// Plural library\nimport pluralize from 'pluralize';\n\n// Connected Component\nimport { connect } from 'react-redux';\nimport * as CONSTANTS from '../../config/constants';\n\nimport { setSelectedGraph, setCostOfCapital } from '../../actions/analysis';\nimport { getSelectedGraph, getCostOfCapital } from './selectors';\n\n// Blueprint Components\nimport { Menu, MenuItem, FormGroup, Slider, H5 } from '@blueprintjs/core';\n\nconst toDecimalPercent = (value: number) => {\n  const rounded = Math.round(value * 10) / 10;\n  return `${rounded}${Number.isInteger(rounded) ? '.0' : ''}%`;\n};\n\nconst CostOfCapitalSlider = ({ value, handleRelease }) => {\n  const [currentValue, setCurrentValue] = React.useState(value);\n  return (\n    <FormGroup\n      style={{ padding: '7px' }}\n      label={`Cost of Capital: ${toDecimalPercent(currentValue * 100)}`}\n    >\n      <div style={{ padding: '5px 25px' }}>\n        <Slider\n          value={currentValue * 100}\n          labelRenderer={toDecimalPercent}\n          onRelease={newValue => handleRelease(Math.round(newValue * 100) / 10000)}\n          onChange={newValue => setCurrentValue(Math.round(newValue * 100) / 10000)}\n          max={25}\n          min={0}\n          labelStepSize={5}\n          stepSize={0.5}\n          large\n        />\n      </div>\n    </FormGroup>\n  );\n};\n\nconst AnalysisControls = ({ costOfCapital, handleCostOfCapitalUpdate }) => (\n  <CostOfCapitalSlider value={costOfCapital} handleRelease={handleCostOfCapitalUpdate} />\n);\n\nconst GraphOptions = ({ handleGraphChange, selected }) => {\n  return (\n    <div>\n      <H5 style={{ marginLeft: 10 }}>Analysis Graphs</H5>\n      <Menu>\n        {CONSTANTS.MAIN_GRAPHS.map(graph => (\n          <MenuItem\n            text={pluralize.singular(graph.name)}\n            key={graph.id}\n            icon={graph.icon}\n            onClick={() => handleGraphChange(graph)}\n            active={selected && graph.id === selected.id}\n          />\n        ))}\n        <Menu.Divider />\n        {CONSTANTS.BENEFIT_GRAPHS.map(graph => (\n          <MenuItem\n            text={pluralize.singular(graph.name)}\n            key={graph.id}\n            icon={graph.icon}\n            onClick={() => handleGraphChange(graph)}\n            active={selected && graph.id === selected.id}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nconst GraphSelector = ({\n  selected,\n  costOfCapital,\n  handleGraphChange,\n  handleCostOfCapitalUpdate,\n}) => {\n  return (\n    <div>\n      <AnalysisControls\n        costOfCapital={costOfCapital}\n        handleCostOfCapitalUpdate={handleCostOfCapitalUpdate}\n      />\n      <GraphOptions selected={selected} handleGraphChange={handleGraphChange} />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  selected: getSelectedGraph(state),\n  costOfCapital: getCostOfCapital(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleGraphChange: graph => dispatch(setSelectedGraph(graph)),\n  handleCostOfCapitalUpdate: costOfCapital => dispatch(setCostOfCapital(costOfCapital)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GraphSelector);\n","// @flow\nimport { SET_COST_OF_CAPITAL, SET_SELECTED_GRAPH } from './types';\nimport { type SetCostOfCapitalAction } from './types';\n\nexport function setSelectedGraph(graph: any) {\n  return {\n    type: SET_SELECTED_GRAPH,\n    graph,\n  };\n}\n\nexport function setCostOfCapital(value: number): SetCostOfCapitalAction {\n  return {\n    type: SET_COST_OF_CAPITAL,\n    value,\n  };\n}\n"],"sourceRoot":""}