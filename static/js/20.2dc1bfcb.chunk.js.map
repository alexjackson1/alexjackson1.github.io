{"version":3,"sources":["components/Explorer/index.js","components/Explorer/Explorer.js","tiles/CertaintyExplorer/selectors.js","actions/certainty.js","tiles/CertaintyExplorer/CertaintyExplorer.js","tiles/CertaintyExplorer/index.js"],"names":["Explorer","props","react_default","a","createElement","tree","contents","nodes","onNodeClick","handleNodeClick","onNodeCollapse","handleNodeCollapse","onNodeExpand","handleNodeExpand","getCertaintyNodes","state","_state$certainty$expl","certainty","explorer","selected","expanded","scenarios","model","programmes","map","scenario","scenarioNode","node","id","scenarioId","label","name","type","CONSTANTS","isExpanded","isSelected","icon","childNodes","sensitivity","concat","Object","objectSpread","setCertaintyElementExpanded","SET_CERTAINTY_ELEMENT_EXPANDED","connect","dispatch","nodePath","element","SET_SELECTED_CERTAINTY_ELEMENT","CertaintyExplorer"],"mappings":"wHAEeA,ICMA,SAACC,GAAD,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,SAAUL,EAAMM,MAChBC,YAAaP,EAAMQ,gBACnBC,eAAgBT,EAAMU,mBACtBC,aAAcX,EAAMY,uFCTjB,SAASC,EAAkBC,GAA+D,IAAAC,EAEhED,EAAME,UAAUC,SAAvCC,EAFuFH,EAEvFG,SAAUC,EAF6EJ,EAE7EI,SAGVC,EAAcN,EAAMO,MAAMC,WAAW,GAArCF,UAcR,OAAOA,EAAUG,IAAI,SAAAC,GACnB,IAbuBC,EAajBC,EAAO,CACXC,GAAIH,EAASG,GACbC,WAAYJ,EAASG,GACrBE,MAAOL,EAASM,KAChBC,KAAMC,KACNC,WAAYd,EAASK,EAASG,IAC9BO,cAAYhB,GAAYA,EAASS,KAAOH,EAASG,IACjDQ,KAAM,cAEFC,GAtBiBX,EAsBaC,EArBpCM,KAAwBT,IAAI,SAAAc,GAAW,MAAK,CAC1CV,GAAE,GAAAW,OAAKb,EAAaE,GAAlB,KAAAW,OAAwBD,EAAYV,IACtCE,MAAOQ,EAAYP,KACnBC,KAAMM,EACNJ,WAAYd,EAAQ,GAAAmB,OAAIb,EAAaE,GAAjB,KAAAW,OAAuBD,EAAYV,KACvDO,cAAYhB,GAAYA,EAASS,KAAT,GAAAW,OAAmBb,EAAaE,GAAhC,KAAAW,OAAsCD,EAAYV,KAC1EQ,KAAME,EAAYF,KAClBP,WAAYH,EAAaE,OAe3B,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACFb,EADL,CAEEU,6BCxBOK,EAA8B,SACzCd,EACAR,GAFyC,MAGR,CACjCY,KAAMW,IACNf,KACAR,sBCgBawB,cArBS,SAAC7B,GAAD,MAAmB,CACzCR,MAAOO,EAAkBC,KAIA,SAAC8B,GAAD,MAAyB,CAClDpC,gBAAiB,SAACkB,EAAMmB,GDfiB,IAACC,ECgBxCpB,EAAKQ,YAAa,EAClBU,GDjBwCE,ECiBHpB,EDdL,CAClCK,KAAMgB,IACND,cCcApC,mBAAoB,SAAAgB,GAClBA,EAAKO,YAAa,EAClBW,EAASH,EAA4Bf,EAAKC,IAAI,KAEhDf,iBAAkB,SAAAc,GAChBA,EAAKO,YAAa,EAClBW,EAASH,EAA4Bf,EAAKC,IAAI,OAKnCgB,CAGb5C,KCnCaiD","file":"static/js/20.2dc1bfcb.chunk.js","sourcesContent":["// @flow\nimport Explorer from './Explorer';\nexport default Explorer;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\nimport { Tree } from '@blueprintjs/core';\n\nimport type { ExplorerProps } from './types';\n\nexport default (props: ExplorerProps): Node => (\n  <Tree\n    contents={props.nodes}\n    onNodeClick={props.handleNodeClick}\n    onNodeCollapse={props.handleNodeCollapse}\n    onNodeExpand={props.handleNodeExpand}\n  />\n);\n","// @flow\nimport * as CONSTANTS from '../../config/constants';\nimport { type ExplorerNode, type State } from '../../reducers/types';\n\nexport function getCertaintyNodes(state: State): Array<{ ...ExplorerNode, scenarioId?: string }> {\n  // Extract selected element and expanded elements from redux store\n  const { selected, expanded } = state.certainty.explorer;\n\n  // Extract scenarios from model\n  const { scenarios } = state.model.programmes[0];\n\n  const createChildNodes = scenarioNode =>\n    CONSTANTS.SENSITIVITIES.map(sensitivity => ({\n      id: `${scenarioNode.id}_${sensitivity.id}`,\n      label: sensitivity.name,\n      type: sensitivity,\n      isExpanded: expanded[`${scenarioNode.id}_${sensitivity.id}`],\n      isSelected: selected && selected.id === `${scenarioNode.id}_${sensitivity.id}` ? true : false,\n      icon: sensitivity.icon,\n      scenarioId: scenarioNode.id,\n    }));\n\n  // Create root nodes\n  return scenarios.map(scenario => {\n    const node = {\n      id: scenario.id,\n      scenarioId: scenario.id,\n      label: scenario.name,\n      type: CONSTANTS.SCENARIO_TYPE,\n      isExpanded: expanded[scenario.id],\n      isSelected: selected && selected.id === scenario.id ? true : false,\n      icon: 'comparison',\n    };\n    const childNodes = createChildNodes(node);\n    return {\n      ...node,\n      childNodes,\n    };\n  });\n}\n","import { SET_SELECTED_CERTAINTY_ELEMENT, SET_CERTAINTY_ELEMENT_EXPANDED } from './types';\nimport type { SetSelectedCertaintyElement, SetCertaintyElementExpanded } from './types';\nimport type { TypeObject } from '../utils/utils';\n\nexport const setSelectedCertaintyElement = (element: {\n  id: string,\n  type: TypeObject,\n}): SetSelectedCertaintyElement => ({\n  type: SET_SELECTED_CERTAINTY_ELEMENT,\n  element,\n});\n\nexport const setCertaintyElementExpanded = (\n  id: string,\n  expanded: boolean\n): SetCertaintyElementExpanded => ({\n  type: SET_CERTAINTY_ELEMENT_EXPANDED,\n  id,\n  expanded,\n});\n","// @flow\nimport { connect } from 'react-redux';\nimport { getCertaintyNodes } from './selectors';\nimport { setCertaintyElementExpanded, setSelectedCertaintyElement } from '../../actions/certainty';\n\n// Reusable Components\nimport Explorer from '../../components/Explorer';\n\n// Flow Types\nimport { type State } from '../../reducers/types';\nimport { type Dispatch } from '../../actions/types';\n\n// Redux map state => props\nconst mapStateToProps = (state: State) => ({\n  nodes: getCertaintyNodes(state),\n});\n\n// Redux map dispatch => props\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  handleNodeClick: (node, nodePath) => {\n    node.isSelected = true;\n    dispatch(setSelectedCertaintyElement(node, nodePath));\n  },\n  handleNodeCollapse: node => {\n    node.isExpanded = false;\n    dispatch(setCertaintyElementExpanded(node.id, false));\n  },\n  handleNodeExpand: node => {\n    node.isExpanded = true;\n    dispatch(setCertaintyElementExpanded(node.id, true));\n  },\n});\n\n// Inject props\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Explorer);\n","// @flow\nimport CertaintyExplorer from './CertaintyExplorer';\nexport default CertaintyExplorer;\n"],"sourceRoot":""}