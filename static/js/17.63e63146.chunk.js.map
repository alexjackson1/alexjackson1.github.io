{"version":3,"sources":["actions/model.js","actions/editor.js","components/ModelUploadDialog/index.js","model/api/results/calculate.js","components/UpdateModelButton/index.js","model/api/results/index.js","views/AppView.js"],"names":["updateAtom","id","key","values","updatedValues","CONSTANTS","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","duration","Number","parseFloat","type","types","deleteAtom","dispatch","getStore","store","editor","explorer","selected","utils","nodeToSelect","icon","isSelected","isExpanded","label","name","nodePath","push","API","model","setSelectedElement","duplicateAtom","source","find","element","withoutUnique","reference","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","addAtom","nanoId","programme","modelId","programmeId","programmes","length","concat","setNodeExpanded","updateMatrix","Error","addPhaseLink","sourceId","targetId","linkType","deletePhaseLink","updateSensitivity","scenarioId","typeKey","updateModel","node","path","SET_SELECTED_ELEMENT","expanded","SET_NODE_EXPANDED","jumpToElement","getState","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","connect","processFile","event","JSON","parse","target","result","_ref","open","onUpload","react_default","a","createElement","dialog","isOpen","style","padding","fileInput","text","fill","onInputChange","reader","FileReader","onload","file","files","readAsText","presentValue","wasm","valueForMoney","console","log","benefitsVsPhases","benefitsVsYears","benefitMatrix","benefitSchedule","keys","forEach","benefitKeys","reduce","sum","undefined","newArray","value","index","costsVsYears","costMatrix","costSchedule","costTypes","benefitsVsDeliverables","benefitsVsStakeholders","benefitsVsGroups","benefitsVsMeasures","deliverablesVsStakeholders","deliverablesVsMeasures","stakeholdersVsGroups","state","currentModel","ownProps","newModel","objectSpread","results","dcf","calculate","vfm","benefitVsPhases","benefitVsDeliverables","benefitVsStakeholders","benefitVsGroups","benefitVsMeasures","deliverableVsStakeholders","deliverableVsMeasures","stakeholderVsGroups","calculateResults","e","error","AppToaster","show","message","buttons","intent","Intent","SUCCESS","onClick","ModelEditor","lazy","Promise","all","__webpack_require__","then","bind","AnalysisView","BalancedScorecard","Certainty","Staging","AppView","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","active","uploadVisible","handleChangeActive","assertThisInitialized","renderView","handleModelSelect","setState","dark","_this2","navbar","backgroundColor","Group","align","Alignment","LEFT","Heading","height","src","alt","maxHeight","Divider","className","RIGHT","popover","content","menu","Item","handleDarkModeToggle","display","text_text","tag","marginLeft","PRIMARY","DANGER","user","displayName","rightIcon","minimal","divider","disabled","components_UpdateModelButton","_this3","document","body","width","components_ModelUploadDialog","renderHeader","react","fallback","Loading","Component","auth","isAuthenticated"],"mappings":"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","file":"static/js/17.63e63146.chunk.js","sourcesContent":["// @flow\nimport nanoId from 'nanoid';\nimport { setSelectedElement, setNodeExpanded } from './editor';\n\nimport * as API from '../model/api';\nimport * as CONSTANTS from '../config/constants';\nimport * as types from './types';\nimport * as utils from '../utils/utils';\n\nimport { type Model } from '../model/api/types';\n\ntype Values = {\n  [string]: string | number,\n};\n\n/**\n * Returns an action which will update an atom with the provieded values\n * @param {string} id id of element to update\n * @param {string} key key of element type\n * @param {Object} values values with which to update atom\n */\nexport function updateAtom(\n  id: string,\n  key: types.AtomicKey,\n  values: Values\n): types.UpdateAtomAction {\n  // Try to pass numeric values as number before returning action\n  let updatedValues = values;\n  switch (key) {\n    case CONSTANTS.PHASE_KEY:\n      updatedValues = {\n        ...updatedValues,\n        duration:\n          typeof updatedValues.duration === 'string'\n            ? Number.parseFloat(updatedValues.duration)\n            : updatedValues.duration,\n      };\n      break;\n    default:\n      break;\n  }\n\n  return {\n    type: types.UPDATE_ATOM,\n    id,\n    key,\n    values: updatedValues,\n  };\n}\n\n/**\n * Thunk-type action which removes an atom from the model\n * @param {string} id id of atom to delete\n * @param {string} key key of the atom to delete\n */\nexport function deleteAtom(id: string, key: string): types.ThunkAction {\n  // Retun thunk\n  return (dispatch, getStore) => {\n    // Check selected editor explorer element\n    const store = getStore();\n    const { selected } = store.editor.explorer;\n\n    // If the element is selected, switch to the table view\n    if (selected.id === id) {\n      const type = utils.getTypeObjectFromKey(key);\n      const nodeToSelect = {\n        id: type.id,\n        type,\n        icon: type.icon,\n        isSelected: true,\n        isExpanded: true,\n        label: type.name,\n      };\n      const nodePath = [0, 0];\n      nodePath.push(utils.getExplorerPathIndex(API.getProgramme(store.model), id, type)[0]);\n\n      dispatch(setSelectedElement(nodeToSelect, nodePath));\n    }\n\n    // Once switched, delete element\n    dispatch({\n      type: types.DELETE_ATOM,\n      id,\n      key,\n    });\n  };\n}\n\n/**\n * Duplicates an atom by finding element to duplicate, and creating a new atom with those values\n * @param {string} id id to duplicate\n * @param {string} key type key of object to duplicate\n */\nexport function duplicateAtom(id: string, key: string): types.ThunkAction {\n  // Get type object from key\n  const type = utils.getTypeObjectFromKey(key);\n\n  // Return thunk\n  return (dispatch, getStore) => {\n    // Get elements from key\n    const { model } = getStore();\n    const elements = API.getProgramme(model)[key];\n\n    // Get source for duplication\n    let source = elements.find(element => element.id === id);\n    const { id: sourceId, reference, ...withoutUnique } = source;\n\n    // Dispatch add element action\n    dispatch(addAtom(type, withoutUnique));\n  };\n}\n\n/**\n * Returns a thunk-type action which duplicates an element and switches to it\n * @param {TypeObject} type type object\n * @param {{[string]: mixed}} values values for new atom\n */\nexport function addAtom(type: utils.TypeObject, values: ?Values): types.ThunkAction {\n  // Generate new id\n  const id = nanoId();\n\n  // Extract the type key\n  const { key } = type;\n\n  // Return thunk\n  return (dispatch, getStore) => {\n    // Get data from store\n    const { model } = getStore();\n    const programme = API.getProgramme(model);\n    const modelId = model.id;\n    const programmeId = programme.id;\n\n    // Dispatch action to add atom\n    dispatch({\n      key,\n      type: types.ADD_ATOM,\n      element: values ? values : {},\n      id,\n    });\n\n    // Check add executed successfully\n    const { model: updatedModel } = getStore();\n    if (!updatedModel.programmes[0][key].find(element => element.id === id)) {\n      return;\n    }\n\n    // Dispatch action to set selected node in explorer\n    const nodePath = [\n      0,\n      0,\n      utils.getExplorerPathIndex(programme, id, type)[0],\n      programme[type.key].length,\n    ];\n    const nodeToSelect = {\n      id,\n      type,\n      icon: type.icon,\n      isSelected: true,\n      isExpanded: true,\n      label: values && values.name ? `${values.name}` : `New ${type.name}`,\n    };\n    dispatch(setNodeExpanded(modelId, true));\n    dispatch(setNodeExpanded(programmeId, true));\n    dispatch(setNodeExpanded(type.id, true));\n    dispatch(setSelectedElement(nodeToSelect, nodePath));\n  };\n}\n\nexport function updateMatrix(\n  key: types.MatrixKey,\n  values: { [string]: { [string]: number | { [string]: number } } }\n): types.UpdateMatrixAction {\n  switch (key) {\n    case CONSTANTS.BENEFIT_ATTRIBUTION_KEY:\n    case CONSTANTS.BENEFIT_BUILDUP_KEY:\n    case CONSTANTS.STAKEHOLDER_BENEFITS_KEY:\n    case CONSTANTS.COST_ATTRIBUTION_KEY:\n      break;\n    default:\n      throw new Error(`Unrecognised matrix type ${key}`);\n  }\n  return {\n    type: types.UPDATE_MATRIX,\n    key,\n    values,\n  };\n}\n\nexport function addPhaseLink(id: number, type: number, sourceId: string, targetId: string) {\n  if (sourceId === targetId) {\n    throw new Error('Source id cannot equal target id when adding phase link');\n  }\n  let linkType;\n  switch (type) {\n    case 0:\n      linkType = CONSTANTS.PHASE_LINK_FINISH_TO_START;\n      break;\n    case 1:\n      linkType = CONSTANTS.PHASE_LINK_START_TO_START;\n      break;\n    case 2:\n      linkType = CONSTANTS.PHASE_LINK_FINISH_TO_FINISH;\n      break;\n    case 3:\n      linkType = CONSTANTS.PHASE_LINK_START_TO_FINISH;\n      break;\n    default:\n      throw new Error('Unknown phase link type integer');\n  }\n  return {\n    type: types.ADD_PHASE_LINK,\n    id,\n    linkType,\n    sourceId,\n    targetId,\n  };\n}\n\nexport function deletePhaseLink(id: number) {\n  return {\n    type: types.DELETE_PHASE_LINK,\n    id,\n  };\n}\n\nexport function updateSensitivity(scenarioId: string, type: string, values: any) {\n  return {\n    type: types.UPDATE_SENSITIVITY,\n    id: scenarioId,\n    typeKey: type,\n    values,\n  };\n}\n\nexport function updateModel(model: Model) {\n  return {\n    type: types.UPDATE_MODEL,\n    model,\n  };\n}\n","// @flow\nimport * as utils from '../utils/utils';\nimport * as API from '../model/api';\n\n// Action creators\nimport { SET_SELECTED_ELEMENT, SET_NODE_EXPANDED } from './types';\n\n// Flow Types\n// State flow types\nimport type { ExplorerNode, ExplorerElement } from '../reducers/types';\n\n// Action flow types\nimport type {\n  SetSelectedElementAction,\n  SetNodeExpandedAction,\n  ThunkAction,\n  Dispatch,\n  GetState,\n} from './types';\n\n// Configuration flow types\nimport type { TypeObject } from '../utils/utils';\n\n/**\n * Action creator which returns an action to set a node as the selected element\n * @param {ExplorerNode} node newly-selected node\n * @param {Array<number>} path path to node (array of indices)\n * @return {SetSelectedElementAction} action to select element\n */\nexport const setSelectedElement = (\n  node: ExplorerNode,\n  path: Array<number>\n): SetSelectedElementAction => {\n  return {\n    type: SET_SELECTED_ELEMENT,\n    element: {\n      ...node,\n      path,\n    },\n  };\n};\n\n/**\n * Action creator which returns an action to set a node as (not) expanded\n * @param {ExplorerNode} node node to set as (not) expanded\n * @param {boolean} expanded whether the node should not be expanded\n * @return {SetNodeExpandedAction} action to set node as (not) expanded\n */\nexport const setNodeExpanded = (id: string, expanded: boolean): SetNodeExpandedAction => ({\n  type: SET_NODE_EXPANDED,\n  id,\n  expanded,\n});\n\n/**\n * Action creator which sets selected element to provided element, and expands path to that\n * element.\n * @param {ExplorerElement} element element to jump to\n * @param {TypeObject} type type of element to jump to\n * @return {ThunkAction} a redux-thunk action\n */\nexport const jumpToElement = (element: ExplorerElement, type: TypeObject): ThunkAction => (\n  dispatch: Dispatch,\n  getState: GetState\n) => {\n  // Get data from model instance\n  const { model } = getState();\n  const programme = API.getProgramme(model);\n  const modelId = model.id;\n  const programmeId = programme.id;\n\n  // Construct node\n  const node: ExplorerNode = {\n    ...element,\n    type,\n  };\n\n  // Construct path\n  const path: Array<number> = [\n    0, // Model\n    0, // Programme\n    ...utils.getExplorerPathIndex(programme, element.id, type),\n  ];\n\n  dispatch(setNodeExpanded(modelId, true));\n  dispatch(setNodeExpanded(programmeId, true));\n  dispatch(setNodeExpanded(type.id, true));\n  dispatch(setSelectedElement(node, path));\n};\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog, FileInput } from '@blueprintjs/core';\n\nexport const ModelUploadDialog = ({\n  open,\n  onUpload,\n  processFile,\n}: {\n  open: boolean,\n  onUpload: any => void,\n  processFile: any => void,\n}) => {\n  return (\n    <Dialog isOpen={open}>\n      <div style={{ padding: '10px' }}>\n        <FileInput\n          text={'Choose model file'}\n          fill\n          onInputChange={event => {\n            const reader = new FileReader();\n            reader.onload = processFile;\n            const file = event.target.files[0];\n            reader.readAsText(file);\n            onUpload();\n          }}\n        />\n      </div>\n    </Dialog>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  processFile: event =>\n    dispatch({\n      type: 'UPLOAD_MODEL',\n      model: JSON.parse(event.target.result),\n    }),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ModelUploadDialog);\n","// @flow\nimport * as wasm from 'api';\n\nimport { type Model, type ScorecardResult } from '../types';\n\nexport function presentValue(model: Model): { [string]: Array<number> } {\n  return wasm.present_value(model);\n}\n\nexport function valueForMoney(model: Model): { [string]: Array<number> } {\n  const result = wasm.value_for_money(model);\n  console.log(result);\n  return result;\n}\n\nexport function benefitsVsPhases(model: Model): { [string]: { [string]: { [string]: number } } } {\n  return wasm.benefits_vs_phases(model);\n}\n\nexport function benefitsVsYears(model: Model): { [string]: { [string]: Array<number> } } {\n  const benefitMatrix = wasm.benefits_vs_years(model);\n  const benefitSchedule = {};\n  const scenarioKeys = Object.keys(benefitMatrix);\n  scenarioKeys.forEach(scenarioId => {\n    const benefitKeys = Object.keys(benefitMatrix[scenarioId]);\n\n    benefitSchedule[scenarioId] = benefitKeys.reduce((sum, key) => {\n      if (sum === undefined) {\n        return benefitMatrix[scenarioId][key];\n      } else {\n        const newArray = [];\n        benefitMatrix[scenarioId][key].forEach((value, index) => {\n          newArray.push(sum[index] + value);\n        });\n        return newArray;\n      }\n    }, undefined);\n  });\n  return benefitSchedule;\n}\n\nexport function costsVsYears(model: Model): { [string]: { [string]: Array<number> } } {\n  const costMatrix = wasm.costs_vs_years(model);\n  const costSchedule = {};\n  const scenarioKeys = Object.keys(costMatrix);\n  scenarioKeys.forEach(scenarioId => {\n    const costTypes = Object.keys(costMatrix[scenarioId]);\n\n    costSchedule[scenarioId] = costTypes.reduce((sum, key) => {\n      if (sum === undefined) {\n        return costMatrix[scenarioId][key];\n      } else {\n        const newArray = [];\n        costMatrix[scenarioId][key].forEach((value, index) => {\n          newArray.push(sum[index] + value);\n        });\n        return newArray;\n      }\n    }, undefined);\n  });\n  return costSchedule;\n}\n\nexport function benefitsVsDeliverables(\n  model: Model\n): { [string]: { [string]: { [string]: number } } } {\n  return wasm.benefits_vs_deliverables(model);\n}\n\nexport function benefitsVsStakeholders(\n  model: Model\n): { [string]: { [string]: { [string]: number } } } {\n  return wasm.benefits_vs_stakeholders(model);\n}\n\nexport function benefitsVsGroups(model: Model): { [string]: { [string]: { [string]: number } } } {\n  return wasm.benefits_vs_groups(model);\n}\n\nexport function benefitsVsMeasures(model: Model): { [string]: { [string]: { [string]: number } } } {\n  return wasm.benefits_vs_measures(model);\n}\n\nexport function deliverablesVsStakeholders(\n  model: Model\n): { [string]: { [string]: { [string]: number } } } {\n  return wasm.deliverables_vs_stakeholders(model);\n}\n\nexport function deliverablesVsMeasures(\n  model: Model\n): { [string]: { [string]: { [string]: number } } } {\n  return wasm.deliverables_vs_measures(model);\n}\n\nexport function stakeholdersVsGroups(\n  model: Model\n): { [string]: { [string]: { [string]: number } } } {\n  return wasm.stakeholders_vs_groups(model);\n}\n\nexport function scorecardResults(model: Model): ScorecardResult {\n  const [rootArr, perspectiveObj, objectiveObj, measureObj] = wasm.scorecard_results(model);\n\n  if (!Array.isArray(rootArr)) {\n    throw new Error('Received root scorecard array was not an array');\n  }\n\n  if (typeof perspectiveObj !== 'object' || perspectiveObj === null) {\n    throw new Error('Received perspective scorecard object was not an object');\n  }\n\n  if (typeof objectiveObj !== 'object' || objectiveObj === null) {\n    throw new Error('Received objective scorecard object was not an object');\n  }\n\n  if (typeof measureObj !== 'object' || measureObj === null) {\n    throw new Error('Received measure scorecard object was not an object');\n  }\n\n  const root = rootArr.map(val => {\n    if (typeof val !== 'number') {\n      throw new Error('Type of root array value was not number');\n    }\n    return Math.round(val * 100) / 100;\n  });\n\n  const perspective = Object.keys(perspectiveObj).reduce((acc, key) => {\n    if (!Array.isArray(perspectiveObj[key])) {\n      throw new Error('Type of perspective object value was not an array');\n    }\n\n    acc[key] = perspectiveObj[key].map(val => {\n      if (typeof val !== 'number') {\n        throw new Error('Type of perspective object value in array was not a number');\n      }\n\n      return Math.round(val * 100) / 100;\n    });\n\n    return acc;\n  }, {});\n\n  const objective = Object.keys(objectiveObj).reduce((acc, key) => {\n    if (!Array.isArray(objectiveObj[key])) {\n      throw new Error('Type of objective object value was not an array');\n    }\n\n    acc[key] = objectiveObj[key].map(val => {\n      if (typeof val !== 'number') {\n        throw new Error('Type of objective object value in array was not a number');\n      }\n\n      return Math.round(val * 100) / 100;\n    });\n\n    return acc;\n  }, {});\n\n  const measure = Object.keys(measureObj).reduce((acc, key) => {\n    if (!Array.isArray(measureObj[key])) {\n      throw new Error('Type of measure object value was not an array');\n    }\n\n    acc[key] = measureObj[key].map(val => {\n      if (typeof val !== 'number') {\n        throw new Error('Type of measure object value in array was not a number');\n      }\n\n      return Math.round(val * 100) / 100;\n    });\n\n    return acc;\n  }, {});\n\n  return {\n    root,\n    perspective,\n    objective,\n    measure,\n  };\n}\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateModel } from '../../actions/model';\n\nimport { updateModel as calculateResults } from '../../model/api/results';\n\nimport { AppToaster } from '../Toaster';\n\nimport { Button, Intent } from '@blueprintjs/core';\n\nimport { type Model } from '../../model/api/types';\n\ntype UpdateModelButtonProps = {\n  updateModel: (model: Model) => void,\n  currentModel: Model,\n};\n\nexport const UpdateModelButton = ({ updateModel, currentModel }: UpdateModelButtonProps) => {\n  return (\n    <Button text=\"Update Model\" intent={Intent.SUCCESS} onClick={() => updateModel(currentModel)} />\n  );\n};\n\nconst mapStateToProps = state => ({\n  currentModel: state.model,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  updateModel: model => {\n    try {\n      const newModel = calculateResults(model);\n      dispatch(updateModel(newModel));\n    } catch (e) {\n      console.error('Model Calculation Error:');\n      console.error(e);\n      AppToaster.show({ message: 'An error occured whilst updating the model' });\n\n      throw e;\n    }\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UpdateModelButton);\n","// @flow\nimport { type Model } from '../types';\nimport * as calculate from './calculate';\n\nexport function updateModel(model: Model): Model {\n  return {\n    ...model,\n    results: {\n      ...model.results,\n      dcf: calculate.presentValue(model),\n      vfm: calculate.valueForMoney(model),\n      benefitVsPhases: calculate.benefitsVsPhases(model),\n      benefitSchedule: calculate.benefitsVsYears(model),\n      costSchedule: calculate.costsVsYears(model),\n      benefitVsDeliverables: calculate.benefitsVsDeliverables(model),\n      benefitVsStakeholders: calculate.benefitsVsStakeholders(model),\n      benefitVsGroups: calculate.benefitsVsGroups(model),\n      benefitVsMeasures: calculate.benefitsVsMeasures(model),\n      deliverableVsStakeholders: calculate.deliverablesVsStakeholders(model),\n      deliverableVsMeasures: calculate.deliverablesVsMeasures(model),\n      stakeholderVsGroups: calculate.stakeholdersVsGroups(model),\n      // scorecard: calculate.scorecardResults(model),\n    },\n  };\n}\n","import React, { Component, Suspense, lazy } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  Alignment,\n  Navbar,\n  Button,\n  Popover,\n  Menu,\n  Divider,\n  Text,\n  Tag,\n  Intent,\n} from '@blueprintjs/core';\n\nimport Loading from '../components/Loading';\n\nimport * as utils from '../utils/utils';\nimport ModelUploadDialog from '../components/ModelUploadDialog';\nimport UpdateModelButton from '../components/UpdateModelButton';\n\nconst ModelEditor = lazy(() => import('./ModelEditor'));\nconst AnalysisView = lazy(() => import('./AnalysisView'));\nconst BalancedScorecard = lazy(() => import('./BalancedScorecard'));\nconst Certainty = lazy(() => import('./Certainty'));\nconst Staging = lazy(() => import('./Staging'));\n\nclass AppView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: 'model',\n      uploadVisible: false,\n    };\n\n    this.handleChangeActive = this.handleChangeActive.bind(this);\n    this.renderView = this.renderView.bind(this);\n    this.handleModelSelect = this.handleModelSelect.bind(this);\n  }\n\n  handleChangeActive(active) {\n    this.setState({ active: active });\n  }\n\n  renderView() {\n    switch (this.state.active) {\n      case 'model':\n        return <ModelEditor dark={this.props.dark} />;\n      case 'certainty':\n        return <Certainty dark={this.props.dark} />;\n      case 'analysis':\n        return <AnalysisView dark={this.props.dark} />;\n      case 'balancedScorecard':\n        return <BalancedScorecard dark={this.props.dark} />;\n      case 'staging':\n        return <Staging />;\n      default:\n        return <div />;\n    }\n  }\n\n  handleModelSelect() {\n    console.log('hello');\n  }\n\n  renderHeader() {\n    return (\n      <Navbar style={{ backgroundColor: this.props.dark ? '#30404d' : 'white' }}>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>\n            <div style={{ height: '40px' }}>\n              <img src=\"logo.png\" alt=\"logo\" style={{ maxHeight: '100%' }} />\n            </div>\n          </Navbar.Heading>\n          <Navbar.Divider />\n          <Button\n            className=\"bp3-minimal\"\n            active={this.state.active === 'model'}\n            text=\"Model Editor\"\n            onClick={() => this.handleChangeActive('model')}\n          />\n          <Button\n            className=\"bp3-minimal\"\n            active={this.state.active === 'certainty'}\n            text=\"Certainty\"\n            onClick={() => this.handleChangeActive('certainty')}\n          />\n          <Button\n            className=\"bp3-minimal\"\n            active={this.state.active === 'analysis'}\n            text=\"Analysis\"\n            onClick={() => this.handleChangeActive('analysis')}\n          />\n          <Button\n            className=\"bp3-minimal\"\n            active={this.state.active === 'balancedScorecard'}\n            text=\"Balanced Scorecard\"\n            onClick={() => this.handleChangeActive('balancedScorecard')}\n          />\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <Popover\n            content={\n              <Menu>\n                <Menu.Item text=\"Logout\" icon=\"log-out\" />\n                <Menu.Item\n                  onClick={() => this.props.handleDarkModeToggle()}\n                  text={\n                    <div style={{ display: 'flex' }}>\n                      <Text>{`Switch to ${this.props.dark ? 'Light' : 'Dark'} Mode`}</Text>\n                      <Tag\n                        style={{ marginLeft: 5 }}\n                        intent={this.props.dark ? Intent.PRIMARY : Intent.DANGER}\n                      >\n                        {this.props.dark ? 'Stable' : 'Experimental'}\n                      </Tag>\n                    </div>\n                  }\n                />\n              </Menu>\n            }\n          >\n            <Button\n              text={this.props.user.displayName}\n              rightIcon=\"caret-down\"\n              icon=\"user\"\n              style={{ marginLeft: 5 }}\n              minimal\n            />\n          </Popover>\n          <Popover\n            content={\n              <Menu>\n                <Menu.Item\n                  text=\"Import model from file\"\n                  icon=\"import\"\n                  onClick={() => this.setState({ uploadVisible: true })}\n                />\n                <Menu.Item\n                  text=\"Export data to file\"\n                  icon=\"export\"\n                  onClick={() => utils.downloadModel(this.props.model)}\n                />\n                <Divider />\n                <Menu.Item\n                  disabled\n                  text={\n                    <div style={{ display: 'flex' }}>\n                      <Text>Import data from Excel VMT file</Text>\n                      <Tag style={{ marginLeft: 5 }} intent={Intent.DANGER}>\n                        Experimental\n                      </Tag>\n                    </div>\n                  }\n                  icon=\"import\"\n                />\n              </Menu>\n            }\n          >\n            <Button\n              text=\"Import/Export\"\n              rightIcon=\"caret-down\"\n              icon=\"import\"\n              style={{ marginLeft: 5 }}\n              minimal\n            />\n          </Popover>\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <UpdateModelButton />\n        </Navbar.Group>\n      </Navbar>\n    );\n  }\n\n  render() {\n    document.body.className = this.props.dark ? 'bp3-dark' : 'bp3-body';\n    return (\n      <div style={{ width: '100%' }}>\n        <ModelUploadDialog\n          open={this.state.uploadVisible}\n          onUpload={() => this.setState({ uploadVisible: false })}\n        />\n        <div style={{ height: '50px', backgroundColor: '#a7b6c2' }}>{this.renderHeader()}</div>\n        <div style={{ height: 'calc(100% - 50px)' }}>\n          <Suspense fallback={<Loading text=\"Initialising...\" />}>{this.renderView()}</Suspense>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  dark: state.editor.dark,\n  model: state.model,\n  user: state.auth.user,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleDarkModeToggle: () => dispatch({ type: 'TOGGLE_DARK_MODE' }),\n  updateModel: model => dispatch({ type: 'UPLOAD_MODEL', model }),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AppView);\n"],"sourceRoot":""}