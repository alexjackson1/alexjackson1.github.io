{"version":3,"sources":["components/InputComponents/Matrix.js","components/Form/useFormValidation.js","components/EquationInput/selectors.js","components/EquationInput/index.js","components/MeasureSelector/index.js","components/Form/Form.js","components/Form/index.js","components/ConfirmPopover/ConfirmPopover.js","components/ConfirmPopover/index.js","tiles/Editor/selectors.js","tiles/Editor/Header/selectors.js","tiles/Editor/Header/Breadcrumbs/selectors.js","tiles/Editor/Header/Breadcrumbs/styles.js","tiles/Editor/Header/Breadcrumbs/index.js","components/DeleteButton/selectors.js","components/DeleteButton/DeleteButton.js","components/DeleteButton/index.js","components/InfoPopover/index.js","components/InfoPopover/InfoPopover.js","components/DuplicateButton/index.js","components/DuplicateButton/DuplicateButton.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends.js","components/AddElementButton/MenuItem.js","components/AddElementButton/AddElementButton.js","components/AddElementButton/index.js","tiles/Editor/Header/Toolbar/selectors.js","tiles/Editor/Header/Toolbar/styles.js","tiles/Editor/Header/Toolbar/SwitchBenefitMatrix.js","tiles/Editor/Header/Toolbar/MatrixAxesTags.js","tiles/Editor/Header/Toolbar/index.js","tiles/Editor/Header/styles.js","tiles/Editor/Header/index.js","tiles/Editor/InstanceForm/FormContainers/selectors.js","tiles/Editor/InstanceForm/FormContainers/index.js","tiles/Editor/InstanceForm/index.js","components/InputComponents/Matrix3D.js","tiles/Editor/InputMatrix/BenefitAttribution.js","tiles/Editor/InputMatrix/BenefitBuildup.js","tiles/Editor/InputMatrix/CostAttribution.js","tiles/Editor/InputMatrix/StakeholderBenefits.js","tiles/Editor/InputMatrix/index.js","tiles/Editor/ElementTable/selectors.js","components/EditButton/index.js","components/EditButton/EditButton.js","components/InputComponents/Table.js","tiles/Editor/ElementTable/index.js","tiles/Editor/BlankPane.js","tiles/Editor/styles.js","tiles/Editor/Editor.js","tiles/Editor/index.js"],"names":["returnData","values","rowId","columnId","idsFromIndex","x","y","rowIndex","columnIndex","id","renderCell","updateValues","setChanged","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_blueprintjs_table__WEBPACK_IMPORTED_MODULE_7__","onConfirm","val","rowIdx","colIdx","newValue","oldValues","ids","Number","parseFloat","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","handleConfirm","value","apply","concat","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","renderRowHeader","_blueprintjs_table__WEBPACK_IMPORTED_MODULE_8__","name","Matrix","_ref","handleSubmit","typeKey","_useState","useState","_useState2","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","inputValues","setInputValues","_useState3","_useState4","changed","_blueprintjs_table__WEBPACK_IMPORTED_MODULE_10__","numRows","length","rowHeaderCellRenderer","map","col","_blueprintjs_table__WEBPACK_IMPORTED_MODULE_9__","key","cellRenderer","renderColumns","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_5__","style","position","bottom","right","type","text","disabled","onClick","intent","Intent","SUCCESS","large","useFormValidation","initialState","validate","warn","model","update","_React$useState","React","_React$useState2","slicedToArray","setValues","_React$useState3","_React$useState4","errors","setErrors","_React$useState5","_React$useState6","warnings","setWarnings","_React$useState7","_React$useState8","isSubmitting","setSubmitting","_React$useState9","_React$useState10","touched","setTouched","useEffect","keys","event","preventDefault","validationErrors","validationWarnings","handleChange","objectSpread","defineProperty","target","handleBlur","getOptions","state","_API$getProgramme","API","measures","parameters","stakeholders","measureOptions","reduce","options","measure","push","replace","parameterOptions","parameter","stakeholder","connect","props","initialValue","objectWithoutProperties","react_default","bundle_default","assign","width","Component","trigger","spacer","matchAny","renderItem","active","itemProps","isSelected","includes","menuItem","modifiers","icon","handleClick","renderTag","handleItemSelect","setActive","m","filter","toConsumableArray","programmes","activeMeasures","found","find","Error","multiSelect","selectedItems","items","itemRenderer","onItemSelect","tagRenderer","tagInputProps","onRemove","index","idx","popoverProps","__webpack_require__","d","__webpack_exports__","Form_SubmitButton","submitButtonStyle","SubmitButton","buttons","ErrorInputIcon","tag","minimal","DANGER","WarningInputIcon","WARNING","PercentageInputIcon","PRIMARY","TextInput","helperText","error","warning","DEFAULT","IconComponent","formGroup","label","labelInfo","inputGroup","onChange","onBlur","placeholder","rightElement","TextAreaInput","textArea","fill","DateInput","dateValue","moment","DATE_FORMAT","toDate","dateInput","selectedDate","userChange","format","inputProps","dayPickerProps","parseDate","dateStr","formatDate","dateObj","maxDate","canClearSelection","SelectInput","item","htmlSelect","NumberInput","clamp","minValue","maxValue","numericInput","onValueChange","num","str","isNaN","clampValueOnBlur","min","max","allowNumericCharactersOnly","PercentageInput","modifiedValue","minorStepSize","majorStepSize","ThemeMeasuresInput","components_MeasureSelector","newValues","SwitchInput","controls","checked","EquationInput","components_EquationInput","formData","initialValues","handleUpdate","fields","validationProps","onSubmit","field","Form_TextInput","Form_TextAreaInput","Form_NumberInput","Form_PercentageInput","Form_DateInput","Form_SelectInput","Form_SwitchInput","Form_EquationInput","Array","isArray","Form_ThemeMeasuresInput","renderField","_Form__WEBPACK_IMPORTED_MODULE_0__","Form","ConfirmPopover","children","title","dismissLabel","confirmLabel","popover","padding","html","t","text_text","display","justifyContent","marginTop","className","Classes","POPOVER_DISMISS","marginRight","defaultProps","getInputDisplay","selected","editor","explorer","utils","getElementId","getTypeKey","getInputType","getSelectedInstanceId","getBreadcrumbsData","_CONSTANTS$MODEL_TYPE","CONSTANTS","modelIcon","modelKey","_CONSTANTS$PROGRAMME_","programmeIcon","programmeKey","programme","crumbs","pathLength","path","i","elements","element","reference","breadcrumbsContainer","breadcrumbs","breadcrumbs_breadcrumbs","returnElementCount","costs","deliverables","phases","DeleteButton","elementCounts","coreBenefits","_coreBenefits","dispatch","handleDelete","deleteAtom","elementId","elementType","buttonProps","BENEFIT_ID","DELIVERABLE_ID","COST_ID","PHASE_ID","STAKEHOLDER_ID","isDisabled","InfoPopover","maxWidth","marginBottom","DuplicateButton","handleDuplicate","duplicateAtom","_extends","arguments","source","prototype","hasOwnProperty","call","this","handleAddElement","addAtom","pluralize","singular","AddOptions","menu","MenuItem","divider","AddElementButton","content","AddElementButton_AddOptions","rightIcon","small","getSelectedBenefitAttributionBenefit","benefitAttribution","selectedBenefit","toolbarContainer","margin","minHeight","matrixAxesTagsStyle","matrixTagStyle","switchBenefitContainer","marginLeft","switchBenefitLabelContainer","benefit","BENEFIT_TYPE_FINANCIAL","benefits","getSelectedBenefit","_ref2","select_select","onActiveItemChange","activeItem","Position","RIGHT_BOTTOM","filterable","buttonGroup","alignText","Alignment","LEFT","tag_tag","MatrixAxesTags","tags","typeId","BENEFIT_ATTRIBUTION_ID","BENEFIT_BUILDUP_ID","COST_ATTRIBUTION_ID","STAKEHOLDER_BENEFITS_ID","getTags","AddElementGroup","components_AddElementButton","ElementUpdateGroup","components_DuplicateButton","components_DeleteButton","InformationButton","_ref2$type","float","components_InfoPopover","Toolbar","_ref3","Toolbar_MatrixAxesTags","SwitchBenefitMatrix","Toolbar_AddElementGroup","MODEL_ID","PROGRAMME_ID","displayElementButtons","Toolbar_ElementUpdateGroup","Toolbar_InformationButton","editorHeaderContainer","dark","top","left","zIndex","borderBottomStyle","borderBottomWidth","borderBottomColor","backgroundColor","Breadcrumbs","Header_Toolbar","getInitialValues","client","author","start","financialStart","scorecardStart","unitOfMeasure","mission","vision","themeValues","returnFieldMapper","form","itemKey","getTypeObject","stateItems","getFormData","measureFields","objectiveFields","causeAndEffectFields","genericMapStateToProps","genericMapDispatchToProps","updateAtom","returnFormComponent","MODEL_KEY","PROGRAMME_KEY","BENEFIT_KEY","BenefitForm","COST_KEY","CostForm","DELIVERABLE_KEY","DeliverableForm","PHASE_KEY","PhaseForm","STAKEHOLDER_KEY","StakeholderForm","MEASURE_KEY","MeasureForm","OBJECTIVE_KEY","ObjectiveForm","PERSPECTIVE_KEY","PerspectiveForm","THEME_KEY","ThemeForm","GROUP_KEY","GroupForm","BENEFICIARY_KEY","BeneficiaryForm","PARAMETER_KEY","ParameterForm","CAUSE_AND_EFFECT_KEY","CauseAndEffectForm","InstanceForm","FormComponent","selectedZ","editableCell","rowHeaderCell","Matrix3D","esm_table","column","getSelectedZ","matrix","benefitBuildup","costAttribution","stakeholderBenefits","updateMatrix","BenefitBuildup","CostAttribution","StakeholderBenefits","BenefitAttribution","getSelectedTable","table","headers","newElement","forEach","isMoment","EditButton","handleJumpToForm","jumpToElement","explorerElement","buttonCellStyle","textAlign","verticalAlign","Table","components_EditButton","_this","htmlTable","condensed","interactive","bordered","striped","border","borderColor","tableLayout","widthObject","widths","wo","renderButtonHeader","onDoubleClick","edit","ellipsize","renderEditCell","renderDuplicateCell","renderDeleteCell","PropTypes","arrayOf","shape","string","isRequired","object","number","editId","InputComponents_Table","container","height","alignItems","flexDirection","headingContainer","paddingLeft","paddingRight","paddingTop","textContainer","BlankPane","href","editorContentContainer","Editor","Editor_Header","Editor_InstanceForm","InputMatrix","ElementTable","renderInput","Editor_BlankPane"],"mappings":"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","file":"static/js/13.890a0e72.chunk.js","sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport type { Node } from 'react';\n\nimport { Button, Intent } from '@blueprintjs/core';\nimport { Column, Table, EditableCell, RowHeaderCell } from '@blueprintjs/table';\n\n// Flow Types\ntype Values = { [string]: { [string]: number } };\n\ntype Axis = Array<{ id: string, name: string }>;\n\ntype UpdateValues = (values: Values) => void;\n\ntype HandleSubmit = (typeKey: string, values: Values) => void;\n\nexport type MatrixProps = {\n  x: Axis,\n  y: Axis,\n  handleSubmit: HandleSubmit,\n  updateValues: UpdateValues,\n  typeKey: string,\n  values: Values,\n};\n\n// Returns data item from values prop\nconst returnData = (values: Values, rowId: string, columnId: string): number => {\n  return values[rowId][columnId];\n};\n\n// Retreives ids from index\nconst idsFromIndex = (x: Axis, y: Axis, rowIndex: number, columnIndex: number) => {\n  return [x[rowIndex].id, y[columnIndex].id];\n};\n\n// Correctly calls redux store function updateValues\nconst handleConfirm = (\n  newValue,\n  oldValues,\n  x,\n  y,\n  rowIndex,\n  columnIndex,\n  updateValues,\n  setChanged\n) => {\n  const ids = idsFromIndex(x, y, rowIndex, columnIndex);\n  if (Number.parseFloat(newValue) !== oldValues[ids[0]][ids[1]]) {\n    setChanged(true);\n  }\n  const values = {\n    ...oldValues,\n    [ids[0]]: {\n      ...oldValues[ids[0]],\n      [ids[1]]: Number.parseFloat(newValue),\n    },\n  };\n  updateValues(values);\n};\n\n// Renders a cell with values from prop\nconst renderCell = (values: Values, x: Axis, y: Axis, updateValues: UpdateValues, setChanged) => (\n  rowIndex: number,\n  columnIndex: number\n): Node => {\n  return (\n    <EditableCell\n      onConfirm={(val, rowIdx, colIdx) =>\n        handleConfirm(val, values, x, y, rowIdx, colIdx, updateValues, setChanged)\n      }\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n      value={returnData(values, ...idsFromIndex(x, y, rowIndex, columnIndex))}\n    />\n  );\n};\n\n// Renders the row headers based on axis names\nconst renderRowHeader = (x: Axis) => (rowIndex: number): Node => {\n  return <RowHeaderCell>{x[rowIndex].name}</RowHeaderCell>;\n};\n\n// Renders the columns (and also cells) based on props\nconst renderColumns = (\n  values: Values,\n  x: Axis,\n  y: Axis,\n  updateValues: UpdateValues,\n  typeKey: string,\n  setChanged\n) => {\n  return y.map(col => (\n    <Column\n      key={`MATRIX_${typeKey}_${col.id}`}\n      name={col.name}\n      cellRenderer={renderCell(values, x, y, updateValues, setChanged)}\n    />\n  ));\n};\n\n// Renders the matrix componenet\nconst Matrix = ({ x, y, handleSubmit, typeKey, values }: MatrixProps) => {\n  const [inputValues, setInputValues] = useState(values);\n  const [changed, setChanged] = useState(false);\n  return (\n    <div>\n      <Table numRows={x.length} rowHeaderCellRenderer={renderRowHeader(x)}>\n        {renderColumns(inputValues, x, y, setInputValues, typeKey, setChanged)}\n      </Table>\n      <Button\n        style={{ position: 'fixed', bottom: '30px', right: '50px' }}\n        type=\"submit\"\n        text=\"Save Changes\"\n        disabled={!changed}\n        onClick={() => {\n          handleSubmit(typeKey, inputValues);\n          setChanged(false);\n        }}\n        intent={Intent.SUCCESS}\n        large\n      />\n    </div>\n  );\n};\n\nexport default Matrix;\n","// @flow\nimport React from 'react';\n\n// Flow Types\nimport { type FormState, type Validate, type Warn, type Update } from './types';\nimport { type Model } from '../../model/api/types';\n\n// Custom react hook\nfunction useFormValidation(\n  initialState: FormState,\n  validate: Validate,\n  warn: Warn,\n  model: Model,\n  update: Update\n) {\n  // Store current values of form in state\n  const [values, setValues] = React.useState(initialState);\n\n  // Store current errors and warnings in state\n  const [errors, setErrors] = React.useState({});\n  const [warnings, setWarnings] = React.useState({});\n\n  // Keep track of whether form is submitting\n  const [isSubmitting, setSubmitting] = React.useState(false);\n\n  // Keep track of whether form has been touched or not\n  const [touched, setTouched] = React.useState(false);\n\n  // Side effect, dependent on errors, submtting, and values\n  React.useEffect(() => {\n    if (isSubmitting) {\n      const noErrors = Object.keys(errors).length === 0;\n      if (noErrors) {\n        update(values);\n        setSubmitting(false);\n        setTouched(false);\n      } else {\n        setSubmitting(false);\n      }\n    }\n  }, [errors, isSubmitting, update, values]);\n\n  // Side effect for updated form values on different ids\n  React.useEffect(() => {\n    setValues(initialState);\n  }, [initialState]);\n\n  // Handles the change of an input value\n  function handleChange(event: SyntheticInputEvent<HTMLInputElement>) {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n\n    setTouched(true);\n  }\n\n  // Validates when user blurs the field\n  function handleBlur() {\n    const validationErrors = validate(values, model);\n    setErrors(validationErrors);\n\n    const validationWarnings = warn(values, model);\n    setWarnings(validationWarnings);\n\n    setTouched(true);\n  }\n\n  // Function for handling the submit of data\n  function handleSubmit(event: SyntheticInputEvent<HTMLInputElement>) {\n    event.preventDefault();\n\n    const validationErrors = validate(values, model);\n    setErrors(validationErrors);\n    const validationWarnings = warn(values, model);\n    setWarnings(validationWarnings);\n\n    setSubmitting(true);\n  }\n\n  // Return hook outputs as object\n  return {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    errors,\n    warnings,\n    isSubmitting,\n    touched,\n  };\n}\n\nexport default useFormValidation;\n","// @flow\nimport * as API from '../../model/api';\nimport { type State } from '../../reducers/types';\n\nimport { type Options } from './types';\n\nexport const getOptions = (state: State): Options => {\n  const { model } = state;\n  const { measures, parameters, stakeholders } = API.getProgramme(model);\n\n  const measureOptions = measures.reduce((options, measure) => {\n    options.push(`mb_${measure.name.replace(/ /gi, '_')}`);\n    options.push(`ms_${measure.name.replace(/ /gi, '_')}`);\n    options.push(`mc_${measure.name.replace(/ /gi, '_')}`);\n    return options;\n  }, []);\n  const parameterOptions = parameters.reduce((options, parameter) => {\n    options.push(parameter.name);\n    return options;\n  }, measureOptions);\n  const stakeholderOptions = stakeholders.reduce((options, stakeholder) => {\n    options.push(`sr_${stakeholder.name.replace(/ /gi, '_')}`);\n    options.push(`sm_${stakeholder.name.replace(/ /gi, '_')}`);\n    return options;\n  }, parameterOptions);\n\n  return stakeholderOptions;\n};\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getOptions } from './selectors';\n\n// Autocomplete component\nimport AutoInput from 'react-autocomplete-input';\n\n// Overrride style sheet\nimport './custom.css';\n\n// Flow Types\nimport { type EquationInputProps } from './types';\n\nexport const EquationInput = ({ options, initialValue, ...props }: EquationInputProps) => {\n  return (\n    <AutoInput\n      style={{ width: '100%' }}\n      Component={'input'}\n      options={options}\n      trigger={''}\n      spacer={' '}\n      matchAny={true}\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  options: getOptions(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  () => ({})\n)(EquationInput);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { MenuItem } from '@blueprintjs/core';\nimport { MultiSelect } from '@blueprintjs/select';\n\nimport './overrides.css';\n\nimport { type Measure } from '../../model/api/types';\nimport { type State } from '../../reducers/types';\n\ntype MeasureSelectorProps = {\n  measures: Array<Measure>,\n  active: Array<string>,\n  setActive: (Array<string>) => void,\n};\n\ntype ItemProps = {\n  handleClick: (SyntheticInputEvent<HTMLButtonElement>) => void,\n  index: number,\n  modifiers: {\n    active: boolean,\n    disabled: boolean,\n    matchesPredicate: boolean,\n  },\n};\n\nconst renderItem = (active: Array<Measure>) => (measure: Measure, itemProps: ItemProps) => {\n  const isSelected = active.map(a => a.id).includes(measure.id);\n  return (\n    <MenuItem\n      key={`MEASURE_THEME_SELECT_VALUE_${measure.id}`}\n      text={measure.name}\n      active={itemProps.modifiers.active}\n      icon={isSelected ? 'tick' : 'blank'}\n      onClick={itemProps.handleClick}\n    />\n  );\n};\n\nconst renderTag = (measure: Measure) => {\n  return measure.name;\n};\n\nconst handleItemSelect = (active: Array<Measure>, setActive: (Array<string>) => void) => (\n  measure: Measure\n) => {\n  if (active.map(m => m.id).includes(measure.id)) {\n    setActive(active.filter(m => m.id !== measure.id).map(m => m.id));\n  } else {\n    setActive([...active.map(m => m.id), measure.id]);\n  }\n};\n\nexport const MeasureSelector = ({ measures, active, setActive }: MeasureSelectorProps) => {\n  const activeMeasures = active.map(id => {\n    const found = measures.find(measure => measure.id === id);\n    if (!found) {\n      throw new Error('Selected measure was not found');\n    }\n    return found;\n  });\n\n  return (\n    <div style={{ width: '100%' }}>\n      <MultiSelect\n        selectedItems={activeMeasures}\n        items={measures}\n        itemRenderer={renderItem(activeMeasures)}\n        onItemSelect={handleItemSelect(activeMeasures, setActive)}\n        tagRenderer={renderTag}\n        tagInputProps={{\n          onRemove: (value, index) =>\n            setActive(activeMeasures.filter((m, idx) => idx !== index).map(m => m.id)),\n        }}\n        popoverProps={{\n          position: 'auto-end',\n        }}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  measures: state.model.programmes[0].measures,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(MeasureSelector);\n","// @flow\nimport React from 'react';\n\n// Use moment for parsing dates\nimport moment from 'moment';\nimport { DATE_FORMAT } from '../../config/constants';\n\n// Hooks\nimport useFormValidation from './useFormValidation';\n\n// Blueprint Components\nimport {\n  Button,\n  FormGroup,\n  HTMLSelect,\n  InputGroup,\n  Intent,\n  NumericInput,\n  Switch,\n  Tag,\n  TextArea,\n} from '@blueprintjs/core';\nimport { DateInput as BPDateInput } from '@blueprintjs/datetime';\n\n// Reusable Components\nimport RUEquationInput from '../EquationInput';\nimport MeasureSelector from '../MeasureSelector';\n\n// Flow Types\nimport { type FormProps, type Field, type ValidationProps, type SelectItem } from './types';\n\ntype HandleChange = any => void;\ntype HandleBlur = any => void;\n\n// Submit Button\ntype SubmitButtonProps = {\n  disabled?: boolean,\n  onClick?: (event: SyntheticInputEvent<HTMLButtonElement>) => void,\n};\nconst submitButtonStyle = { position: 'fixed', bottom: '30px', right: '50px' };\nexport const SubmitButton = (props: SubmitButtonProps) => (\n  <Button\n    style={submitButtonStyle}\n    type=\"submit\"\n    text=\"Save Changes\"\n    intent={Intent.SUCCESS}\n    large\n    {...props}\n  />\n);\n\n// Input Icons\nconst ErrorInputIcon = () => <Tag minimal disabled icon=\"error\" intent={Intent.DANGER} />;\nconst WarningInputIcon = () => <Tag minimal disabled icon=\"warning-sign\" intent={Intent.WARNING} />;\nconst PercentageInputIcon = () => (\n  <Tag minimal disabled icon=\"percentage\" intent={Intent.PRIMARY} />\n);\n\n// Text Input Component\ntype TextInputProps = {\n  ...Field,\n  value: string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst TextInput = (props: TextInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  // Decide icon component\n  const IconComponent = (props.error && ErrorInputIcon) || (props.warning && WarningInputIcon);\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <InputGroup\n        intent={intent}\n        type=\"text\"\n        name={props.name}\n        value={props.value}\n        onChange={props.handleChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n        rightElement={IconComponent && <IconComponent />}\n      />\n    </FormGroup>\n  );\n};\n\n// Text Area Input Component\ntype TextAreaInputProps = {\n  ...Field,\n  value: string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst TextAreaInput = (props: TextAreaInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <TextArea\n        fill\n        intent={intent}\n        name={props.name}\n        value={props.value}\n        onChange={props.handleChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n      />\n    </FormGroup>\n  );\n};\n\n// Date Input Component\ntype DateInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  value: string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst DateInput = (props: DateInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  // Decide icon component\n  const IconComponent = (props.error && ErrorInputIcon) || (props.warning && WarningInputIcon);\n\n  // Parse date as JS date object\n  const dateValue = moment(props.value, DATE_FORMAT, true).toDate();\n\n  // Create custom handle for blueprint date component\n  const handleDateChange = (selectedDate: Date, userChange: boolean) => {\n    if (userChange) {\n      props.handleChange({\n        target: { name: props.name, value: moment(selectedDate).format(DATE_FORMAT) },\n      });\n    }\n  };\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <BPDateInput\n        intent={intent}\n        value={dateValue}\n        onChange={handleDateChange}\n        inputProps={{ onBlur: props.handleBlur }}\n        dayPickerProps={{ onBlur: props.handleBlur }}\n        placeholder={props.placeholder}\n        rightElement={IconComponent && <IconComponent />}\n        parseDate={dateStr => moment(dateStr, DATE_FORMAT, true).toDate()}\n        formatDate={dateObj => moment(dateObj).format(DATE_FORMAT)}\n        maxDate={moment('2040-12-31', DATE_FORMAT, true).toDate()}\n        canClearSelection={false}\n      />\n    </FormGroup>\n  );\n};\n\n// Select Input Component\ntype SelectInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  items: Array<SelectItem<string>>,\n  value: string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst SelectInput = (props: SelectInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  // Create option nodes\n  const options = props.items.map(item => (\n    <option key={item.id} value={item.value}>\n      {item.label}\n    </option>\n  ));\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <HTMLSelect\n        intent={intent}\n        name={props.name}\n        value={props.value}\n        onChange={props.handleChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n      >\n        {options}\n      </HTMLSelect>\n    </FormGroup>\n  );\n};\n\n// Number Input Component\ntype NumberInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  minValue?: string,\n  maxValue?: string,\n  value: number | string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst NumberInput = (props: NumberInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  // Decide icon component\n  const IconComponent = (props.error && ErrorInputIcon) || (props.warning && WarningInputIcon);\n\n  // Decide boundary conditions\n  const clamp = typeof props.minValue === 'number' || typeof props.maxValue === 'number';\n\n  // Create custom handle for blueprint component\n  const handleValueChange = (num, str) => {\n    if (Number.isNaN(num) || str[str.length - 1] === '.') {\n      props.handleChange({ target: { name: props.name, value: str } });\n    } else {\n      props.handleChange({ target: { name: props.name, value: num } });\n    }\n  };\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <NumericInput\n        intent={intent}\n        name={props.name}\n        value={props.value}\n        onValueChange={handleValueChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n        rightElement={IconComponent && <IconComponent />}\n        clampValueOnBlur={clamp}\n        min={props.minValue}\n        max={props.maxValue}\n        allowNumericCharactersOnly={false}\n      />\n    </FormGroup>\n  );\n};\n\n// Percentage Input Component\ntype PercentageInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  value: number | string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst PercentageInput = (props: PercentageInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  // Decide icon component\n  const IconComponent =\n    (props.error && ErrorInputIcon) || (props.warning && WarningInputIcon) || PercentageInputIcon;\n\n  // Create custom handle for blueprint component\n  const handleValueChange = (num, str) => {\n    if (Number.isNaN(num) || str[str.length - 1] === '.') {\n      props.handleChange({ target: { name: props.name, value: str } });\n    } else {\n      props.handleChange({ target: { name: props.name, value: num / 100 } });\n    }\n  };\n\n  let modifiedValue = props.value;\n  if (typeof props.value === 'number') {\n    modifiedValue = props.value * 100;\n  }\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <NumericInput\n        intent={intent}\n        name={props.name}\n        value={modifiedValue}\n        onValueChange={handleValueChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n        rightElement={IconComponent && <IconComponent />}\n        clampValueOnBlur={true}\n        min={0}\n        max={100}\n        minorStepSize={0.5}\n        majorStepSize={10}\n        allowNumericCharactersOnly={false}\n      />\n    </FormGroup>\n  );\n};\n\n// Theme Measures Input Component\ntype ThemeMeasuresInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  value: Array<string>,\n  handleChange: HandleChange,\n  error: ?string,\n  warning: ?string,\n};\nconst ThemeMeasuresInput = (props: ThemeMeasuresInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <MeasureSelector\n        active={props.value}\n        setActive={newValues =>\n          props.handleChange({\n            target: { name: 'measures', value: newValues },\n          })\n        }\n      />\n    </FormGroup>\n  );\n};\n\n// Switch Input Component\ntype SwitchInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  value: boolean,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst SwitchInput = (props: SwitchInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  const handleSwitchChange = () => {\n    props.handleChange({ target: { name: 'dynamic', value: !props.value } });\n  };\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <Switch\n        intent={intent}\n        name={props.name}\n        checked={props.value}\n        onChange={handleSwitchChange}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n      />\n    </FormGroup>\n  );\n};\n\n// Equation Input Component\ntype EquationInputProps = {\n  name: string,\n  label: string,\n  labelInfo?: string,\n  helperText?: string,\n  placeholder?: string,\n  value: string,\n  handleChange: HandleChange,\n  handleBlur: HandleBlur,\n  error: ?string,\n  warning: ?string,\n};\nconst EquationInput = (props: EquationInputProps) => {\n  // Decide helper text\n  const helperText = props.error || props.warning || props.helperText;\n\n  // Decide intent\n  const intent =\n    (props.error && Intent.DANGER) || (props.warning && Intent.WARNING) || Intent.DEFAULT;\n\n  return (\n    <FormGroup\n      label={props.label}\n      labelInfo={props.labelInfo}\n      helperText={helperText}\n      intent={intent}\n    >\n      <RUEquationInput\n        intent={intent}\n        name={props.name}\n        value={props.value}\n        onChange={newValue => props.handleChange({ target: { name: props.name, value: newValue } })}\n        onBlur={props.handleBlur}\n        placeholder={props.placeholder}\n      />\n    </FormGroup>\n  );\n};\n\n// Field Renderer\nconst renderField = (validationProps: ValidationProps) => (field: Field) => {\n  const { errors, warnings, values, handleChange, handleBlur } = validationProps;\n  const { id, name, type } = field;\n\n  switch (type) {\n    case 'text':\n      if (typeof values[name] !== 'string') {\n        throw new Error('Value of text input type was not a string');\n      }\n      return (\n        <TextInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'textarea':\n      if (typeof values[name] !== 'string') {\n        throw new Error('Value of textarea input type was not a string');\n      }\n      return (\n        <TextAreaInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'number':\n      if (typeof values[name] !== 'string' && typeof values[name] !== 'number') {\n        throw new Error('Value of number input type was not a string or number');\n      }\n      return (\n        <NumberInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'percentage':\n      if (typeof values[name] !== 'string' && typeof values[name] !== 'number') {\n        throw new Error('Value of percentage input type was not a string or number');\n      }\n      return (\n        <PercentageInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'date':\n      if (typeof values[name] !== 'string') {\n        throw new Error('Value of date input type was not a string');\n      }\n      return (\n        <DateInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'select':\n      if (typeof values[name] !== 'string') {\n        throw new Error('Value of select input type was not a boolean');\n      }\n      return (\n        <SelectInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'switch':\n      if (typeof values[name] !== 'boolean') {\n        throw new Error('Value of switch input type was not a boolean');\n      }\n      return (\n        <SwitchInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'equation':\n      if (typeof values[name] !== 'string') {\n        throw new Error('Value of equation input type was not a string');\n      }\n      return (\n        <EquationInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n          handleBlur={handleBlur}\n        />\n      );\n    case 'theme-measures':\n      if (!Array.isArray(values[name])) {\n        throw new Error('Value of measures input type was not an array');\n      }\n      return (\n        <ThemeMeasuresInput\n          key={id}\n          {...field}\n          error={errors[name]}\n          warning={warnings[name]}\n          value={values[name]}\n          handleChange={handleChange}\n        />\n      );\n    default:\n      throw new Error('Unrecognised field type when rendering form');\n  }\n};\n\n// Form Presentational Component\nexport default ({ formData, initialValues, model, handleUpdate }: FormProps) => {\n  // Destructure values from form data\n  const { fields, validate, warn } = formData;\n\n  // Use validation hook\n  const validationProps = useFormValidation(initialValues, validate, warn, model, handleUpdate);\n\n  return (\n    <form onSubmit={validationProps.handleSubmit} style={{ width: '700px' }}>\n      {fields.map(renderField(validationProps))}\n      <SubmitButton disabled={validationProps.isSubmitting || !validationProps.touched} />\n    </form>\n  );\n};\n","// @flow\nimport Form from './Form';\nexport default Form;\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { Popover, H5, Text, Button, Classes, Intent } from '@blueprintjs/core';\n\nimport type { ConfirmPopoverProps } from './types';\n\nexport const ConfirmPopover = ({\n  children,\n  title,\n  text,\n  dismissLabel,\n  onClick,\n  confirmLabel,\n  ...props\n}: ConfirmPopoverProps) => {\n  return (\n    <Popover {...props}>\n      {children}\n      <div style={{ padding: 10 }}>\n        <H5>{title}</H5>\n        {Array.isArray(text) ? (\n          text.map((t, index) => <Text key={`confirmation_${index}`}>{t}</Text>)\n        ) : (\n          <Text>{text}</Text>\n        )}\n        <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 15 }}>\n          <Button className={Classes.POPOVER_DISMISS} style={{ marginRight: 10 }}>\n            {dismissLabel}\n          </Button>\n          <Button intent={Intent.DANGER} className={Classes.POPOVER_DISMISS} onClick={onClick}>\n            {confirmLabel}\n          </Button>\n        </div>\n      </div>\n    </Popover>\n  );\n};\n\nConfirmPopover.defaultProps = {\n  confirmLabel: 'Confirm',\n  dismissLabel: 'Cancel',\n};\n\nexport default ConfirmPopover;\n","import ConfirmPopover from './ConfirmPopover';\n\nexport default ConfirmPopover;\n","// @flow\n// Utilities\nimport * as utils from '../../utils/utils';\n\n// Flow Types\nimport { type State } from '../../reducers/types';\nimport { type InputType } from './types';\n\nexport function getInputDisplay(state: State): ?InputType {\n  const { selected } = state.editor.explorer;\n\n  // Return undefined if selected element is undefined\n  if (!selected) {\n    return undefined;\n  }\n\n  // Return form if it is not type id (table) or is top level\n  if (!utils.isTypeId(selected.id) || utils.isTopLevel(selected.type.id)) {\n    return 'form';\n  }\n\n  // Return table if selected is type id but not compound type (matrix)\n  if (utils.isTypeId(selected.id) && !utils.isCompoundType(selected.type.id)) {\n    return 'table';\n  }\n\n  if (utils.isCompoundType(selected.type.id)) {\n    return 'matrix';\n  }\n}\n\nexport function getElementId(state: State): ?string {\n  if (getInputDisplay(state) !== 'form') {\n    return undefined;\n  } else {\n    return state.editor.explorer.selected.id;\n  }\n}\n\nexport function getTypeKey(state: State): ?string {\n  if (getInputDisplay(state) !== 'form') {\n    return undefined;\n  } else {\n    return state.editor.explorer.selected.type.key;\n  }\n}\n","// @flow\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type TypeObject } from '../../../utils/utils';\nimport { getInputDisplay } from '../selectors';\n\nexport function getInputType(state: State): ?TypeObject {\n  const { selected } = state.editor.explorer;\n  if (!selected) {\n    return undefined;\n  }\n  return selected.type;\n}\n\nexport function getSelectedInstanceId(state: State): ?string {\n  const { selected } = state.editor.explorer;\n  if (getInputDisplay(state) === 'form') {\n    return selected.id;\n  } else {\n    return undefined;\n  }\n}\n","// @flow\nimport * as CONSTANTS from '../../../../config/constants';\n\nimport { type State } from '../../../../reducers/types';\nimport { type Breadcrumbs } from './types';\n\n/**\n * Creates data structure for the UI from stored data.\n * @param  {object} state state tree\n * @return {array}        breadcrumbs\n */\nexport function getBreadcrumbsData(state: State): Breadcrumbs {\n  // Extract the selected element\n  const { selected } = state.editor.explorer;\n\n  // If there is something selected then determine breadcrumbs\n  if (selected) {\n    // Destructure model and programme variables\n    const { icon: modelIcon, key: modelKey } = CONSTANTS.MODEL_TYPE;\n    const { icon: programmeIcon, key: programmeKey, children } = CONSTANTS.PROGRAMME_TYPE;\n\n    // Extract programme\n    const programme = state[modelKey][programmeKey][0];\n\n    // Initialise the crumbs\n    const crumbs = [];\n\n    // Loop through length of its path\n    const pathLength = selected.path.length;\n    for (let i = 0; i < pathLength; i++) {\n      if (i === 0) {\n        const text: string = state[modelKey].name;\n        crumbs.push({ icon: modelIcon, text });\n      } else if (i === 1) {\n        const text: string = state[modelKey][programmeKey][0].name;\n        crumbs.push({\n          icon: programmeIcon,\n          text,\n        });\n      } else if (i === 2) {\n        const text: string = children[selected.path[2]].name;\n        crumbs.push({\n          icon: children[selected.path[2]].icon,\n          text,\n        });\n      } else if (i === 3) {\n        const elements = programme[children[selected.path[2]].key];\n        let element;\n        if (Array.isArray(elements)) {\n          element = elements[selected.path[3]];\n        }\n        if (element) {\n          let text: string;\n          if (element.name && typeof element.name === 'string') {\n            text = element.name;\n          } else if (element.reference && typeof element.reference === 'string') {\n            text = element.reference;\n          } else {\n            text = 'Unknown';\n          }\n          crumbs.push({\n            icon: children[selected.path[2]].icon,\n            text,\n          });\n        }\n      }\n    }\n\n    return crumbs;\n  }\n\n  // If nothing selected then render no breadcrumbs\n  return [];\n}\n","// @flow\nexport const breadcrumbsContainer = {\n  width: '100%',\n};\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getBreadcrumbsData } from './selectors';\n\n// Blueprint Components\nimport { Breadcrumbs } from '@blueprintjs/core';\n\n// Styles\nimport { breadcrumbsContainer } from './styles';\n\n// Flow Types\nimport { type EditorBreadcrumbsProps } from './types';\nimport { type State } from '../../../../reducers/types';\n\nconst EditorBreadcrumbs = ({ breadcrumbs }: EditorBreadcrumbsProps): Node => (\n  <div style={breadcrumbsContainer}>\n    <Breadcrumbs items={breadcrumbs} />\n  </div>\n);\n\nconst mapStateToProps = (state: State) => ({\n  breadcrumbs: getBreadcrumbsData(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(EditorBreadcrumbs);\n","// @flow\nimport * as API from '../../model/api';\nimport type { State } from '../../reducers/types';\n\nexport function returnElementCount(\n  state: State\n): { costs: number, deliverables: number, stakeholders: number, phases: number } {\n  const { costs, deliverables, stakeholders, phases } = API.getProgramme(state.model);\n  return {\n    costs: costs.length,\n    deliverables: deliverables.length,\n    stakeholders: stakeholders.length,\n    phases: phases.length,\n  };\n}\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Blueprint Components\nimport { Button } from '@blueprintjs/core';\n\n// Reusable Components\nimport ConfirmPopover from '../ConfirmPopover';\n\n// Actions & Selectors\nimport { deleteAtom } from '../../actions/model';\nimport { returnElementCount } from './selectors';\n\n// Configuration Constants\nimport {\n  BENEFIT_ID,\n  DELIVERABLE_ID,\n  PHASE_ID,\n  COST_ID,\n  STAKEHOLDER_ID,\n} from '../../config/constants';\n\n// Utilities\nimport * as utils from '../../utils/utils';\n\n// Flow Types\nimport type { DeleteButtonProps } from './types';\n\n// Checks whether an element is able to be deleted or not\nconst isDisabled = (elementId, elementType, coreBenefits, elementCounts) => {\n  switch (elementType.id) {\n    case BENEFIT_ID:\n      return coreBenefits.includes(elementId);\n    case DELIVERABLE_ID:\n      return elementCounts.deliverables < 2;\n    case COST_ID:\n      return elementCounts.costs < 2;\n    case PHASE_ID:\n      return elementCounts.phases < 2;\n    case STAKEHOLDER_ID:\n      return elementCounts.stakeholders < 2;\n    default:\n      return false;\n  }\n};\n\nexport const DeleteButton = ({\n  elementId,\n  elementType,\n  handleDelete,\n  elementCounts,\n  coreBenefits,\n  ...buttonProps\n}: DeleteButtonProps) => {\n  // Decide if element is disabled\n  const disabled = isDisabled(elementId, elementType, coreBenefits, elementCounts);\n  return (\n    <ConfirmPopover\n      onClick={() => handleDelete(elementId, elementType.key)}\n      confirmLabel=\"Delete\"\n      text={utils.getDeletionConfirmationText(elementType.id)}\n      title=\"Confirm deletion\"\n    >\n      <Button {...buttonProps} disabled={disabled} />\n    </ConfirmPopover>\n  );\n};\n\n// Redux Mappings\nconst mapStateToProps = state => ({\n  elementCounts: returnElementCount(state),\n  coreBenefits: state.model.programmes[0]._coreBenefits,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleDelete: (id, key) => dispatch(deleteAtom(id, key)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DeleteButton);\n","import DeleteButton from './DeleteButton';\nexport default DeleteButton;\n","import InfoPopover from './InfoPopover';\nexport default InfoPopover;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\n// Blueprint Components\nimport { Popover, H5, Text } from '@blueprintjs/core';\n\ntype InfoPopoverProps = {\n  children: Node,\n  title: string,\n  text: string | Array<string>,\n};\n\nexport const InfoPopover = (props: InfoPopoverProps) => {\n  const { children, title, text, ...popoverProps } = props;\n  return (\n    <Popover {...popoverProps}>\n      {children}\n      <div style={{ padding: 10, maxWidth: '400px' }}>\n        <H5>{title}</H5>\n        {Array.isArray(text) ? (\n          text.map((t, index) => (\n            <div key={`info_${index}`} style={{ marginBottom: '10px' }}>\n              <Text>{t}</Text>\n            </div>\n          ))\n        ) : (\n          <Text>{text}</Text>\n        )}\n      </div>\n    </Popover>\n  );\n};\n\nexport default InfoPopover;\n","import DuplicateButton from './DuplicateButton';\nexport default DuplicateButton;\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Blueprint Components\nimport { Button } from '@blueprintjs/core';\n\n// Actions & Selectors\nimport { duplicateAtom } from '../../actions/model';\n\n// Flow Types\nimport type { DuplicateButtonProps } from './types';\n\nconst DuplicateButton = ({\n  elementId,\n  elementType,\n  handleDuplicate,\n  ...buttonProps\n}: DuplicateButtonProps) => {\n  return <Button {...buttonProps} onClick={() => handleDuplicate(elementId, elementType.key)} />;\n};\n\n// Redux Mappings\nconst mapDispatchToProps = dispatch => ({\n  handleDuplicate: (id, key) => dispatch(duplicateAtom(id, key)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(DuplicateButton);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Plural library\nimport pluralize from 'pluralize';\n\n// Blueprint Components\nimport { MenuItem } from '@blueprintjs/core';\n\n// Actions & Selectors\nimport { addAtom } from '../../actions/model';\n\n// Flow Types\nimport type { NewElementMenuItemProps } from './types';\n\nconst NewElementMenuItem = ({\n  elementType,\n  handleAddElement,\n  ...itemProps\n}: NewElementMenuItemProps) => {\n  return (\n    <MenuItem\n      text={pluralize.singular(elementType.name)}\n      icon={elementType.icon}\n      {...itemProps}\n      onClick={() => handleAddElement(elementType)}\n    />\n  );\n};\n\n// Redux Mappings\nconst mapDispatchToProps = dispatch => ({\n  handleAddElement: type => dispatch(addAtom(type)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NewElementMenuItem);\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\n// Blueprint Components\nimport { Menu, Divider, Popover, Button } from '@blueprintjs/core';\n\n// Reusable Components\nimport MenuItem from './MenuItem';\n\n// Configuration Constants\nimport * as CONSTANTS from '../../config/constants';\n\n// Flow Types\nimport type { TypeObject } from '../../utils/utils';\n\nexport type AddElementHandler = (type: TypeObject) => void;\n\n/**\n * Renders a menu with items for adding atomic and strategy map types\n * @param {AddButtonProps} props\n * @return {Node} menu\n */\nconst AddOptions = (): Node => (\n  <Menu>\n    {CONSTANTS.ATOMIC_TYPES.map(type => (\n      <MenuItem elementType={type} key={`new_element_button_${type.id}`} />\n    ))}\n    <Divider />\n    {CONSTANTS.STRATEGY_MAP_TYPES.map(type => (\n      <MenuItem elementType={type} key={`new_element_button_${type.id}`} />\n    ))}\n  </Menu>\n);\n\n/**\n * Renders a button which triggers a popover designed to add elements to model explorer\n * @param {AddButtonProps} props\n * @return {Node} popover-style button\n */\nexport const AddElementButton = ({ ...buttonProps }: {}): Node => (\n  <Popover content={<AddOptions />}>\n    <Button icon=\"add\" {...buttonProps} rightIcon=\"caret-down\" small>\n      Add New Element\n    </Button>\n  </Popover>\n);\n\nexport default AddElementButton;\n","import AddElementButton from './AddElementButton';\nexport default AddElementButton;\n","// @flow\nimport { type State } from '../../../../reducers/types';\n\nexport const getSelectedBenefitAttributionBenefit = (state: State) => {\n  if (!state.editor.benefitAttribution.selectedBenefit) {\n    return state.model.programmes[0]._coreBenefits[0];\n  } else {\n    return state.editor.benefitAttribution.selectedBenefit;\n  }\n};\n","export const toolbarContainer = {\n  margin: '10px 0',\n  minHeight: '24px', // height of button\n};\n\nexport const matrixAxesTagsStyle = {\n  display: 'inline-block',\n};\n\nexport const matrixTagStyle = {\n  marginRight: '10px',\n};\n\nexport const switchBenefitContainer = { display: 'inline-block', marginLeft: '5px' };\n\nexport const switchBenefitLabelContainer = { display: 'inline-block', marginRight: '10px' };\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getSelectedBenefitAttributionBenefit as getSelectedBenefit } from './selectors';\n\n// Blueprint Components\nimport { MenuItem, Button, ButtonGroup, Intent, Alignment, Position } from '@blueprintjs/core';\nimport { Select } from '@blueprintjs/select';\n\n// Model API\nimport * as API from '../../../../model/api';\n\n// Constants\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../../config/constants';\n\n// Styles\nimport { switchBenefitContainer, switchBenefitLabelContainer } from './styles';\n\n// Flow Types\nimport { type SwitchBenefitGroupProps } from './types';\nimport { type Benefit } from '../../../../model/api/types';\n\ntype ItemProps = {\n  handleClick: MouseEvent => void,\n};\n\nconst renderItem = (active: Benefit) => (benefit: Benefit, { handleClick }: ItemProps): Node => {\n  return (\n    <MenuItem\n      key={`BENEFIT_SELECT_VALUE_${benefit.id}`}\n      text={benefit.name}\n      active={benefit.id === active.id}\n      label={benefit.type === BENEFIT_TYPE_FINANCIAL ? 'Financial' : 'Non-Financial'}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst SwitchBenefitGroup = ({\n  benefits,\n  active,\n  handleChange,\n  ...props\n}: SwitchBenefitGroupProps): Node => {\n  return (\n    <div style={switchBenefitContainer}>\n      <Select\n        items={benefits}\n        itemRenderer={renderItem(active)}\n        onItemSelect={benefit => handleChange(benefit.id)}\n        onActiveItemChange={benefit => handleChange(benefit.id)}\n        activeItem={active}\n        popoverProps={{ position: Position.RIGHT_BOTTOM }}\n        filterable={false}\n      >\n        <div style={switchBenefitLabelContainer}>Select Benefit:</div>\n        <ButtonGroup style={{ width: '130px' }}>\n          <Button\n            fill\n            small\n            intent={Intent.PRIMARY}\n            rightIcon=\"caret-down\"\n            alignText={Alignment.LEFT}\n            text={active.name}\n          />\n        </ButtonGroup>\n      </Select>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  benefits: API.getBenefits(state.model),\n  active: API.getBenefitById(state.model, getSelectedBenefit(state)),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: value => dispatch({ type: 'SET_SELECTED_BENEFIT_ATTRIBUTION', value }),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SwitchBenefitGroup);\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { Tag, Intent } from '@blueprintjs/core';\n\n// Constants\nimport {\n  BENEFIT_ATTRIBUTION_ID,\n  BENEFIT_BUILDUP_ID,\n  COST_ATTRIBUTION_ID,\n  STAKEHOLDER_BENEFITS_ID,\n} from '../../../../config/constants';\n\n// Styles\nimport { matrixAxesTagsStyle, matrixTagStyle } from './styles';\n\nconst getTags = (typeId: string) => {\n  switch (typeId) {\n    case BENEFIT_ATTRIBUTION_ID:\n      return ['Deliverables', 'Phases'];\n    case BENEFIT_BUILDUP_ID:\n      return ['Benefits', 'Phases'];\n    case COST_ATTRIBUTION_ID:\n      return ['Costs', 'Phases'];\n    case STAKEHOLDER_BENEFITS_ID:\n      return ['Benefits', 'Stakeholders'];\n    default:\n      throw new Error('Tried to render matrix tags when matrix was not selected');\n  }\n};\n\nconst renderTag = (tag: string) => (\n  <Tag intent={Intent.PRIMARY} style={matrixTagStyle}>\n    {tag}\n  </Tag>\n);\n\nconst MatrixAxesTags = ({ typeId }: { typeId: string }) => {\n  const tags = getTags(typeId);\n  return (\n    <div style={matrixAxesTagsStyle}>\n      Rows: {renderTag(tags[0])}\n      Columns: {renderTag(tags[1])}\n    </div>\n  );\n};\n\nexport default MatrixAxesTags;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\n// Plural Library\nimport pluralize from 'pluralize';\n\n// Blueprint Components\nimport { Button, ButtonGroup, Intent } from '@blueprintjs/core';\nimport * as utils from '../../../../utils/utils';\n\n// Resuable Components\nimport DeleteButton from '../../../../components/DeleteButton';\nimport InfoPopover from '../../../../components/InfoPopover';\nimport DuplicateButton from '../../../../components/DuplicateButton';\nimport AddElementButton from '../../../../components/AddElementButton';\n\n// Local Relatives\nimport SwitchBenefitMatrix from './SwitchBenefitMatrix';\nimport MatrixAxesTags from './MatrixAxesTags';\n\n// Configuration Constants\nimport { MODEL_ID, PROGRAMME_ID, BENEFIT_ATTRIBUTION_ID } from '../../../../config/constants';\n\n// Styles\nimport { toolbarContainer } from './styles';\n\n// Flow Types\nimport type { ToolbarProps } from './types';\n\nconst displayElementButtons = (display, type) =>\n  display === 'form' && ![MODEL_ID, PROGRAMME_ID].includes(type.id);\n\n// Renders an add button which allows adding elements to the model\nconst AddElementGroup = () => (\n  <ButtonGroup>\n    <AddElementButton intent={Intent.PRIMARY} />\n  </ButtonGroup>\n);\n\n// Renders duplicate and delete buttons within a group\nconst ElementUpdateGroup = ({ type, elementId }) => (\n  <ButtonGroup>\n    <DuplicateButton\n      elementId={elementId}\n      elementType={type}\n      style={{ marginLeft: '10px' }}\n      icon=\"duplicate\"\n      text=\"Duplicate\"\n      small\n    />\n    <DeleteButton\n      elementId={elementId}\n      elementType={type}\n      text=\"Delete\"\n      icon=\"trash\"\n      intent={Intent.DANGER}\n      small\n    />\n  </ButtonGroup>\n);\n\nconst InformationButton = ({ type: { id, name } }) => (\n  <ButtonGroup style={{ float: 'right', marginRight: '10px' }}>\n    <InfoPopover title={`What is a ${pluralize.singular(name)}?`} text={utils.getHelpText(id)}>\n      <Button icon=\"help\" small>\n        {`What is a ${pluralize.singular(name)}?`}\n      </Button>\n    </InfoPopover>\n  </ButtonGroup>\n);\n\nconst Toolbar = ({ display, type, elementId }: ToolbarProps): Node => (\n  <div style={toolbarContainer}>\n    {display === 'matrix' && <MatrixAxesTags typeId={type.id} />}\n    {display === 'matrix' && type.id === BENEFIT_ATTRIBUTION_ID && <SwitchBenefitMatrix />}\n    {['form', 'table'].includes(display) && <AddElementGroup />}\n    {displayElementButtons(display, type) && (\n      <ElementUpdateGroup type={type} elementId={elementId} />\n    )}\n    {['table', 'form'].includes(display) && <InformationButton type={type} />}\n  </div>\n);\n\nexport default Toolbar;\n","// @flow\nexport const editorHeaderContainer = (dark: boolean) => ({\n  position: 'absolute',\n  padding: '10px 10px 0 10px',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: 'calc(100% - 12px)',\n  borderBottomStyle: 'solid',\n  borderBottomWidth: '1px',\n  borderBottomColor: '#00000030',\n  backgroundColor: dark ? 'rgb(48, 64, 77)' : 'white',\n});\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getSelectedInstanceId, getInputType } from './selectors';\n\n// Local Relatives\nimport Breadcrumbs from './Breadcrumbs';\nimport Toolbar from './Toolbar';\n\n// Styles\nimport { editorHeaderContainer } from './styles';\n\n// Flow Types\nimport { type HeaderProps } from './types';\nimport { type State } from '../../../reducers/types';\n\n// Renders a 'sticky' header containing the breadcrumbs to model element and toolbar\nconst Header = ({ type, dark, display, elementId, breadcrumbs }: HeaderProps) => (\n  <div style={editorHeaderContainer(dark)}>\n    <Breadcrumbs />\n    <Toolbar type={type} elementId={elementId} display={display} />\n  </div>\n);\n\n// Redux map state => props\nconst mapStateToProps = (state: State) => ({\n  dark: state.editor.dark,\n  type: getInputType(state),\n  elementId: getSelectedInstanceId(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Header);\n","// @flow\n// API, Constants and Utilities\nimport * as API from '../../../../model/api';\nimport * as CONSTANTS from '../../../../config/constants';\nimport { getTypeObject } from '../../../../utils/utils';\n\n// Flow Types\nimport { type FormObject, type FormFieldObject } from '../../../../utils/utils';\nimport { type State } from '../../../../reducers/types';\n\n/**\n * Returns the values stored in the redux store for a particular element\n * @param {State} state redux state\n * @param {string} typeKey type key for retreiving values\n * @param {string} elementId instance id\n */\nexport function getInitialValues(\n  state: State,\n  typeKey: string,\n  elementId: string\n): { +[string]: number | string | boolean | Array<any> } {\n  switch (typeKey) {\n    case CONSTANTS.MODEL_KEY:\n      const model = state.model;\n      const modelValues = {\n        name: model.name,\n        client: model.client,\n        author: model.author,\n      };\n      return modelValues;\n    //\n    case CONSTANTS.PROGRAMME_KEY:\n      const programme = API.getProgramme(state.model);\n      const programmeValues = {\n        name: programme.name,\n        start: programme.start,\n        financialStart: programme.financialStart,\n        scorecardStart: programme.scorecardStart,\n        unitOfMeasure: programme.unitOfMeasure,\n        mission: programme.mission,\n        vision: programme.vision,\n      };\n      return programmeValues;\n    //\n    case CONSTANTS.BENEFIT_KEY:\n      const selectedBenefit = API.getBenefitById(state.model, elementId);\n      const { ...benefitValues } = selectedBenefit;\n      return benefitValues;\n    //\n    case CONSTANTS.COST_KEY:\n      const selectedCost = API.getCostById(state.model, elementId);\n      const { ...costValues } = selectedCost;\n      return costValues;\n    //\n    case CONSTANTS.DELIVERABLE_KEY:\n      const selectedDeliverable = API.getDeliverableById(state.model, elementId);\n      const { ...deliverableValues } = selectedDeliverable;\n      return deliverableValues;\n    //\n    case CONSTANTS.PHASE_KEY:\n      const selectedPhase = API.getPhaseById(state.model, elementId);\n      const { ...phaseValues } = selectedPhase;\n      return phaseValues;\n    //\n    case CONSTANTS.STAKEHOLDER_KEY:\n      const selectedStakeholder = API.getStakeholderById(state.model, elementId);\n      const { ...stakeholderValues } = selectedStakeholder;\n      return stakeholderValues;\n    //\n    case CONSTANTS.MEASURE_KEY:\n      const selectedMeasure = API.getMeasureById(state.model, elementId);\n      const { ...measureValues } = selectedMeasure;\n      return measureValues;\n    //\n    case CONSTANTS.OBJECTIVE_KEY:\n      const selectedObjective = API.getObjectiveById(state.model, elementId);\n      const { ...objectiveValues } = selectedObjective;\n      return objectiveValues;\n    //\n    case CONSTANTS.PERSPECTIVE_KEY:\n      const selectedPerspective = API.getPerspectiveById(state.model, elementId);\n      const { ...perspectiveValues } = selectedPerspective;\n      return perspectiveValues;\n    //\n    case CONSTANTS.THEME_KEY:\n      const selectedTheme = API.getThemeById(state.model, elementId);\n      const { ...themeValues } = selectedTheme;\n      return { ...themeValues };\n    //\n    case CONSTANTS.GROUP_KEY:\n      const selectedGroup = API.getGroupById(state.model, elementId);\n      const { ...groupValues } = selectedGroup;\n      return groupValues;\n    //\n    case CONSTANTS.BENEFICIARY_KEY:\n      const selectedBeneficiary = API.getBeneficiaryById(state.model, elementId);\n      const { ...beneficiaryValues } = selectedBeneficiary;\n      return beneficiaryValues;\n    //\n    case CONSTANTS.PARAMETER_KEY:\n      const selectedParameter = API.getParameterById(state.model, elementId);\n      const { ...parameterValues } = selectedParameter;\n      return parameterValues;\n    //\n    case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n      const selectedThread = API.getThreadById(state.model, elementId);\n      const { ...causeAndEffectValues } = selectedThread;\n      return causeAndEffectValues;\n    default:\n      throw new Error('Unknown element type when retreiving form values');\n  }\n}\n\n/**\n * Returns a callback function (designed for map, foreach, etc) which maps each field object to a\n * new field object. If the field is a select field, it will replace items if the value is a string\n * with the associated values from the store. E.g. field.items = 'groups', will replace field.items\n * with the list of groups from the store (in HTMLSelect format).\n * @param  {object}   state state tree\n * @param  {object}   form  form object\n * @return {function}       function\n */\nfunction returnFieldMapper(\n  state: State,\n  form: FormObject\n): (field: FormFieldObject) => FormFieldObject {\n  // Return a function which takes a field and returns updated field\n  return field => {\n    // If the field is a string id\n    if (field.items && typeof field.items === 'string') {\n      // Use field to identify model key\n      const itemKey = getTypeObject(field.items).key;\n\n      // Extract items from state\n      const stateItems = state.model.programmes[0][itemKey];\n\n      // Return new field object\n      return {\n        ...field,\n        items: [\n          {\n            id: `${form.id}_none_item`,\n            value: 'none',\n            label: 'None',\n          },\n          ...stateItems.map(item => ({\n            id: `${form.id}_${item.id}`,\n            value: item.id,\n            label: item.name,\n          })),\n        ],\n      };\n    }\n    return field;\n  };\n}\n\n/**\n * Returns the form object for a particular type of element, mapping string references of select\n * items to options.\n * @param {State} state redux state\n * @param {string} typeKey type key to retreive form for\n */\nexport function getFormData(state: State, typeKey: string) {\n  switch (typeKey) {\n    case CONSTANTS.MODEL_KEY:\n      return CONSTANTS.MODEL_FORM;\n    case CONSTANTS.PROGRAMME_KEY:\n      return CONSTANTS.PROGRAMME_FORM;\n    case CONSTANTS.BENEFIT_KEY:\n      return CONSTANTS.BENEFIT_FORM;\n    case CONSTANTS.COST_KEY:\n      return CONSTANTS.COST_FORM;\n    case CONSTANTS.DELIVERABLE_KEY:\n      return CONSTANTS.DELIVERABLE_FORM;\n    case CONSTANTS.PHASE_KEY:\n      return CONSTANTS.PHASE_FORM;\n    case CONSTANTS.STAKEHOLDER_KEY:\n      return CONSTANTS.STAKEHOLDER_FORM;\n    case CONSTANTS.MEASURE_KEY:\n      const measureFields = CONSTANTS.MEASURE_FORM.fields.map<FormFieldObject>(\n        returnFieldMapper(state, CONSTANTS.MEASURE_FORM)\n      );\n      return {\n        ...CONSTANTS.MEASURE_FORM,\n        fields: measureFields,\n      };\n    case CONSTANTS.OBJECTIVE_KEY:\n      const objectiveFields = CONSTANTS.OBJECTIVE_FORM.fields.map<FormFieldObject>(\n        returnFieldMapper(state, CONSTANTS.OBJECTIVE_FORM)\n      );\n      return {\n        ...CONSTANTS.OBJECTIVE_FORM,\n        fields: objectiveFields,\n      };\n    case CONSTANTS.PERSPECTIVE_KEY:\n      return CONSTANTS.PERSPECTIVE_FORM;\n    case CONSTANTS.THEME_KEY:\n      return CONSTANTS.THEME_FORM;\n    case CONSTANTS.GROUP_KEY:\n      return CONSTANTS.GROUP_FORM;\n    case CONSTANTS.BENEFICIARY_KEY:\n      return CONSTANTS.BENEFICIARY_FORM;\n    case CONSTANTS.PARAMETER_KEY:\n      return CONSTANTS.PARAMETER_FORM;\n    case CONSTANTS.CAUSE_AND_EFFECT_KEY:\n      const causeAndEffectFields = CONSTANTS.CAUSE_AND_EFFECT_FORM.fields.map<FormFieldObject>(\n        returnFieldMapper(state, CONSTANTS.CAUSE_AND_EFFECT_FORM)\n      );\n      return {\n        ...CONSTANTS.CAUSE_AND_EFFECT_FORM,\n        fields: causeAndEffectFields,\n      };\n    default:\n      throw new Error('Unknown element type when retreiving form data');\n  }\n}\n","// @flow\nimport { connect } from 'react-redux';\n\n// Actions & Selectors\nimport { getInitialValues, getFormData } from './selectors';\nimport { updateAtom } from '../../../../actions/model';\n\n// Reusable form component\nimport Form from '../../../../components/Form';\n\n// Model keys\nimport {\n  MODEL_KEY,\n  PROGRAMME_KEY,\n  SCENARIO_KEY,\n  BENEFIT_KEY,\n  COST_KEY,\n  DELIVERABLE_KEY,\n  PHASE_KEY,\n  STAKEHOLDER_KEY,\n  MEASURE_KEY,\n  OBJECTIVE_KEY,\n  PERSPECTIVE_KEY,\n  GROUP_KEY,\n  BENEFICIARY_KEY,\n  PARAMETER_KEY,\n  CAUSE_AND_EFFECT_KEY,\n  THEME_KEY,\n} from '../../../../config/constants';\n\n// Flow Types\nimport { type AtomicKey } from '../../../../actions/types';\n\n// Generic redux store connectors\nconst genericMapStateToProps = (typeKey: string, elementId: string) => state => ({\n  initialValues: getInitialValues(state, typeKey, elementId),\n  formData: getFormData(state, typeKey),\n  model: state.model,\n});\n\nconst genericMapDispatchToProps = (typeKey: AtomicKey, elementId: string) => dispatch => ({\n  handleUpdate: values => dispatch(updateAtom(elementId, typeKey, values)),\n});\n\n// Export specific form types as _different_ components\nexport const ModelForm = () => {\n  return connect(\n    genericMapStateToProps(MODEL_KEY, ''),\n    genericMapDispatchToProps(MODEL_KEY, '')\n  )(Form);\n};\n\nexport const ProgrammeForm = () => {\n  return connect(\n    genericMapStateToProps(PROGRAMME_KEY, ''),\n    genericMapDispatchToProps(PROGRAMME_KEY, '')\n  )(Form);\n};\n\nexport const ScenarioForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(SCENARIO_KEY, elementId),\n    genericMapDispatchToProps(SCENARIO_KEY, elementId)\n  );\n};\n\nexport const BenefitForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(BENEFIT_KEY, elementId),\n    genericMapDispatchToProps(BENEFIT_KEY, elementId)\n  )(Form);\n};\nexport const CostForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(COST_KEY, elementId),\n    genericMapDispatchToProps(COST_KEY, elementId)\n  )(Form);\n};\nexport const DeliverableForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(DELIVERABLE_KEY, elementId),\n    genericMapDispatchToProps(DELIVERABLE_KEY, elementId)\n  )(Form);\n};\nexport const PhaseForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(PHASE_KEY, elementId),\n    genericMapDispatchToProps(PHASE_KEY, elementId)\n  )(Form);\n};\nexport const StakeholderForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(STAKEHOLDER_KEY, elementId),\n    genericMapDispatchToProps(STAKEHOLDER_KEY, elementId)\n  )(Form);\n};\nexport const MeasureForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(MEASURE_KEY, elementId),\n    genericMapDispatchToProps(MEASURE_KEY, elementId)\n  )(Form);\n};\nexport const ObjectiveForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(OBJECTIVE_KEY, elementId),\n    genericMapDispatchToProps(OBJECTIVE_KEY, elementId)\n  )(Form);\n};\nexport const PerspectiveForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(PERSPECTIVE_KEY, elementId),\n    genericMapDispatchToProps(PERSPECTIVE_KEY, elementId)\n  )(Form);\n};\nexport const ThemeForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(THEME_KEY, elementId),\n    genericMapDispatchToProps(THEME_KEY, elementId)\n  )(Form);\n};\nexport const GroupForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(GROUP_KEY, elementId),\n    genericMapDispatchToProps(GROUP_KEY, elementId)\n  )(Form);\n};\nexport const BeneficiaryForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(BENEFICIARY_KEY, elementId),\n    genericMapDispatchToProps(BENEFICIARY_KEY, elementId)\n  )(Form);\n};\nexport const ParameterForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(PARAMETER_KEY, elementId),\n    genericMapDispatchToProps(PARAMETER_KEY, elementId)\n  )(Form);\n};\nexport const CauseAndEffectForm = (elementId: string) => {\n  return connect(\n    genericMapStateToProps(CAUSE_AND_EFFECT_KEY, elementId),\n    genericMapDispatchToProps(CAUSE_AND_EFFECT_KEY, elementId)\n  )(Form);\n};\n","// @flow\nimport React from 'react';\n\nimport {\n  BENEFIT_KEY,\n  COST_KEY,\n  DELIVERABLE_KEY,\n  PHASE_KEY,\n  STAKEHOLDER_KEY,\n  MEASURE_KEY,\n  OBJECTIVE_KEY,\n  PERSPECTIVE_KEY,\n  THEME_KEY,\n  GROUP_KEY,\n  BENEFICIARY_KEY,\n  PARAMETER_KEY,\n  CAUSE_AND_EFFECT_KEY,\n  PROGRAMME_KEY,\n  MODEL_KEY,\n} from '../../../config/constants';\n\n// Local Relatives\nimport {\n  BenefitForm,\n  CostForm,\n  DeliverableForm,\n  PhaseForm,\n  StakeholderForm,\n  MeasureForm,\n  ObjectiveForm,\n  PerspectiveForm,\n  ThemeForm,\n  GroupForm,\n  BeneficiaryForm,\n  ParameterForm,\n  CauseAndEffectForm,\n  ModelForm,\n  ProgrammeForm,\n} from './FormContainers';\n\nconst returnFormComponent = (typeKey, elementId) => {\n  switch (typeKey) {\n    case MODEL_KEY:\n      return ModelForm();\n    case PROGRAMME_KEY:\n      return ProgrammeForm();\n    case BENEFIT_KEY:\n      return BenefitForm(elementId);\n    case COST_KEY:\n      return CostForm(elementId);\n    case DELIVERABLE_KEY:\n      return DeliverableForm(elementId);\n    case PHASE_KEY:\n      return PhaseForm(elementId);\n    case STAKEHOLDER_KEY:\n      return StakeholderForm(elementId);\n    case MEASURE_KEY:\n      return MeasureForm(elementId);\n    case OBJECTIVE_KEY:\n      return ObjectiveForm(elementId);\n    case PERSPECTIVE_KEY:\n      return PerspectiveForm(elementId);\n    case THEME_KEY:\n      return ThemeForm(elementId);\n    case GROUP_KEY:\n      return GroupForm(elementId);\n    case BENEFICIARY_KEY:\n      return BeneficiaryForm(elementId);\n    case PARAMETER_KEY:\n      return ParameterForm(elementId);\n    case CAUSE_AND_EFFECT_KEY:\n      return CauseAndEffectForm(elementId);\n    default:\n      throw new Error('Unrecognised type key when rendering form');\n  }\n};\n\nconst InstanceForm = ({ typeKey, elementId }: { typeKey: string, elementId: string }) => {\n  const FormComponent = returnFormComponent(typeKey, elementId);\n\n  return <FormComponent />;\n};\nexport default InstanceForm;\n","// @flow\nimport React, { useState } from 'react';\nimport type { Node } from 'react';\n\nimport { Button, Intent } from '@blueprintjs/core';\nimport { Column, Table, EditableCell, RowHeaderCell } from '@blueprintjs/table';\n\ntype Axis = Array<{ id: string, name: string }>;\ntype Values = { [string]: { [string]: { [string]: number } } };\ntype UpdateValues = (values: Values) => void;\ntype HandleSubmit = (typeKey: string, values: Values) => void;\ntype HandleZUpdate = (id: string) => void;\ntype Matrix3DProps = {\n  values: Values,\n  x: Axis,\n  y: Axis,\n  z: Axis,\n  selectedZ: string,\n  updateValues: UpdateValues,\n  typeKey: string,\n  handleSubmit: HandleSubmit,\n  handleZUpdate: HandleZUpdate,\n  updateValues: UpdateValues,\n};\n\nconst returnData = (\n  values: Values,\n  x: Axis,\n  y: Axis,\n  selectedZ: string,\n  rowIndex: number,\n  columnIndex: number\n): number => {\n  return values[selectedZ][x[rowIndex].id][y[columnIndex].id];\n};\n\n// Retreives ids from index\nconst idsFromIndex = (x: Axis, y: Axis, rowIndex: number, columnIndex: number): Array<string> => {\n  return [x[rowIndex].id, y[columnIndex].id];\n};\n\n// Correctly calls redux store function updateValues\nconst handleConfirm = (\n  newValue: string,\n  oldValues: Values,\n  x: Axis,\n  y: Axis,\n  selectedZ: string,\n  rowIndex: number,\n  columnIndex: number,\n  updateValues: UpdateValues,\n  setChanged\n) => {\n  const ids = idsFromIndex(x, y, rowIndex, columnIndex);\n  if (Number.parseFloat(newValue) !== oldValues[selectedZ][ids[0]][ids[1]]) {\n    setChanged(true);\n  }\n  const values = {\n    ...oldValues,\n    [selectedZ]: {\n      ...oldValues[selectedZ],\n      [ids[0]]: {\n        ...oldValues[selectedZ][ids[0]],\n        [ids[1]]: Number.parseFloat(newValue),\n      },\n    },\n  };\n  updateValues(values);\n};\n\nconst renderCell = (\n  values: Values,\n  x: Axis,\n  y: Axis,\n  selectedZ: string,\n  updateValues: UpdateValues,\n  setChanged\n) => (rowIndex: number, columnIndex: number): Node => {\n  return (\n    <EditableCell\n      onConfirm={(val, rowIdx, colIdx) =>\n        handleConfirm(val, values, x, y, selectedZ, rowIdx, colIdx, updateValues, setChanged)\n      }\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n      value={returnData(values, x, y, selectedZ, rowIndex, columnIndex)}\n    />\n  );\n};\n\nconst renderRowHeader = (x: Axis) => (rowIndex: number) => {\n  return <RowHeaderCell>{x[rowIndex].name}</RowHeaderCell>;\n};\n\nconst renderColumns = (\n  values: Values,\n  x: Axis,\n  y: Axis,\n  selectedZ: string,\n  updateValues: UpdateValues,\n  setChanged\n) => {\n  return y.map(col => (\n    <Column\n      key={col.id}\n      name={col.name}\n      cellRenderer={renderCell(values, x, y, selectedZ, updateValues, setChanged)}\n    />\n  ));\n};\n\nconst Matrix3D = ({ values, x, y, selectedZ, typeKey, handleSubmit }: Matrix3DProps) => {\n  const [inputValues, setInputValues] = useState(values);\n  const [changed, setChanged] = useState(false);\n  return (\n    <div>\n      <Table numRows={x.length} rowHeaderCellRenderer={renderRowHeader(x)}>\n        {renderColumns(inputValues, x, y, selectedZ, setInputValues, setChanged)}\n      </Table>\n      <Button\n        style={{ position: 'fixed', bottom: '30px', right: '50px' }}\n        type=\"submit\"\n        text=\"Save Changes\"\n        intent={Intent.SUCCESS}\n        large\n        disabled={!changed}\n        onClick={() => {\n          handleSubmit(typeKey, inputValues);\n          setChanged(false);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Matrix3D;\n","// @flow\nimport { connect } from 'react-redux';\n\n// Model API\nimport * as API from '../../../model/api';\n\n// Reusable Components\nimport Matrix3D from '../../../components/InputComponents/Matrix3D';\n\n// Local selector\nconst getSelectedZ = state => {\n  if (!state.editor.benefitAttribution.selectedBenefit) {\n    return state.model.programmes[0]._coreBenefits[0];\n  } else {\n    return state.editor.benefitAttribution.selectedBenefit;\n  }\n};\n\n// Redux map state => props\nconst mapStateToProps = state => ({\n  x: API.getDeliverables(state.model),\n  y: API.getPhases(state.model),\n  values: state.model.programmes[0].benefitAttribution,\n  selectedZ: getSelectedZ(state),\n  typeKey: 'benefitAttribution',\n});\n\n// Redux map dispatch => props\nconst mapDispatchToProps = dispatch => ({\n  // handleSubmit passed through index\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Matrix3D);\n","// @flow\nimport { connect } from 'react-redux';\n\n// Model API\nimport * as API from '../../../model/api';\n\n// Reusable Components\nimport Matrix from '../../../components/InputComponents/Matrix';\n\nconst mapStateToProps = ({ model, matrix }) => ({\n  x: API.getBenefits(model),\n  y: API.getPhases(model),\n  values: model.programmes[0].benefitBuildup,\n  typeKey: 'benefitBuildup',\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // handleSubmit passed through index\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Matrix);\n","// @flow\nimport { connect } from 'react-redux';\n\n// Model API\nimport * as API from '../../../model/api';\n\n// Reusable Components\nimport Matrix from '../../../components/InputComponents/Matrix';\n\nconst mapStateToProps = ({ model, matrix }) => ({\n  x: API.getCosts(model),\n  y: API.getPhases(model),\n  values: model.programmes[0].costAttribution,\n  typeKey: 'costAttribution',\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // handleSubmit passed through index\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Matrix);\n","// @flow\nimport { connect } from 'react-redux';\n\n// Model API\nimport * as API from '../../../model/api';\n\n// Reusable Components\nimport Matrix from '../../../components/InputComponents/Matrix';\n\nconst mapStateToProps = ({ model, matrix }) => ({\n  x: API.getBenefits(model),\n  y: API.getStakeholders(model),\n  values: model.programmes[0].stakeholderBenefits,\n  typeKey: 'stakeholderBenefits',\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // handleSubmit passed though index\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Matrix);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Action Creators\nimport { updateMatrix } from '../../../actions/model';\n\n// Configuration Constants\nimport * as CONSTANTS from '../../../config/constants';\n\n// Local Relatives\nimport BenefitAttribution from './BenefitAttribution';\nimport BenefitBuildup from './BenefitBuildup';\nimport CostAttribution from './CostAttribution';\nimport StakeholderBenefits from './StakeholderBenefits';\n\n// Flow Types\nimport { type TypeObject } from '../../../utils/utils';\n\nexport type MatrixProps = {\n  type: TypeObject,\n  handleSubmit: () => any,\n};\n\nconst switchContainerComponent = ({ type, handleSubmit }: MatrixProps) => {\n  switch (type.id) {\n    case CONSTANTS.BENEFIT_BUILDUP_ID:\n      return <BenefitBuildup handleSubmit={handleSubmit} />;\n    case CONSTANTS.COST_ATTRIBUTION_ID:\n      return <CostAttribution handleSubmit={handleSubmit} />;\n    case CONSTANTS.STAKEHOLDER_BENEFITS_ID:\n      return <StakeholderBenefits handleSubmit={handleSubmit} />;\n    case CONSTANTS.BENEFIT_ATTRIBUTION_ID:\n      return <BenefitAttribution handleSubmit={handleSubmit} />;\n    default:\n      throw new Error('Input matrix type not recognised');\n  }\n};\n\nconst mapStateToProps = state => ({\n  type: state.editor.explorer.selected.type,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleSubmit: (key, values) => dispatch(updateMatrix(key, values)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(switchContainerComponent);\n","// @flow\nimport moment from 'moment';\n\n// Configuration Constants\nimport * as CONSTANTS from '../../../config/constants';\n\n// Utilities\nimport * as utils from '../../../utils/utils';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type TableObject } from '../../../utils/utils';\n\nexport function getSelectedTable(state: State): ?TableObject {\n  // Extract selected element from state\n  const { selected } = state.editor.explorer;\n\n  // Return undefined if selected element is undefined\n  if (!selected) {\n    return undefined;\n  }\n\n  // Return undefined if selected element is invalid (not a type id or is a compound type)\n  if (!utils.isTypeId(selected.id) || utils.isCompoundType(selected.type.id)) {\n    return undefined;\n  }\n\n  // Get type object\n  const type = utils.getTypeObject(selected.id);\n\n  // The type of table depends on the type key\n  const table = type.key;\n\n  // The elements to populate the table can be accessed by type key (table)\n  const elements = state.model.programmes[0][table];\n\n  if (elements.length === 0) {\n    return undefined;\n  }\n\n  // Filter all the element properties that aren't id, fetch their label, and construct array of\n  // headers\n  const headers = Object.keys(elements[0])\n    .filter(key => key !== 'id')\n    .map(key => ({\n      id: `${selected.id}_${key}`,\n      label: utils.getFormFieldLabel(selected.id, key),\n      name: key,\n    }));\n\n  // Map each element to a new element\n  const values = elements.map(element => {\n    const newElement = {};\n\n    // For each key of the existing element, apply formatting rules\n    Object.keys(element)\n      .filter(key => key !== 'id')\n      .forEach(key => {\n        // If item is a moment then display as format\n        if (moment.isMoment(element[key])) {\n          newElement[key] = element[key].format(CONSTANTS.DATE_FORMAT);\n\n          // If item is a select constant, retreive the label (e.g. Arithmetic, Geometric, etc.)\n        } else if (utils.isSelectConstant(element[key])) {\n          newElement[key] = utils.getSelectConstantLabel(element[key]);\n\n          // If item is an id of another element, then retrieve element name\n        } else if (utils.isElementId(table, key)) {\n          newElement[key] = utils.getSelectElementLabel(state.model.programmes[0], element[key]);\n\n          // If type is theme and key is measures, the retrieve element name\n        } else if (type.key === CONSTANTS.THEME_KEY && key === 'measures') {\n          newElement[key] = utils.getMeasuresStringFromIdArray(\n            state.model.programmes[0],\n            element[key]\n          );\n\n          // Otherwise just set the value raw\n        } else {\n          newElement[key] = element[key];\n        }\n      });\n\n    // Set the element id\n    newElement.id = element.id;\n    // Return the new element\n    return newElement;\n  });\n\n  // Return a form object which contains the headers, values, and the type\n  return {\n    headers,\n    values,\n    type,\n  };\n}\n","import EditButton from './EditButton';\n\nexport default EditButton;\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Blueprint Components\nimport { Button } from '@blueprintjs/core';\n\n// Actions & Selectors\nimport { jumpToElement } from '../../actions/editor';\n\n// Flow Types\nimport type { EditButtonProps } from './types';\n\nexport const EditButton = ({\n  explorerElement,\n  elementType,\n  handleJumpToForm,\n  ...buttonProps\n}: EditButtonProps) => {\n  return <Button {...buttonProps} onClick={() => handleJumpToForm(explorerElement, elementType)} />;\n};\n\n// Redux Mappings\nconst mapDispatchToProps = dispatch => ({\n  handleJumpToForm: (id, type) => dispatch(jumpToElement(id, type)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(EditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { HTMLTable, Intent, Text } from '@blueprintjs/core';\n\nimport DeleteButton from '../DeleteButton';\nimport DuplicateButton from '../DuplicateButton';\nimport EditButton from '../EditButton';\n\nconst buttonCellStyle = {\n  width: '100%',\n  textAlign: 'center',\n  verticalAlign: 'middle',\n};\n\nclass Table extends Component {\n  renderDeleteCell(elementId, elementType) {\n    return (\n      <td>\n        <div style={buttonCellStyle}>\n          <DeleteButton\n            elementId={elementId}\n            elementType={elementType}\n            intent={Intent.DANGER}\n            icon=\"trash\"\n            small\n            minimal\n          />\n        </div>\n      </td>\n    );\n  }\n\n  renderDuplicateCell(elementId, elementType) {\n    return (\n      <td>\n        <div style={buttonCellStyle}>\n          <DuplicateButton\n            elementId={elementId}\n            elementType={elementType}\n            icon=\"duplicate\"\n            small\n            minimal\n          />\n        </div>\n      </td>\n    );\n  }\n\n  renderEditCell(explorerElement, elementType) {\n    return (\n      <td>\n        <div style={buttonCellStyle}>\n          <EditButton\n            explorerElement={explorerElement}\n            elementType={elementType}\n            icon=\"edit\"\n            small\n            minimal\n          />\n        </div>\n      </td>\n    );\n  }\n\n  renderButtonHeader(label) {\n    return (\n      <th key={label} style={{ verticalAlign: 'middle', textAlign: 'center', width: 80 }}>\n        {label}\n      </th>\n    );\n  }\n\n  render() {\n    return (\n      <HTMLTable\n        condensed\n        interactive\n        bordered\n        striped\n        style={{ border: 'solid 1px', borderColor: '#C3C3C3', tableLayout: 'fixed', width: '100%' }}\n      >\n        <thead>\n          <tr>\n            {this.props.headers.map(({ id, label }) => {\n              const widthObject = this.props.widths.find(wo => wo.key === id);\n              let width;\n              if (widthObject) {\n                width = widthObject.width;\n              }\n              return (\n                <th key={id} style={{ verticalAlign: 'middle', textAlign: 'center', width }}>\n                  {label}\n                </th>\n              );\n            })}\n            {['Edit', 'Duplicate', 'Delete'].map(this.renderButtonHeader)}\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.values.map(element => {\n            return (\n              <tr key={element.id} onDoubleClick={this.props.edit(element, this.props.type)}>\n                {this.props.headers.map(({ name }) => {\n                  let text;\n                  if (typeof element[name] === 'boolean') {\n                    if (element[name]) {\n                      text = 'Y';\n                    } else {\n                      text = 'N';\n                    }\n                  } else {\n                    text = element[name];\n                  }\n                  return (\n                    <td key={`${element.id}_${name}`} style={{ verticalAlign: 'middle' }}>\n                      <Text ellipsize>{text}</Text>\n                    </td>\n                  );\n                })}\n                {this.renderEditCell(element, this.props.type)}\n                {this.renderDuplicateCell(element.id, this.props.type)}\n                {this.renderDeleteCell(element.id, this.props.type)}\n              </tr>\n            );\n          })}\n        </tbody>\n      </HTMLTable>\n    );\n  }\n}\n\nexport const tablePropType = {\n  headers: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  values: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n  widths: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      width: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nTable.propTypes = {\n  ...tablePropType,\n  edit: PropTypes.func.isRequired,\n};\n\nexport default Table;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getSelectedTable } from './selectors';\n\n// Action Creators\nimport { jumpToElement } from '../../../actions/editor';\n\n// Reusable Components\nimport ReusableTable from '../../../components/InputComponents/Table';\n\n// Configuration Constants\nimport * as CONSTANTS from '../../../config/constants';\n\n// Flow Types\nimport { type TableProps } from './types';\nimport { type State } from '../../../reducers/types';\nimport { type Dispatch } from '../../../actions/types';\n\nconst Table = ({ table, editId }: TableProps): Node => {\n  if (!table) {\n    return <div />;\n  } else {\n    return <ReusableTable {...table} edit={editId} widths={CONSTANTS.TABLE_WIDTHS} />;\n  }\n};\n\nconst mapStateToProps = (state: State) => ({\n  table: getSelectedTable(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  editId: (element, type) => () => dispatch(jumpToElement(element, type)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Table);\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { H3 } from '@blueprintjs/core';\n\n// Styles\nconst container = {\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-start',\n  flexDirection: 'column',\n};\n\nconst headingContainer = {\n  width: '100%',\n  alignItems: 'left',\n  paddingLeft: '20px',\n  paddingRight: '20px',\n  paddingTop: '20px',\n};\n\nconst textContainer = {\n  width: '100%',\n  alignItems: 'left',\n  paddingLeft: '20px',\n  paddingRight: '20px',\n  marginBottom: '20px',\n};\n\n// const cardsContainer = {\n//   display: 'flex',\n//   width: '100%',\n//   paddingLeft: '40px',\n//   paddingRight: '40px',\n//   flexDirection: 'row',\n//   alignItems: 'flex-start',\n// };\n\n// const card = { width: '300px', height: '150px', marginLeft: '20px', marginRight: '20px' };\n\nconst BlankPane = () => (\n  <div style={container}>\n    <div style={headingContainer}>\n      <H3>Welcome to the Value Management Toolset</H3>\n    </div>\n    <div style={textContainer}>\n      <p>To get started, select a model element from the value explorer on the left!</p>\n      <p>If you need any help using the toolset, try one of the following links:</p>\n      <ul>\n        <li>\n          <a href=\"/\">The Value Management Toolset User Guide:</a> contains instructions on how to\n          use and operate the toolset.\n        </li>\n        <li>\n          <a href=\"/\">The Value Management Book:</a> introduces the concept of value management and\n          how to make the most out of the toolset.\n        </li>\n      </ul>\n    </div>\n    {/* <div style={cardsContainer}>\n      <Card style={card} interactive>\n        <H4>Toolset User Guide:</H4>\n        <p>Contains instructions on how to use and operate the toolset</p>\n      </Card>\n      <Card style={card} interactive>\n        <H4>Value Management Book:</H4>\n        <p>\n          Introduces the concept of value management, and how to make the most out of the toolset\n        </p>\n      </Card>\n    </div> */}\n  </div>\n);\n\nexport default BlankPane;\n","// @flow\nexport const editorContentContainer = {\n  position: 'relative',\n  top: '80px',\n  padding: '10px 10px 10px 10px',\n};\n","// @flow\nimport React from 'react';\n\n// Local Relatives\nimport Header from './Header';\n\n// Mosaic Tiles\nimport InstanceForm from './InstanceForm';\nimport InputMatrix from './InputMatrix';\nimport ElementTable from './ElementTable';\nimport BlankPane from './BlankPane';\n\n// Styles\nimport { editorContentContainer } from './styles';\n\n// Flow Types\nimport { type EditorProps, type InputType } from './types';\n\ntype RenderInputProps = {\n  display: InputType,\n  elementId: ?string,\n  typeKey: ?string,\n};\n\n// Selectively renders a table, matrix, or form depending on element selected\nconst renderInput = ({ display, elementId, typeKey }: RenderInputProps) => {\n  switch (display) {\n    case 'form':\n      if (!elementId || !typeKey) {\n        throw new Error('Element id and type key must be defined to render form');\n      }\n      return <InstanceForm elementId={elementId} typeKey={typeKey} />;\n    case 'matrix':\n      return <InputMatrix />;\n    case 'table':\n      return <ElementTable />;\n    default:\n      throw new Error('Unrecognised type of input when rendering editor pane');\n  }\n};\n\n// Renders the header and possible input\nconst Editor = ({ display, elementId, typeKey }: EditorProps) => {\n  // If display is undefined, nothing is selected so render blank pane\n  if (!display) {\n    return <BlankPane />;\n  }\n\n  // Otherwise return input wrapped in context aware header\n  return (\n    <div>\n      {display && <Header display={display} />}\n      <div style={editorContentContainer}>{renderInput({ display, elementId, typeKey })}</div>\n    </div>\n  );\n};\n\nexport default Editor;\n","// @flow\n// Connect function\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getInputDisplay, getElementId, getTypeKey } from './selectors';\n\n// Editor component\nimport Editor from './Editor';\n\n// Redux mappingsw\nconst mapStateToProps = state => ({\n  dark: state.editor.dark,\n  display: getInputDisplay(state),\n  elementId: getElementId(state),\n  typeKey: getTypeKey(state),\n});\n\n// Inject props\nexport default connect(\n  mapStateToProps,\n  null\n)(Editor);\n"],"sourceRoot":""}