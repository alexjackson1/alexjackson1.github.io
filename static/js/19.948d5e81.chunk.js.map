{"version":3,"sources":["components/ScorecardGraph/styles.js","components/ScorecardGraph/index.js","actions/scorecard.js","tiles/ScorecardPane/selectors.js","components/DataInputTable/selectors.js","components/DataInputTable/index.js","tiles/ScorecardPane/DataInput/selectors.js","components/SwitchDataMonth/styles.js","components/SwitchDataMonth/index.js","tiles/ScorecardPane/DataInput/SwitchDataMonth.js","tiles/ScorecardPane/DataInput/Toolbar.js","tiles/ScorecardPane/DataInput/styles.js","tiles/ScorecardPane/DataInput/index.js","tiles/ScorecardPane/StrategicLevelScorecard.js","tiles/ScorecardPane/PerspectiveScorecard.js","tiles/ScorecardPane/ObjectiveScorecard.js","components/ValueGraph/styles.js","components/ValueGraph/index.js","tiles/ScorecardPane/MeasureScorecard.js","tiles/ScorecardPane/ScorecardRAGView/selectors.js","components/PerspectiveCard/styles.js","components/PerspectiveCard/utils.js","components/PerspectiveCard/ObjectiveTable.js","components/PerspectiveCard/index.js","tiles/ScorecardPane/ScorecardRAGView/PerspectiveCard.js","tiles/ScorecardPane/ScorecardRAGView/styles.js","tiles/ScorecardPane/ScorecardRAGView/SwitchRAGMonth.js","components/ThemeSwitcher/index.js","tiles/ScorecardPane/ScorecardRAGView/Toolbar.js","tiles/ScorecardPane/ScorecardRAGView/index.js","tiles/ScorecardPane/PerspectiveRAGView/selectors.js","components/ObjectiveCard/styles.js","components/ObjectiveCard/utils.js","components/ObjectiveCard/MeasureTable.js","components/ObjectiveCard/index.js","tiles/ScorecardPane/PerspectiveRAGView/ObjectiveCard.js","tiles/ScorecardPane/PerspectiveRAGView/styles.js","tiles/ScorecardPane/PerspectiveRAGView/SwitchRAGMonth.js","tiles/ScorecardPane/PerspectiveRAGView/Toolbar.js","tiles/ScorecardPane/PerspectiveRAGView/index.js","tiles/ScorecardPane/index.js"],"names":["chartMargin","top","right","left","bottom","colors","chroma","scale","ScorecardGraph","_ref","threshold","data","display","width","height","syncId","goodThreshold","badThreshold","react_default","a","createElement","es6","margin","dataKey","strokeDasharray","type","name","strokeWidth","stroke","dot","renderBadThresholdLine","map","_ref2","idx","i","n","color","key","concat","renderScorecardLine","length","hex","__webpack_require__","d","__webpack_exports__","setSelectedStrategyItem","setStrategyItemExpanded","setActiveScorecardMonth","_types__WEBPACK_IMPORTED_MODULE_0__","element","SET_SELECTED_STRATEGY_ITEM","id","expanded","SET_STRATEGY_ITEM_EXPANDED","month","SET_ACTIVE_SCORECARD_MONTH","getStrategicLevelDistribution","state","model","scorecard","results","programmeStart","API","months","_analysisYears","distribution","push","date","format","root","add","getPerspectiveDistribution","analysisYears","perspective","Object","defineProperty","getPerspectivesDistribution","perspectives","_loop","perspectiveValues","forEach","objectSpread","getPerspectivesDisplay","getPerspectiveDisplay","getObjectiveDistribution","objective","getObjectivesDistribution","perspectiveId","objectives","filter","_loop2","objectiveValues","getObjectivesDisplay","getObjectiveDisplay","getMeasureScoreDistribution","measure","getMeasureValueDistribution","value","DATE_FORMAT","getMeasuresDistribution","objectiveId","measures","_loop3","measureValues","getMeasuresDisplay","getMeasureDisplay","getDisplay","selected","strategyMap","SCORECARD_RAG_ID","PERSPECTIVE_RAG_ID","STRATEGY_DATA_ID","STRATEGY_ROOT_ID","MEASURE_ID","OBJECTIVE_ID","PERSPECTIVE_ID","Error","getSelectedId","getMeasureStandard","measureId","standard","getMeasureMinimumStandard","minimumStandard","getInitialValues","unitOfMeasure","best","Math","round","worst","baselineValue","dataInputColumns","setData","Header","accessor","maxWidth","Cell","EditableCell","cellInfo","cellDatum","index","column","style","numericInput","fill","onChange","event","newData","toConsumableArray","target","innerHTML","allowNumericCharactersOnly","returnTdProps","rowInfo","instance","padding","undefined","textAlign","connect","ownProps","values","_React$useState","React","useState","_React$useState2","slicedToArray","overflow","react_table_es","columns","defaultPageSize","showPagination","className","getTdProps","getActiveScorecardMonth","activeMonth","text","getMonthOptions","years","y","m","switchMonthContainer","switchMonthLabelContainer","marginRight","renderItem","active","handleClick","menuItem","onClick","SwitchMonthGroup","handleChange","objectWithoutProperties","select_select","items","itemRenderer","onItemSelect","onActiveItemChange","activeItem","filterable","buttonGroup","buttons","small","intent","Intent","PRIMARY","rightIcon","alignText","Alignment","LEFT","dispatch","DataInput_Toolbar","minHeight","paddingBottom","DataInput_SwitchDataMonth","SUCCESS","float","toolbarContainerStyle","dark","position","zIndex","borderBottomStyle","borderBottomWidth","borderBottomColor","backgroundColor","contentContainer","components_DataInputTable","topLevelDisplay","topLevelData","perspectiveData","perspectiveDisplay","flexDirection","justifyContent","objectivesData","objectivesDisplay","objectiveData","measuresData","measuresDisplay","objectiveDisplay","ValueGraph","renderMinimumStandardLine","renderValueLine","measureScoreData","measureValueData","measureDisplay","components_ValueGraph","getPerspectiveObjectives","comparePerspectives","b","toLowerCase","PERSPECTIVE_NAMES","slice","includes","getLayout","determineLayout","numberOfPerspectives","row","generalRows","remainingPerspectives","nextRow","getPerspectives","sort","getCardDates","activeMoment","moment","scorecardStart","dates","counter","isBefore","subtract","reverse","getObjectiveScores","startMoment","objectiveScores","relativeMonth","diff","getObjectiveStyles","styles","score","getPerspectiveScore","perspectiveScores","getPerspectiveStyle","getScorecardValues","scorecardScores","getScorecardStyle","RED","AMBER","GREEN","DEFAULT","baseCard","defaultCard","borderStyle","borderWidth","borderColor","defaultHeading","redCard","redHeading","amberCard","amberHeading","greenCard","greenHeading","objectiveContainer","tableValue","returnCardStyle","returnColor","returnWeight","weighting","weight","ObjectiveTableHeader","labels","label","renderObjectiveRow","parentId","theme","childValues","childStyle","activeObjectives","found","find","fontWeight","text_text","ellipsize","renderDataValue","ObjectiveTable","perspectiveStyle","objectiveStyles","getDateLabels","htmlTable","ObjectiveTable_ObjectiveTableHeader","CardHeading","headingStyle","returnHeadingStyle","NONE","DANGER","WARNING","returnIntent","html","tag","marginBottom","marginLeft","returnText","ScorecardCard","props","reduce","acc","card","PerspectiveCard_CardHeading","PerspectiveCard_ObjectiveTable","assign","getMeasures","PerspectiveCard","ragViewContainer","cardRowContainer","maxHeight","blankCardContainer","themes","programmes","themeOptions","ROOT_THEME","popoverProps","Position","RIGHT_BOTTOM","ScorecardData","activeTheme","setActiveTheme","SwitchRAGMonth","components_ThemeSwitcher","Toolbar_ScorecardData","BlankCard","CardRow","children","layout","ScorecardRAGView_Toolbar","ScorecardRAGView_CardRow","ScorecardRAGView_PerspectiveCard","ScorecardRAGView_BlankCard","getObjectiveMeasures","getMeasureScores","measureScores","scores","getMeasureValues","getMeasureStyles","getObjectiveScore","getObjectiveStyle","getPerspectiveName","baseStyle","MeasureTableHeader","MeasureTable","measureStyles","objectiveStyle","MeasureTable_MeasureTableHeader","renderChildRow","ObjectiveCard","cur","ObjectiveCard_CardHeading","ObjectiveCard_MeasureTable","PerspectiveData","PerspectiveRAGView_SwitchRAGMonth","Toolbar_PerspectiveData","PerspectiveRAGView_Toolbar","j","rows","PerspectiveRAGView_CardRow","PerspectiveRAGView_ObjectiveCard","renderGrid","selectedId","ScorecardPane_ScorecardRAGView","PerspectiveRAGView","ScorecardPane_DataInput","ScorecardPane_StrategicLevelScorecard","ScorecardPane_PerspectiveScorecard","ScorecardPane_ObjectiveScorecard","ScorecardPane_MeasureScorecard","renderContent"],"mappings":"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","file":"static/js/19.948d5e81.chunk.js","sourcesContent":["// @flow\nexport const chartMargin = { top: 10, right: 10, left: 10, bottom: 10 };\nexport const thresholdStrokeWidth = 3;\nexport const scorecardStrokeWidth = 3;\nexport const goodThresholdColor = '#0f9960';\nexport const badThresholdColor = '#db3737';\nexport const colorRange = ['#aeecae', '#05587c'];\n","// @flow\nimport React from 'react';\n\n// Color library\nimport chroma from 'chroma-js';\n\n// Chart components\nimport {\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Line,\n} from 'recharts';\n\n// Styles\nimport {\n  chartMargin,\n  thresholdStrokeWidth,\n  scorecardStrokeWidth,\n  goodThresholdColor,\n  badThresholdColor,\n  colorRange,\n} from './styles';\n\n// Flow types\ntype ScorecardDatum = {\n  date: string,\n  [string]: number,\n};\n\ntype ScorecardData = Array<ScorecardDatum>;\n\ntype ScorecardGraphProps = {\n  data: ScorecardData,\n  display: Array<{ dataKey: string, name: string }>,\n  width: string,\n  height: string,\n  syncId?: string,\n  goodThreshold?: number,\n  badThreshold?: number,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\n// Good threshold line component\nconst renderGoodThresholdLine = threshold => {\n  return (\n    <Line\n      type=\"monotone\"\n      name=\"Good Threshold\"\n      dataKey={() => threshold}\n      strokeWidth={thresholdStrokeWidth}\n      stroke={goodThresholdColor}\n      dot={false}\n    />\n  );\n};\n\n// Bad threshold line component\nconst renderBadThresholdLine = threshold => (\n  <Line\n    type=\"monotone\"\n    strokeWidth={thresholdStrokeWidth}\n    stroke={badThresholdColor}\n    name=\"Bad Threshold\"\n    dataKey={() => threshold}\n    dot={false}\n  />\n);\n\n// Scorecard line component\nconst renderScorecardLine = (dataKey, name, color) => (\n  <Line\n    key={`SCORECARD_LINE_${dataKey}`}\n    type=\"monotone\"\n    strokeWidth={scorecardStrokeWidth}\n    name={name}\n    dataKey={dataKey}\n    stroke={color}\n  />\n);\n\n// Graph component\nexport const ScorecardGraph = ({\n  data,\n  display,\n  width,\n  height,\n  syncId,\n  goodThreshold,\n  badThreshold,\n}: ScorecardGraphProps) => {\n  return (\n    <ResponsiveContainer width={width} height={height}>\n      <LineChart data={data} syncId={syncId} margin={chartMargin}>\n        {/* Axes etc. */}\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        {/* Threshold lines */}\n        {typeof goodThreshold === 'number' && renderGoodThresholdLine(goodThreshold)}\n        {typeof badThreshold === 'number' && renderBadThresholdLine(badThreshold)}\n        {/* Scorecard lines */}\n        {display.map(({ dataKey, name }, idx) =>\n          renderScorecardLine(dataKey, name, getColor(idx, display.length)))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ScorecardGraph;\n","// @flow\nimport {\n  SET_SELECTED_STRATEGY_ITEM,\n  SET_STRATEGY_ITEM_EXPANDED,\n  SET_ACTIVE_SCORECARD_MONTH,\n} from './types';\n\nimport type {\n  SetSelectedStrategyItemAction,\n  SetStrategyItemExpandedAction,\n  SetActiveScorecardMonthAction,\n} from './types';\n\nimport { type MonthOption, type StrategyItem } from '../reducers/types';\n\nexport const setSelectedStrategyItem = (element: StrategyItem): SetSelectedStrategyItemAction => ({\n  type: SET_SELECTED_STRATEGY_ITEM,\n  element,\n});\n\nexport const setStrategyItemExpanded = (\n  id: string,\n  expanded: boolean\n): SetStrategyItemExpandedAction => ({\n  type: SET_STRATEGY_ITEM_EXPANDED,\n  id,\n  expanded,\n});\n\nexport const setActiveScorecardMonth = (month: MonthOption): SetActiveScorecardMonthAction => ({\n  type: SET_ACTIVE_SCORECARD_MONTH,\n  month,\n});\n","// @flow\nimport {\n  DATE_FORMAT,\n  STRATEGY_ROOT_ID,\n  STRATEGY_DATA_ID,\n  MEASURE_ID,\n  PERSPECTIVE_ID,\n  OBJECTIVE_ID,\n  SCORECARD_RAG_ID,\n  PERSPECTIVE_RAG_ID,\n} from '../../config/constants';\nimport * as API from '../../model/api';\n\nimport { type State } from '../../reducers/types';\n\nexport type DisplayOption =\n  | 'data'\n  | 'scorecard-rag'\n  | 'perspective-rag'\n  | 'strategicLevel'\n  | 'perspective'\n  | 'objective'\n  | 'measure'\n  | 'blank';\n\nexport function getStrategicLevelDistribution(state: State): Array<{ date: string, root: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      root: scorecard.root[i],\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getPerspectiveDistribution(\n  state: State,\n  id: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get perspective in question\n  const perspective = API.getPerspectiveById(model, id);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      [perspective.id]: scorecard.perspective[perspective.id][i],\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getPerspectivesDistribution(\n  state: State\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get perspectives\n  const perspectives = API.getPerspectives(model);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    // Get value for each perspective\n    const perspectiveValues = {};\n    perspectives.forEach(\n      perspective => (perspectiveValues[perspective.id] = scorecard.perspective[perspective.id][i])\n    );\n\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      ...perspectiveValues,\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getPerspectivesDisplay(state: State): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get perspectives\n  const perspectives = API.getPerspectives(model);\n\n  // Map each perspective to a datakey and display name\n  return perspectives.map(perspective => ({\n    dataKey: perspective.id,\n    name: perspective.name,\n  }));\n}\n\nexport function getPerspectiveDisplay(\n  state: State,\n  id: string\n): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get perspective in question\n  const perspective = API.getPerspectiveById(model, id);\n\n  // Map each perspective to a datakey and display name\n  return [\n    {\n      dataKey: perspective.id,\n      name: perspective.name,\n    },\n  ];\n}\n\nexport function getObjectiveDistribution(\n  state: State,\n  id: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get objective in question\n  const objective = API.getObjectiveById(model, id);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      [objective.id]: scorecard.objective[objective.id][i],\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getObjectivesDistribution(\n  state: State,\n  perspectiveId: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get objectives\n  const objectives = API.getObjectives(model).filter(\n    objective => objective.perspectiveId === perspectiveId\n  );\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    // Get value for each perspective\n    const objectiveValues = {};\n    objectives.forEach(\n      objective => (objectiveValues[objective.id] = scorecard.objective[objective.id][i])\n    );\n\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      ...objectiveValues,\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getObjectivesDisplay(\n  state: State,\n  perspectiveId: string\n): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get objectives\n  const objectives = API.getObjectives(model).filter(\n    objective => objective.perspectiveId === perspectiveId\n  );\n\n  // Map each objective to a datakey and display name\n  return objectives.map(objective => ({\n    dataKey: objective.id,\n    name: objective.name,\n  }));\n}\n\nexport function getObjectiveDisplay(\n  state: State,\n  id: string\n): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get objective in question\n  const objective = API.getObjectiveById(model, id);\n\n  // Map each objective to a datakey and display name\n  return [\n    {\n      dataKey: objective.id,\n      name: objective.name,\n    },\n  ];\n}\n\nexport function getMeasureScoreDistribution(\n  state: State,\n  id: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get measure in question\n  const measure = API.getMeasureById(model, id);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      [measure.id]: scorecard.measure[measure.id][i],\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getMeasureValueDistribution(\n  state: State,\n  id: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get measure in question\n  const measure = API.getMeasureById(model, id);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    const value = API.getScorecardValue(model, programmeStart.format(DATE_FORMAT), measure.id);\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      [measure.id]: value,\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getMeasuresDistribution(\n  state: State,\n  objectiveId: string\n): Array<{ date: string, [string]: number }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Extract scorecard results from model\n  const { scorecard } = model.results;\n\n  // Get programme start and years of analysis\n  const programmeStart = API.getProgrammeStart(model);\n  const analysisYears = model._analysisYears;\n\n  // Get measures\n  const measures = API.getMeasures(model).filter(measure => measure.objectiveId === objectiveId);\n\n  // Number of months of analysis\n  const months = analysisYears * 12;\n\n  // Produce data distribution\n  const distribution = [];\n  for (let i = 0; i < months; i++) {\n    // Get value for each perspective\n    const measureValues = {};\n    measures.forEach(measure => (measureValues[measure.id] = scorecard.measure[measure.id][i]));\n\n    distribution.push({\n      date: programmeStart.format('MM-YYYY'),\n      ...measureValues,\n    });\n    programmeStart.add(1, 'month');\n  }\n\n  return distribution;\n}\n\nexport function getMeasuresDisplay(\n  state: State,\n  objectiveId: string\n): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get measures\n  const measures = API.getMeasures(model).filter(measure => measure.objectiveId === objectiveId);\n\n  // Map each objective to a datakey and display name\n  return measures.map(measure => ({\n    dataKey: measure.id,\n    name: measure.name,\n  }));\n}\n\nexport function getMeasureDisplay(\n  state: State,\n  id: string\n): Array<{ dataKey: string, name: string }> {\n  // Extract model from state\n  const { model } = state;\n\n  // Get measure in question\n  const measure = API.getMeasureById(model, id);\n\n  // Map each objective to a datakey and display name\n  return [\n    {\n      dataKey: measure.id,\n      name: measure.name,\n    },\n  ];\n}\n\nexport function getDisplay(state: State): DisplayOption {\n  const { selected } = state.scorecard.strategyMap;\n  if (!selected) {\n    return 'blank';\n  } else {\n    switch (selected.type) {\n      case SCORECARD_RAG_ID:\n        return 'scorecard-rag';\n      case PERSPECTIVE_RAG_ID:\n        return 'perspective-rag';\n      case STRATEGY_DATA_ID:\n        return 'data';\n      case STRATEGY_ROOT_ID:\n        return 'strategicLevel';\n      case MEASURE_ID:\n        return 'measure';\n      case OBJECTIVE_ID:\n        return 'objective';\n      case PERSPECTIVE_ID:\n        return 'perspective';\n      default:\n        throw new Error(`Unrecognised selected element ${selected.type}`);\n    }\n  }\n}\n\nexport function getSelectedId(state: State): ?string {\n  const { selected } = state.scorecard.strategyMap;\n  if (!selected) {\n    return undefined;\n  } else {\n    if (selected.type === PERSPECTIVE_RAG_ID) {\n      return selected.perspectiveId;\n    } else {\n      return selected.id;\n    }\n  }\n}\n\nexport function getMeasureStandard(state: State, measureId: string) {\n  const { model } = state;\n  return API.getMeasureById(model, measureId).standard;\n}\n\nexport function getMeasureMinimumStandard(state: State, measureId: string) {\n  const { model } = state;\n  return API.getMeasureById(model, measureId).minimumStandard;\n}\n","// @flow\nimport * as API from '../../model/api';\n\nimport { type State } from '../../reducers/types';\n\ntype DataInputValues = {\n  name: string,\n  unitOfMeasure: string,\n  best: number,\n  worst: number,\n  standard: number,\n  minimumStandard: number,\n  baselineValue: number,\n  value: number,\n};\n\nexport function getInitialValues(state: State, date: string): Array<DataInputValues> {\n  const { model } = state;\n  const measures = API.getMeasures(model);\n  return measures.map(measure => ({\n    name: measure.name,\n    unitOfMeasure: measure.unitOfMeasure,\n    best: Math.round(measure.best * 100) / 100,\n    worst: Math.round(measure.worst * 100) / 100,\n    standard: Math.round(measure.standard * 100) / 100,\n    minimumStandard: Math.round(measure.minimumStandard * 100) / 100,\n    baselineValue: Math.round(measure.baselineValue * 100) / 100,\n    value: API.getScorecardValue(model, date, measure.id),\n  }));\n}\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport ReactTable from 'react-table';\n\nimport { NumericInput } from '@blueprintjs/core';\n\nimport { getInitialValues } from './selectors';\n\nimport 'react-table/react-table.css';\n\ntype TableValues = Array<{\n  name: string,\n  unitOfMeasure: string,\n  best: number,\n  worst: number,\n  standard: number,\n  minimumStandard: number,\n  baselineValue: number,\n  value: number,\n}>;\n\nconst dataInputColumns = (data, setData) => [\n  {\n    Header: 'Measure Name',\n    accessor: 'name',\n  },\n  {\n    Header: 'Unit of Measure',\n    accessor: 'unitOfMeasure',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Best Value',\n    accessor: 'best',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Worst Value',\n    accessor: 'worst',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Standard',\n    accessor: 'standard',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Minimum Standard',\n    accessor: 'minimumStandard',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Baseline Value',\n    accessor: 'baselineValue',\n    maxWidth: 120,\n  },\n  {\n    Header: 'Value',\n    accessor: 'value',\n    Cell: EditableCell(data, setData),\n    maxWidth: 300,\n  },\n];\n\nconst EditableCell = (data, setData) => cellInfo => {\n  // Create handle change callback\n  const handleChange = event => {\n    // Create new data object\n    const newData = [...data];\n\n    // Update new data according to event target's inner html\n    newData[cellInfo.index][cellInfo.column.id] = event.target.innerHTML;\n\n    // Update data\n    setData(newData);\n  };\n\n  // Current cell data\n  const cellDatum = data[cellInfo.index][cellInfo.column.id];\n\n  // Render numeric input as cell\n  return (\n    <div style={{ margin: '3px' }}>\n      <NumericInput\n        fill\n        onChange={handleChange}\n        value={cellDatum}\n        allowNumericCharactersOnly={false}\n      />\n    </div>\n  );\n};\n\n// Return custom padding for cells\nconst returnTdProps = (state, rowInfo, column, instance) => {\n  const padding = column.id === 'value' ? '0px' : undefined;\n  const textAlign = column.id === 'name' ? 'left' : 'center';\n  return {\n    style: { padding, textAlign },\n  };\n};\n\nexport const DataInputTable = ({ values }: { values: TableValues }) => {\n  // Use state\n  const [data, setData] = React.useState(values);\n\n  return (\n    <div style={{ overflow: 'scroll', height: '100%' }}>\n      <ReactTable\n        data={data}\n        columns={dataInputColumns(data, setData)}\n        defaultPageSize={values.length}\n        showPagination={false}\n        className=\"-highlight\"\n        getTdProps={returnTdProps}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  values: getInitialValues(state, ownProps.date),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(DataInputTable);\n","// @flow\nimport * as API from '../../../model/api';\n\nimport { DATE_FORMAT } from '../../../config/constants';\n\nimport { type State, type MonthOption } from '../../../reducers/types';\n\nexport function getActiveScorecardMonth(state: State): MonthOption {\n  const { model, scorecard } = state;\n  if (scorecard.activeMonth) {\n    return scorecard.activeMonth;\n  } else {\n    const programmeStart = API.getProgrammeStart(model);\n    return { date: programmeStart.format(DATE_FORMAT), text: programmeStart.format('MMMM YYYY') };\n  }\n}\n\nexport function getMonthOptions(state: State): Array<MonthOption> {\n  const years = state.model._analysisYears;\n\n  // Get programme start\n  const { model } = state;\n  const programmeStart = API.getProgrammeStart(model);\n\n  // Create empty array for months\n  const months = [];\n\n  // For years of analysis, and each month, add too array\n  for (let y = 0; y < years; y++) {\n    for (let m = 0; m < 12; m++) {\n      months.push({\n        date: programmeStart.format(DATE_FORMAT),\n        text: programmeStart.format('MMMM YYYY'),\n      });\n      programmeStart.add(1, 'month');\n    }\n  }\n  return months;\n}\n","// @flow\n\nexport const switchMonthContainer = {\n  display: 'inline-block',\n};\nexport const switchMonthLabelContainer = { display: 'inline-block', marginRight: '10px' };\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\n// Blueprint Components\nimport { MenuItem, Button, ButtonGroup, Intent, Alignment } from '@blueprintjs/core';\nimport { Select } from '@blueprintjs/select';\n\n// Styles\nimport { switchMonthContainer, switchMonthLabelContainer } from './styles';\n\n// Flow Types\nimport { type MonthOption } from '../../reducers/types';\n\ntype SwitchMonthGroupProps = {\n  months: Array<MonthOption>,\n  handleChange: MonthOption => void,\n  active: MonthOption,\n};\n\ntype ItemProps = {\n  handleClick: MouseEvent => void,\n};\n\nconst renderItem = (active: MonthOption) => (\n  month: MonthOption,\n  { handleClick }: ItemProps\n): Node => {\n  return (\n    <MenuItem\n      key={`BALANCE_SCORECARD_MONTH_SELECT_${month.date}`}\n      text={month.text}\n      active={active.date === month.date}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst SwitchMonthGroup = ({\n  months,\n  active,\n  handleChange,\n  ...props\n}: SwitchMonthGroupProps): Node => {\n  return (\n    <div style={switchMonthContainer}>\n      <Select\n        items={months}\n        itemRenderer={renderItem(active)}\n        onItemSelect={month => handleChange(month)}\n        onActiveItemChange={month => handleChange(month)}\n        activeItem={active}\n        filterable={false}\n      >\n        <div style={switchMonthLabelContainer}>Select Month:</div>\n        <ButtonGroup style={{ width: '175px' }}>\n          <Button\n            fill\n            small\n            intent={Intent.PRIMARY}\n            rightIcon=\"caret-down\"\n            alignText={Alignment.LEFT}\n            text={active.text}\n          />\n        </ButtonGroup>\n      </Select>\n    </div>\n  );\n};\n\nexport default SwitchMonthGroup;\n","// @flow\nimport { connect } from 'react-redux';\n\n// Action creators & selectors\nimport { setActiveScorecardMonth } from '../../../actions/scorecard';\nimport { getActiveScorecardMonth, getMonthOptions } from './selectors';\n\nimport SwitchMonthGroup from '../../../components/SwitchDataMonth';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\n\nconst mapStateToProps = (state: State) => ({\n  months: getMonthOptions(state),\n  active: getActiveScorecardMonth(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: month => dispatch(setActiveScorecardMonth(month)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SwitchMonthGroup);\n","// @flow\nimport React from 'react';\n\nimport { Button, Intent } from '@blueprintjs/core';\n\nimport SwitchDataMonth from './SwitchDataMonth';\n\nexport default () => (\n  <div style={{ minHeight: '25px', paddingBottom: '10px' }}>\n    <SwitchDataMonth />\n    <Button\n      intent={Intent.SUCCESS}\n      text=\"Save Changes\"\n      small\n      style={{ display: 'inline-block', float: 'right' }}\n    />\n  </div>\n);\n","// @flow\nexport const toolbarContainerStyle = (dark: boolean) => ({\n  position: 'absolute',\n  padding: '10px 10px 0 10px',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: 'calc(100% - 10px)',\n  borderBottomStyle: 'solid',\n  borderBottomWidth: '1px',\n  borderBottomColor: '#00000030',\n  backgroundColor: dark ? 'rgb(48, 64, 77)' : 'white',\n});\n\nexport const contentContainer = { position: 'relative', top: '50px', padding: '0 5px 10px' };\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport DataInputTable from '../../../components/DataInputTable';\nimport Toolbar from './Toolbar';\n\nimport { toolbarContainerStyle, contentContainer } from './styles';\nimport { getActiveScorecardMonth } from './selectors';\n\nimport { type State } from '../../../reducers/types';\n\nconst DataInput = ({ dark, date }: { dark: boolean, date: string }) => (\n  <div>\n    <div style={toolbarContainerStyle(dark)}>\n      <Toolbar />\n    </div>\n    <div style={contentContainer}>\n      <DataInputTable date={date} />\n    </div>\n  </div>\n);\n\nconst mapStateToProps = (state: State) => ({\n  date: getActiveScorecardMonth(state).date,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(DataInput);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  getStrategicLevelDistribution,\n  getPerspectivesDistribution,\n  getPerspectivesDisplay,\n} from './selectors';\n\nimport ScorecardGraph from '../../components/ScorecardGraph';\n\nimport { type State } from '../../reducers/types';\n\nconst topLevelDisplay = [{ dataKey: 'root', name: 'Strategic Level' }];\nconst StrategicLevelScorecard = ({ topLevelData, perspectiveData, perspectiveDisplay }) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        width: '100%',\n        padding: '20px 50px',\n        justifyContent: 'space-around',\n      }}\n    >\n      <ScorecardGraph\n        data={topLevelData}\n        display={topLevelDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"strategic-level-sync\"\n      />\n      <ScorecardGraph\n        data={perspectiveData}\n        display={perspectiveDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"strategic-level-sync\"\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    topLevelData: getStrategicLevelDistribution(state),\n    perspectiveData: getPerspectivesDistribution(state),\n    perspectiveDisplay: getPerspectivesDisplay(state),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(StrategicLevelScorecard);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  getPerspectiveDistribution,\n  getObjectivesDistribution,\n  getPerspectiveDisplay,\n  getObjectivesDisplay,\n} from './selectors';\n\nimport ScorecardGraph from '../../components/ScorecardGraph';\n\nimport { type State } from '../../reducers/types';\n\nconst PerspectiveScorecard = ({\n  perspectiveData,\n  objectivesData,\n  perspectiveDisplay,\n  objectivesDisplay,\n}) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        width: '100%',\n        padding: '20px 50px',\n        justifyContent: 'space-around',\n      }}\n    >\n      <ScorecardGraph\n        data={perspectiveData}\n        display={perspectiveDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"perspective-level-sync\"\n      />\n      <ScorecardGraph\n        data={objectivesData}\n        display={objectivesDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"perspective-level-sync\"\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State, ownProps: { perspectiveId: string }) => {\n  return {\n    perspectiveData: getPerspectiveDistribution(state, ownProps.perspectiveId),\n    objectivesData: getObjectivesDistribution(state, ownProps.perspectiveId),\n    objectivesDisplay: getObjectivesDisplay(state, ownProps.perspectiveId),\n    perspectiveDisplay: getPerspectiveDisplay(state, ownProps.perspectiveId),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PerspectiveScorecard);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  getObjectiveDistribution,\n  getMeasuresDistribution,\n  getObjectiveDisplay,\n  getMeasuresDisplay,\n} from './selectors';\n\nimport ScorecardGraph from '../../components/ScorecardGraph';\n\nimport { type State } from '../../reducers/types';\n\nconst ObjectiveScorecard = ({ objectiveData, measuresData, objectiveDisplay, measuresDisplay }) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        width: '100%',\n        padding: '20px 50px',\n        justifyContent: 'space-around',\n      }}\n    >\n      <ScorecardGraph\n        data={objectiveData}\n        display={objectiveDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"objective-level-sync\"\n      />\n      <ScorecardGraph\n        data={measuresData}\n        display={measuresDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"objective-level-sync\"\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State, ownProps: { objectiveId: string }) => {\n  return {\n    objectiveData: getObjectiveDistribution(state, ownProps.objectiveId),\n    measuresData: getMeasuresDistribution(state, ownProps.objectiveId),\n    measuresDisplay: getMeasuresDisplay(state, ownProps.objectiveId),\n    objectiveDisplay: getObjectiveDisplay(state, ownProps.objectiveId),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ObjectiveScorecard);\n","// @flow\nexport const chartMargin = { top: 10, right: 10, left: 10, bottom: 10 };\nexport const standardStrokeWidth = 1;\nexport const valueStrokeWidth = 3;\nexport const standardColor = '#0f9960';\nexport const minimumStandardColor = '#db3737';\nexport const colorRange = ['#aeecae', '#05587c'];\n","// @flow\nimport React from 'react';\n\n// Color library\nimport chroma from 'chroma-js';\n\n// Chart components\nimport {\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Line,\n} from 'recharts';\n\n// Styles\nimport {\n  chartMargin,\n  standardStrokeWidth,\n  valueStrokeWidth,\n  minimumStandardColor,\n  standardColor,\n  colorRange,\n} from './styles';\n\n// Flow types\ntype MeasureDatum = {\n  date: string,\n  [string]: number,\n};\n\ntype ValueData = Array<MeasureDatum>;\n\ntype ValueGraphProps = {\n  data: ValueData,\n  display: Array<{ dataKey: string, name: string }>,\n  width: string,\n  height: string,\n  syncId?: string,\n  standard?: number,\n  minimumStandard?: number,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\n// Good threshold line component\nconst renderStandardLine = threshold => {\n  return (\n    <Line\n      type=\"monotone\"\n      name=\"Standard\"\n      dataKey={() => threshold}\n      strokeWidth={standardStrokeWidth}\n      stroke={standardColor}\n      dot={false}\n    />\n  );\n};\n\n// Bad threshold line component\nconst renderMinimumStandardLine = minimumStandard => (\n  <Line\n    type=\"monotone\"\n    strokeWidth={standardStrokeWidth}\n    stroke={minimumStandardColor}\n    name=\"Minimum Standard\"\n    dataKey={() => minimumStandard}\n    dot={false}\n  />\n);\n\n// Scorecard line component\nconst renderValueLine = (dataKey, name, color) => (\n  <Line\n    key={`VALUE_LINE_${dataKey}`}\n    type=\"monotone\"\n    strokeWidth={valueStrokeWidth}\n    name={name}\n    dataKey={dataKey}\n    stroke={color}\n  />\n);\n\n// Graph component\nexport const ValueGraph = ({\n  data,\n  display,\n  width,\n  height,\n  syncId,\n  standard,\n  minimumStandard,\n}: ValueGraphProps) => {\n  return (\n    <ResponsiveContainer width={width} height={height}>\n      <LineChart data={data} syncId={syncId} margin={chartMargin}>\n        {/* Axes etc. */}\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        {/* Threshold lines */}\n        {typeof standard === 'number' && renderStandardLine(standard)}\n        {typeof minimumStandard === 'number' && renderMinimumStandardLine(minimumStandard)}\n        {/* Scorecard lines */}\n        {display.map(({ dataKey, name }, idx) =>\n          renderValueLine(dataKey, name, getColor(idx, display.length)))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ValueGraph;\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  getMeasureScoreDistribution,\n  getMeasureDisplay,\n  getMeasureValueDistribution,\n  getMeasureStandard,\n  getMeasureMinimumStandard,\n} from './selectors';\n\nimport ScorecardGraph from '../../components/ScorecardGraph';\nimport ValueGraph from '../../components/ValueGraph';\n\nimport { type State } from '../../reducers/types';\n\nconst MeasureScorecard = ({\n  measureScoreData,\n  measureValueData,\n  measureDisplay,\n  standard,\n  minimumStandard,\n}) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        width: '100%',\n        padding: '20px 50px',\n        justifyContent: 'space-around',\n      }}\n    >\n      <ScorecardGraph\n        data={measureScoreData}\n        display={measureDisplay}\n        goodThreshold={6.66}\n        badThreshold={3.33}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"measure-level-sync\"\n      />\n      <ValueGraph\n        data={measureValueData}\n        display={measureDisplay}\n        standard={standard}\n        minimumStandard={minimumStandard}\n        width=\"100%\"\n        height=\"45%\"\n        syncId=\"measure-level-sync\"\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State, ownProps: { measureId: string }) => {\n  return {\n    measureScoreData: getMeasureScoreDistribution(state, ownProps.measureId),\n    measureValueData: getMeasureValueDistribution(state, ownProps.measureId),\n    measureDisplay: getMeasureDisplay(state, ownProps.measureId),\n    standard: getMeasureStandard(state, ownProps.measureId),\n    minimumStandard: getMeasureMinimumStandard(state, ownProps.measureId),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(MeasureScorecard);\n","// @flow\nimport moment from 'moment';\n\n// API Functions\nimport * as API from '../../../model/api';\n\n// Constants\nimport { DATE_FORMAT, PERSPECTIVE_NAMES } from '../../../config/constants';\n\n// Flow types\nimport { type State, type MonthOption } from '../../../reducers/types';\nimport { type Perspective, type Objective } from '../../../model/api/types';\n\nexport type StyleOption = 'RED' | 'AMBER' | 'GREEN' | 'DEFAULT';\n\nexport type ObjectiveValues = {\n  [string]: {\n    // Objective id\n    [string]: number, // Date\n  },\n};\n\nexport function getActiveScorecardMonth(state: State): MonthOption {\n  const { model, scorecard } = state;\n  if (scorecard.activeMonth) {\n    return scorecard.activeMonth;\n  } else {\n    const programmeStart = API.getProgrammeStart(model);\n    return { date: programmeStart.format(DATE_FORMAT), text: programmeStart.format('MMMM YYYY') };\n  }\n}\n\nexport function getMonthOptions(state: State): Array<MonthOption> {\n  const years = state.model._analysisYears;\n\n  // Get programme start\n  const { model } = state;\n  const programmeStart = API.getProgrammeStart(model);\n\n  // Create empty array for months\n  const months = [];\n\n  // For years of analysis, and each month, add too array\n  for (let y = 0; y < years; y++) {\n    for (let m = 0; m < 12; m++) {\n      months.push({\n        date: programmeStart.format(DATE_FORMAT),\n        text: programmeStart.format('MMMM YYYY'),\n      });\n      programmeStart.add(1, 'month');\n    }\n  }\n  return months;\n}\n\nexport function getPerspectives(state: State): Array<Perspective> {\n  return API.getPerspectives(state.model);\n}\n\nexport function getPerspectiveObjectives(state: State, id: string): Array<Objective> {\n  return API.getObjectives(state.model).filter(objective => objective.perspectiveId === id);\n}\n\nexport type RAGViewRow = Array<?Perspective>;\n\nexport function comparePerspectives(a: Perspective, b: Perspective) {\n  if (a.name.toLowerCase() === PERSPECTIVE_NAMES[0]) {\n    return -1;\n  }\n\n  if (a.name.toLowerCase() === PERSPECTIVE_NAMES[1]) {\n    if (b.name.toLowerCase() === PERSPECTIVE_NAMES[0]) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  if (a.name.toLowerCase() === PERSPECTIVE_NAMES[2]) {\n    if (PERSPECTIVE_NAMES.slice(0, 2).includes(b.name.toLowerCase())) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  if (a.name.toLowerCase() === PERSPECTIVE_NAMES[3]) {\n    if (PERSPECTIVE_NAMES.slice(0, 3).includes(b.name.toLowerCase())) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  if (a.name.toLowerCase() === PERSPECTIVE_NAMES[4]) {\n    if (PERSPECTIVE_NAMES.slice(0, 4).includes(b.name.toLowerCase())) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  if (PERSPECTIVE_NAMES.includes(b.name.toLowerCase())) {\n    return 1;\n  }\n\n  return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n}\n\nexport function determineLayout(perspectives: Array<Perspective>): Array<RAGViewRow> {\n  // Determine number of perspectives\n  const numberOfPerspectives = perspectives.length;\n\n  if (numberOfPerspectives === 0) {\n    return [];\n  } else if (numberOfPerspectives <= 4) {\n    return [\n      [undefined, perspectives[0], undefined],\n      [perspectives[1], undefined, perspectives[2]],\n      [undefined, perspectives[3], undefined],\n    ].filter(row => row[0] || row[1] || row[2]);\n  } else if (numberOfPerspectives <= 9) {\n    return [\n      [perspectives[5], perspectives[0], perspectives[6]],\n      [perspectives[4], perspectives[1], perspectives[2]],\n      [perspectives[7], perspectives[3], perspectives[8]],\n    ].filter(row => row[0] || row[1] || row[2]);\n  } else {\n    const generalRows = determineLayout(perspectives.slice(0, 9));\n    const remainingPerspectives = perspectives.slice(9);\n\n    let nextRow = [undefined, undefined, undefined];\n    remainingPerspectives.forEach((perspective, idx) => {\n      switch (idx % 3) {\n        case 0:\n          nextRow[1] = perspective;\n          break;\n        case 1:\n          nextRow[0] = perspective;\n          break;\n        case 2:\n          nextRow[2] = perspective;\n          break;\n        default:\n          break;\n      }\n      if (idx % 3 === 2 || remainingPerspectives.length - 1 === idx) {\n        generalRows.push(nextRow);\n        nextRow = [undefined, undefined, undefined];\n      }\n    });\n\n    return generalRows;\n  }\n}\n\nexport function getLayout(state: State): Array<RAGViewRow> {\n  // Retrieve list of all perspectives\n  const perspectives = getPerspectives(state).sort(comparePerspectives);\n\n  return determineLayout(perspectives);\n}\n\nexport function getCardDates(state: State): Array<string> {\n  // Get the active scorecard month\n  const active = getActiveScorecardMonth(state);\n\n  // Construct moment from active month\n  const activeMoment = moment(active.date, DATE_FORMAT, true);\n\n  // Get the scorecard start date\n  const scorecardStart = API.getProgrammeScorecardStart(state.model);\n\n  // Construct array to hold dates to display\n  const dates = [];\n\n  // Set counter to 4 months\n  let counter = 4;\n\n  // While we haven't reached the scorecard start or exceeded 4 months\n  while (!activeMoment.isBefore(scorecardStart) && counter !== 0) {\n    // Add the current date to the array\n    dates.push(activeMoment.format(DATE_FORMAT));\n\n    // Decrement 1 month\n    activeMoment.subtract(1, 'month');\n\n    // Decrement counter\n    counter--;\n  }\n\n  // Return dates in reverse order\n  return dates.reverse();\n}\n\nexport function getObjectiveScores(state: State, id: string): ObjectiveValues {\n  // Retrieve scorecard start as moment\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Retrieve objective scores from results\n  const { objective: objectiveScores } = state.model.results.scorecard;\n\n  // Get relevant objectives based on perspective id\n  const objectives = getPerspectiveObjectives(state, id);\n\n  // Retrieve dates on display\n  const dates = getCardDates(state);\n\n  // Construct object for returning values\n  const values = {};\n\n  // For each objective determine the score across dates\n  objectives.forEach(objective => {\n    // Create object for storing dates and values\n    const objectiveValues = {};\n\n    // Add a key for each date\n    dates.forEach(date => {\n      // Construct moment from current date\n      const currentMoment = moment(date, DATE_FORMAT, true);\n\n      // Determine relative month for lookup\n      const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n      if (!objectiveScores[objective.id]) {\n        objectiveValues[date] = 0;\n        return;\n      }\n\n      // Set object key with score\n      objectiveValues[date] = objectiveScores[objective.id][relativeMonth];\n    });\n\n    // Set objective key with objective values\n    values[objective.id] = objectiveValues;\n  });\n\n  // Return the objective scores\n  return values;\n}\n\nexport function getObjectiveStyles(state: State, id: string): { [string]: StyleOption } {\n  // Get relevant objectives (by perspective id)\n  const objectives = getPerspectiveObjectives(state, id);\n\n  // Get objective scores\n  const objectiveScores = getObjectiveScores(state, id);\n\n  // Get dates and extract last date\n  const dates = getCardDates(state);\n  const date = dates[dates.length - 1];\n\n  // Define new object to hold style values\n  const styles = {};\n\n  // For each objective add a key in styles\n  objectives.forEach(objective => {\n    // Determine the objective score for latest month\n    const score = objectiveScores[objective.id][date];\n\n    // Determine RAG\n    if (score === 0) {\n      styles[objective.id] = 'DEFAULT';\n    } else if (score < 10 / 3) {\n      styles[objective.id] = 'RED';\n    } else if (score < 20 / 3) {\n      styles[objective.id] = 'AMBER';\n    } else {\n      styles[objective.id] = 'GREEN';\n    }\n  });\n\n  // Return styles object\n  return styles;\n}\n\nexport function getPerspectiveScore(state: State, id: string): number {\n  // Retreive scorecard start\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Determine latest date\n  const dates = getCardDates(state);\n  const date = dates[dates.length - 1];\n\n  // Construct moment from current date\n  const currentMoment = moment(date, DATE_FORMAT, true);\n\n  // Determine relative month for lookup\n  const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n  // Extract perspective scorecard values\n  const { perspective: perspectiveScores } = state.model.results.scorecard;\n\n  if (!perspectiveScores[id]) {\n    return 0;\n  }\n\n  // return score\n  return perspectiveScores[id][relativeMonth];\n}\n\nexport function getPerspectiveStyle(state: State, id: string): StyleOption {\n  const score = getPerspectiveScore(state, id);\n\n  // Determine RAG\n  if (score === 0) {\n    return 'DEFAULT';\n  } else if (score < 10 / 3) {\n    return 'RED';\n  } else if (score < 20 / 3) {\n    return 'AMBER';\n  } else {\n    return 'GREEN';\n  }\n}\n\nexport function getScorecardValues(state: State): Array<number> {\n  // Determine dates on display\n  const dates = getCardDates(state);\n\n  // Retrieve root scorecard scores\n  const { root: scorecardScores } = state.model.results.scorecard;\n\n  // Retreive scorecard start\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Map each date to the appropriate score\n  return dates.map(date => {\n    // Construct moment for current date\n    const currentMoment = moment(date, DATE_FORMAT, true);\n\n    // Determine relative month for lookup\n    const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n    // Return score for month\n    return scorecardScores[relativeMonth];\n  });\n}\n\nexport function getScorecardStyle(state: State): StyleOption {\n  const values = getScorecardValues(state);\n  const score = values[values.length - 1];\n\n  // Determine RAG\n  if (score === 0) {\n    return 'DEFAULT';\n  } else if (score < 10 / 3) {\n    return 'RED';\n  } else if (score < 20 / 3) {\n    return 'AMBER';\n  } else {\n    return 'GREEN';\n  }\n}\n","// @flow\nexport const RED = '#C23030';\nexport const AMBER = '#F29D49';\nexport const GREEN = '#29A634';\nexport const DEFAULT = '#BFCCD6';\n\nexport const baseCard = {\n  width: '30%',\n  marginRight: '1%',\n};\n\nexport const defaultCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: DEFAULT,\n};\n\nexport const defaultHeading = {\n  display: 'inline-block',\n  color: DEFAULT,\n};\n\nexport const redCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: RED,\n};\n\nexport const redHeading = {\n  display: 'inline-block',\n  color: RED,\n};\n\nexport const amberCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: AMBER,\n};\n\nexport const amberHeading = {\n  display: 'inline-block',\n  color: AMBER,\n};\n\nexport const greenCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: GREEN,\n};\n\nexport const greenHeading = {\n  display: 'inline-block',\n  color: GREEN,\n};\n\nexport const objectiveContainer = {\n  overflow: 'auto',\n  height: 'calc(100% - 20px)',\n};\n\nexport const tableValue = {\n  textAlign: 'center',\n};\n","// @flow\n// Date time library\nimport moment from 'moment';\n\n// Blueprint JS\nimport { Intent } from '@blueprintjs/core';\n\n// Constants\nimport { DATE_FORMAT } from '../../config/constants';\n\n// Styles\nimport {\n  redHeading,\n  amberHeading,\n  greenHeading,\n  defaultHeading,\n  redCard,\n  amberCard,\n  greenCard,\n  baseCard,\n  defaultCard,\n  RED,\n  AMBER,\n  GREEN,\n  DEFAULT,\n} from './styles';\n\n// Flow Types\nimport { type StyleOption } from '../../tiles/ScorecardPane/ScorecardRAGView/selectors';\n\nexport function getDateLabels(dates: Array<string>): Array<string> {\n  return dates.map(date => moment(date, DATE_FORMAT, true).format('MMM YY'));\n}\n\nexport function returnHeadingStyle(style: StyleOption, active: boolean) {\n  if (!active) return { ...defaultHeading, color: 'grey' };\n  switch (style) {\n    case 'RED':\n      return redHeading;\n    case 'AMBER':\n      return amberHeading;\n    case 'GREEN':\n      return greenHeading;\n    case 'DEFAULT':\n    default:\n      return defaultHeading;\n  }\n}\n\nexport function returnCardStyle(style: StyleOption, active: boolean) {\n  if (!active) return baseCard;\n  switch (style) {\n    case 'RED':\n      return {\n        ...baseCard,\n        ...redCard,\n      };\n    case 'AMBER':\n      return {\n        ...baseCard,\n        ...amberCard,\n      };\n    case 'GREEN':\n      return {\n        ...baseCard,\n        ...greenCard,\n      };\n    case 'DEFAULT':\n    default:\n      return {\n        ...baseCard,\n        ...defaultCard,\n      };\n  }\n}\n\nexport function returnIntent(style: StyleOption, active: boolean) {\n  if (!active) return Intent.NONE;\n  switch (style) {\n    case 'RED':\n      return Intent.DANGER;\n    case 'AMBER':\n      return Intent.WARNING;\n    case 'GREEN':\n      return Intent.SUCCESS;\n    case 'DEFAULT':\n    default:\n      return Intent.NONE;\n  }\n}\n\nexport function returnText(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return 'Red';\n    case 'AMBER':\n      return 'Amber';\n    case 'GREEN':\n      return 'Green';\n    case 'DEFAULT':\n    default:\n      return 'No Data';\n  }\n}\n\nexport function returnColor(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return RED;\n    case 'AMBER':\n      return AMBER;\n    case 'GREEN':\n      return GREEN;\n    case 'DEFAULT':\n    default:\n      return DEFAULT;\n  }\n}\n\nexport function returnWeight(weighting: number) {\n  const weight = Math.round(weighting * 100);\n  return `${weight}%`;\n}\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { HTMLTable, Text } from '@blueprintjs/core';\n\n// Styles\nimport { tableValue } from './styles';\n\n// Utils\nimport { returnColor, returnWeight, getDateLabels } from './utils';\n\n// Flow Types\nimport { type Objective, type Measure, type Theme } from '../../model/api/types';\nimport { type StyleOption } from '../../tiles/ScorecardPane/ScorecardRAGView/selectors';\n\nexport type ObjectiveTableProps = {\n  perspectiveId: string,\n  perspectiveStyle: StyleOption,\n  objectives: Array<Objective>,\n  objectiveStyles: { [string]: StyleOption },\n  measures: Array<Measure>,\n  dates: Array<string>,\n  values: { [string]: { [string]: number } },\n  active: boolean,\n  theme: Theme,\n};\n\nconst renderDataValue = (objectiveId, values, color, fontWeight) => (date, idx) => {\n  return (\n    <td style={{ ...tableValue, color, fontWeight }} key={`RAG_VIEW_${objectiveId}_${idx}`}>\n      {values[date]}\n    </td>\n  );\n};\n\nconst ObjectiveTableHeader = ({ perspectiveId, labels, style, active }) => {\n  const color = active ? returnColor(style) : 'grey';\n\n  return (\n    <thead>\n      <tr>\n        <th style={{ textAlign: 'center', color }}>%</th>\n        <th style={{ color }}>Objective</th>\n        {labels.map(label => (\n          <th key={`RAG_VIEW_${perspectiveId}_${label}`} style={{ textAlign: 'center', color }}>\n            {label}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\nconst renderObjectiveRow = (parentId, values, dates, styles, measures, theme) => objective => {\n  const childValues = values[objective.id];\n  const childStyle = styles[objective.id];\n\n  const activeObjectives = theme.measures.map(measureId => {\n    const found = measures.find(measure => measure.id === measureId);\n    if (!found) {\n      throw new Error('Could not rehydrate measure from theme measure id');\n    }\n    return found.objectiveId;\n  });\n\n  const color = activeObjectives.includes(objective.id) ? returnColor(childStyle) : 'grey';\n  const fontWeight = activeObjectives.includes(objective.id) ? 'bold' : 'normal';\n\n  return (\n    <tr key={`RAG_VIEW_${parentId}_${objective.id}`}>\n      <td style={{ textAlign: 'center', color, fontWeight }}>\n        {returnWeight(objective.weighting)}\n      </td>\n      <td style={{ color, fontWeight }}>\n        <Text ellipsize>{objective.name}</Text>\n      </td>\n      {dates.map(renderDataValue(objective.id, childValues, color, fontWeight))}\n    </tr>\n  );\n};\n\nexport const ObjectiveTable = ({\n  perspectiveId,\n  perspectiveStyle,\n  objectives,\n  objectiveStyles,\n  measures,\n  dates,\n  values,\n  active,\n  theme,\n}: ObjectiveTableProps) => {\n  const labels = getDateLabels(dates);\n\n  return (\n    <HTMLTable>\n      <ObjectiveTableHeader\n        perspectiveId={perspectiveId}\n        labels={labels}\n        style={perspectiveStyle}\n        active={active}\n      />\n      <tbody>\n        {objectives.map(\n          renderObjectiveRow(perspectiveId, values, dates, objectiveStyles, measures, theme)\n        )}\n      </tbody>\n    </HTMLTable>\n  );\n};\n\nexport default ObjectiveTable;\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { Card, H3, Tag } from '@blueprintjs/core';\n\n// Local Relatives\nimport ObjectiveTable from './ObjectiveTable';\n\n// Styles\nimport { objectiveContainer } from './styles';\n\n// Utils\nimport {\n  returnWeight,\n  returnCardStyle,\n  returnHeadingStyle,\n  returnIntent,\n  returnText,\n} from './utils';\n\n// Flow Types\nimport { type Perspective, type Objective, type Theme, type Measure } from '../../model/api/types';\nimport { type StyleOption } from '../../tiles/ScorecardPane/ScorecardRAGView/selectors';\n\nexport type ScorecardCardProps = {\n  perspective: Perspective,\n  perspectiveStyle: StyleOption,\n  objectives: Array<Objective>,\n  objectiveStyles: { [string]: StyleOption },\n  dates: Array<string>,\n  values: { [string]: { [string]: number } },\n  theme: Theme,\n  measures: Array<Measure>,\n  score: number,\n};\n\nconst CardHeading = ({ style, name, weight, active, score }) => {\n  const headingStyle = returnHeadingStyle(style, active);\n  const intent = returnIntent(style, active);\n\n  return (\n    <div>\n      <H3 style={headingStyle}>{`${name} (${returnWeight(weight)}) - Score: ${score}`}</H3>\n      <Tag style={{ marginBottom: '-5px', marginLeft: '10px' }} intent={intent}>\n        {returnText(style)}\n      </Tag>\n    </div>\n  );\n};\n\nexport const ScorecardCard = ({ perspective, perspectiveStyle, ...props }: ScorecardCardProps) => {\n  const active = props.objectives.reduce((acc, objective) => {\n    if (acc) {\n      return true;\n    }\n    const relevantMeasures = props.measures.filter(measure => measure.objectiveId === objective.id);\n    const objectiveActive = relevantMeasures.reduce(\n      (acc, measure) => acc || props.theme.measures.includes(measure.id),\n      false\n    );\n    return objectiveActive;\n  }, false);\n\n  return (\n    <Card style={returnCardStyle(perspectiveStyle, active)}>\n      <CardHeading\n        style={perspectiveStyle}\n        name={perspective.name}\n        weight={perspective.weighting}\n        active={active}\n        score={props.score}\n      />\n      <div style={objectiveContainer}>\n        <ObjectiveTable\n          perspectiveId={perspective.id}\n          perspectiveStyle={perspectiveStyle}\n          active={active}\n          {...props}\n        />\n      </div>\n    </Card>\n  );\n};\n\nexport default ScorecardCard;\n","// @flow\nimport { connect } from 'react-redux';\n\nimport PerspectiveCard from '../../../components/PerspectiveCard';\n\nimport {\n  getPerspectiveObjectives,\n  getCardDates,\n  getObjectiveScores,\n  getPerspectiveStyle,\n  getObjectiveStyles,\n  getPerspectiveScore,\n} from './selectors';\n\nimport { type State } from '../../../reducers/types';\nimport { type Perspective } from '../../../model/api/types';\nimport { getMeasures } from '../../../model/api';\n\nconst mapStateToProps = (state: State, ownProps: { perspective: Perspective }) => ({\n  score: getPerspectiveScore(state, ownProps.perspective.id),\n  perspectiveStyle: getPerspectiveStyle(state, ownProps.perspective.id),\n  objectives: getPerspectiveObjectives(state, ownProps.perspective.id),\n  objectiveStyles: getObjectiveStyles(state, ownProps.perspective.id),\n  measures: getMeasures(state.model),\n  dates: getCardDates(state),\n  values: getObjectiveScores(state, ownProps.perspective.id),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PerspectiveCard);\n","// @flow\nexport const toolbarContainerStyle = (dark: boolean) => ({\n  position: 'absolute',\n  padding: '10px 10px 0 10px',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: 'calc(100% - 10px)',\n  borderBottomStyle: 'solid',\n  borderBottomWidth: '1px',\n  borderBottomColor: '#00000030',\n  backgroundColor: dark ? 'rgb(48, 64, 77)' : 'white',\n});\n\nexport const ragViewContainer = {\n  position: 'relative',\n  top: '50px',\n  padding: '0 5px 10px',\n  height: 'calc(100% - 50px)',\n  width: '100%',\n};\n\nexport const cardRowContainer = {\n  display: 'flex',\n  justifyContent: 'space-around',\n  marginBottom: '10px',\n  minHeight: 'calc((100% - 30px) / 3)',\n  maxHeight: 'calc((100% - 30px) / 3)',\n};\n\nexport const blankCardContainer = {\n  width: '30%',\n  marginRight: '1%',\n};\n","// @flow\nimport { connect } from 'react-redux';\n\n// Action creators & selectors\nimport { setActiveScorecardMonth } from '../../../actions/scorecard';\nimport { getActiveScorecardMonth, getMonthOptions } from './selectors';\n\nimport SwitchMonthGroup from '../../../components/SwitchDataMonth';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\n\nconst mapStateToProps = (state: State) => ({\n  months: getMonthOptions(state),\n  active: getActiveScorecardMonth(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: month => dispatch(setActiveScorecardMonth(month)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SwitchMonthGroup);\n","// @flow\nimport React from 'react';\nimport { type Node } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { Alignment, ButtonGroup, Button, Intent, MenuItem, Position } from '@blueprintjs/core';\nimport { Select } from '@blueprintjs/select';\n\nimport { ROOT_THEME } from '../../config/constants';\n\nimport { type Theme, type Measure } from '../../model/api/types';\nimport { type State } from '../../reducers/types';\n\ntype ThemeSwitcherProps = {\n  themes: Array<Theme>,\n  measures: Array<Measure>,\n  active: Theme,\n  handleChange: Theme => void,\n};\n\ntype ItemProps = {\n  handleClick: MouseEvent => void,\n};\n\nconst renderItem = (active: Theme) => (theme: Theme, { handleClick }: ItemProps): Node => {\n  return (\n    <MenuItem\n      key={`THEME_SELECT_VALUE_${theme.id}`}\n      text={theme.name}\n      active={theme.id === active.id}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport const ThemeSwitcher = ({ themes, measures, active, handleChange }: ThemeSwitcherProps) => {\n  const themeOptions = [ROOT_THEME(measures), ...themes];\n\n  return (\n    <div style={{ display: 'inline-block', marginLeft: '5px' }}>\n      <Select\n        items={themeOptions}\n        itemRenderer={renderItem(active)}\n        onItemSelect={theme => handleChange(theme)}\n        onActiveItemChange={theme => handleChange(theme)}\n        activeItem={active}\n        popoverProps={{ position: Position.RIGHT_BOTTOM }}\n        filterable={false}\n      >\n        <div style={{ display: 'inline-block', marginLeft: '7px', marginRight: '10px' }}>\n          Select Theme:\n        </div>\n        <ButtonGroup style={{ width: '130px' }}>\n          <Button\n            fill\n            small\n            intent={Intent.PRIMARY}\n            rightIcon=\"caret-down\"\n            alignText={Alignment.LEFT}\n            text={active.name}\n          />\n        </ButtonGroup>\n      </Select>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  themes: state.model.programmes[0].themes,\n  measures: state.model.programmes[0].measures,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ThemeSwitcher);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getScorecardValues, getScorecardStyle } from './selectors';\n\n// Local Relatives\nimport SwitchRAGMonth from './SwitchRAGMonth';\n\n// Reusable Components\nimport ThemeSwitcher from '../../../components/ThemeSwitcher';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type Theme } from '../../../model/api/types';\nimport { type StyleOption } from './selectors';\nimport { Tag, Intent } from '@blueprintjs/core';\n\ntype ToolbarProps = {\n  values: Array<number>,\n  style: StyleOption,\n  activeTheme: Theme,\n  setActiveTheme: Theme => void,\n};\n\nfunction returnIntent(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return Intent.DANGER;\n    case 'AMBER':\n      return Intent.WARNING;\n    case 'GREEN':\n      return Intent.SUCCESS;\n    case 'DEFAULT':\n    default:\n      return Intent.NONE;\n  }\n}\n\nfunction returnText(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return 'Red';\n    case 'AMBER':\n      return 'Amber';\n    case 'GREEN':\n      return 'Green';\n    case 'DEFAULT':\n    default:\n      return 'No Data';\n  }\n}\n\nconst ScorecardData = ({ style, values }) => {\n  return (\n    <div style={{ float: 'right', display: 'flex', flexDirection: 'row' }}>\n      <div style={{ marginRight: '10px' }}>Scorecard:</div>\n      {values.map((value, idx) => (\n        <div key={`SCORECARD_RAG_DATUM_${idx}`} style={{ marginRight: '10px' }}>\n          {value}\n        </div>\n      ))}\n      <Tag style={{ marginLeft: '5px' }} intent={returnIntent(style)}>\n        {returnText(style)}\n      </Tag>\n    </div>\n  );\n};\n\nexport const Toolbar = ({ values, activeTheme, setActiveTheme, style }: ToolbarProps) => {\n  return (\n    <div style={{ minHeight: '25px', paddingBottom: '10px' }}>\n      <SwitchRAGMonth />\n      <ThemeSwitcher active={activeTheme} handleChange={setActiveTheme} />\n      <ScorecardData style={style} values={values} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  style: getScorecardStyle(state),\n  values: getScorecardValues(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Toolbar);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// API Functions\nimport { getMeasures } from '../../../model/api';\n\n// Selectors\nimport { getLayout, getCardDates } from './selectors';\n\n// Presentational Components\nimport PerspectiveCard from './PerspectiveCard';\n\n// Styles\nimport {\n  toolbarContainerStyle,\n  ragViewContainer,\n  cardRowContainer,\n  blankCardContainer,\n} from './styles';\n\n// Local Relatives\nimport Toolbar from './Toolbar';\n\n// Constants\nimport { ROOT_THEME } from '../../../config/constants';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type Perspective, type Measure, type Theme } from '../../../model/api/types';\nimport { type RAGViewRow } from './selectors';\n\nexport type ScorecardRAGViewProps = {\n  dark: boolean,\n  measures: Array<Measure>,\n  layout: Array<RAGViewRow>,\n};\n\nconst BlankCard = () => <div style={blankCardContainer} />;\n\nconst CardRow = ({ children }) => <div style={cardRowContainer}>{children}</div>;\n\nconst renderRowCard = (theme: Theme) => (perspective: ?Perspective, idx: number) => {\n  if (perspective) {\n    return (\n      <PerspectiveCard\n        key={`SCORECARD_RAG_VIEW_CARD_${perspective.id}`}\n        perspective={perspective}\n        theme={theme}\n      />\n    );\n  } else {\n    return <BlankCard key={`SCORECARD_RAG_VIEW_BLANK_CARD_${idx}`} />;\n  }\n};\n\nconst ScorecardRAGView = ({ dark, layout, measures }: ScorecardRAGViewProps) => {\n  const [activeTheme, setActiveTheme] = React.useState(ROOT_THEME(measures));\n\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={toolbarContainerStyle(dark)}>\n        <Toolbar activeTheme={activeTheme} setActiveTheme={setActiveTheme} />\n      </div>\n      <div style={ragViewContainer}>\n        {layout.map((row, idx) => (\n          <CardRow key={`SCORECARD_RAG_VIEW_ROW_${idx}`}>\n            {row.map(renderRowCard(activeTheme))}\n          </CardRow>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  layout: getLayout(state),\n  dates: getCardDates(state),\n  measures: getMeasures(state.model),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ScorecardRAGView);\n","// @flow\n// Date time library\nimport moment from 'moment';\n\n// API Functions\nimport * as API from '../../../model/api';\n\n// Constants\nimport { DATE_FORMAT } from '../../../config/constants';\n\n// Flow types\nimport { type State, type MonthOption } from '../../../reducers/types';\nimport { type Objective, type Measure } from '../../../model/api/types';\n\nexport type StyleOption = 'RED' | 'AMBER' | 'GREEN' | 'DEFAULT';\n\nexport type MeasureValues = {\n  [string]: number,\n};\n\nexport function getActiveScorecardMonth(state: State): MonthOption {\n  const { model, scorecard } = state;\n  if (scorecard.activeMonth) {\n    return scorecard.activeMonth;\n  } else {\n    const programmeStart = API.getProgrammeStart(model);\n    return { date: programmeStart.format(DATE_FORMAT), text: programmeStart.format('MMMM YYYY') };\n  }\n}\n\nexport function getMonthOptions(state: State): Array<MonthOption> {\n  const years = state.model._analysisYears;\n\n  // Get programme start\n  const { model } = state;\n  const programmeStart = API.getProgrammeStart(model);\n\n  // Create empty array for months\n  const months = [];\n\n  // For years of analysis, and each month, add too array\n  for (let y = 0; y < years; y++) {\n    for (let m = 0; m < 12; m++) {\n      months.push({\n        date: programmeStart.format(DATE_FORMAT),\n        text: programmeStart.format('MMMM YYYY'),\n      });\n      programmeStart.add(1, 'month');\n    }\n  }\n  return months;\n}\n\nexport function getPerspectiveObjectives(state: State, id: string): Array<Objective> {\n  return API.getObjectives(state.model).filter(objective => objective.perspectiveId === id);\n}\n\nexport function getObjectiveMeasures(state: State, id: string): Array<Measure> {\n  return API.getMeasures(state.model).filter(measure => measure.objectiveId === id);\n}\n\nexport function getMeasureScores(state: State, id: string): MeasureValues {\n  // Get scorecard start moment\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Get active scorecard month\n  const date = getActiveScorecardMonth(state).date;\n  const currentMoment = moment(date, DATE_FORMAT, true);\n\n  // Determine relative month from start\n  const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n  // Retrieve relevant measures (by objective id)\n  const measures = getObjectiveMeasures(state, id);\n\n  // Retrieve measure scores\n  const { measure: measureScores } = state.model.results.scorecard;\n\n  // Define object in which to return scores\n  const scores = {};\n\n  // For each measure add a key with the score\n  measures.forEach(measure => {\n    if (!measureScores[measure.id]) {\n      scores[measure.id] = 0;\n      return;\n    }\n\n    scores[measure.id] = measureScores[measure.id][relativeMonth];\n  });\n\n  // Return scores object\n  return scores;\n}\n\nexport function getMeasureValues(state: State, id: string): MeasureValues {\n  // Retrieve relevant measures (by objective id)\n  const measures = getObjectiveMeasures(state, id);\n\n  // Get active scorecard date\n  const date = getActiveScorecardMonth(state).date;\n\n  // Define new values object\n  const values = {};\n\n  // For each meaure add a key in values\n  measures.forEach(measure => {\n    values[measure.id] = API.getScorecardValue(state.model, date, measure.id);\n  });\n\n  return values;\n}\n\nexport function getMeasureStyles(state: State, id: string): { [string]: StyleOption } {\n  // Get relevant measures (by objective id)\n  const measures = getObjectiveMeasures(state, id);\n\n  // Retrieve measure scores\n  const scores = getMeasureScores(state, id);\n\n  // Create new object to return styles\n  const styles = {};\n\n  // For each measure add a key in styles\n  measures.forEach(measure => {\n    // Determine score for this measure\n    const score = scores[measure.id];\n\n    if (score === 0) {\n      styles[measure.id] = 'DEFAULT';\n    } else if (score < 10 / 3) {\n      styles[measure.id] = 'RED';\n    } else if (score < 20 / 3) {\n      styles[measure.id] = 'AMBER';\n    } else {\n      styles[measure.id] = 'GREEN';\n    }\n  });\n\n  return styles;\n}\n\nexport function getObjectiveScore(state: State, id: string): number {\n  // Retrieve scorecard start moment\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Retrieve objective scores\n  const { objective: objectiveScores } = state.model.results.scorecard;\n\n  // Retrieve current date\n  const date = getActiveScorecardMonth(state).date;\n  const currentMoment = moment(date, DATE_FORMAT, true);\n\n  // Determine relative month\n  const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n  if (!objectiveScores[id]) {\n    return 0;\n  }\n\n  // Return score\n  return objectiveScores[id][relativeMonth];\n}\n\nexport function getObjectiveStyle(state: State, id: string): StyleOption {\n  // Get score\n  const score = getObjectiveScore(state, id);\n\n  // Determine RAG\n  if (score === 0) {\n    return 'DEFAULT';\n  } else if (score < 10 / 3) {\n    return 'RED';\n  } else if (score < 20 / 3) {\n    return 'AMBER';\n  } else {\n    return 'GREEN';\n  }\n}\n\nexport function getPerspectiveScore(state: State, perspectiveId: string): number {\n  // Get scorecard start moment\n  const startMoment = API.getProgrammeScorecardStart(state.model);\n\n  // Retrieve perspective scores\n  const { perspective: perspectiveScores } = state.model.results.scorecard;\n\n  // Get active date\n  const date = getActiveScorecardMonth(state).date;\n  const currentMoment = moment(date, DATE_FORMAT, true);\n\n  // Determine relative month\n  const relativeMonth = currentMoment.diff(startMoment, 'months');\n\n  if (!perspectiveScores[perspectiveId]) {\n    return 0;\n  }\n\n  return perspectiveScores[perspectiveId][relativeMonth];\n}\n\nexport function getPerspectiveStyle(state: State, perspectiveId: string): StyleOption {\n  const score = getPerspectiveScore(state, perspectiveId);\n  if (score === 0) {\n    return 'DEFAULT';\n  } else if (score < 10 / 3) {\n    return 'RED';\n  } else if (score < 20 / 3) {\n    return 'AMBER';\n  } else {\n    return 'GREEN';\n  }\n}\n\nexport function getPerspectiveName(state: State, perspectiveId: string): string {\n  const { name } = API.getPerspectiveById(state.model, perspectiveId);\n  return name;\n}\n","// @flow\nexport const RED = '#C23030';\nexport const AMBER = '#F29D49';\nexport const GREEN = '#29A634';\nexport const DEFAULT = '#BFCCD6';\n\nexport const baseStyle = {\n  width: '48%',\n  marginBottom: '10px',\n};\n\nexport const defaultCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: DEFAULT,\n};\n\nexport const defaultHeading = {\n  display: 'inline-block',\n  color: DEFAULT,\n};\n\nexport const redCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: RED,\n};\n\nexport const redHeading = {\n  display: 'inline-block',\n  color: RED,\n};\n\nexport const amberCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: AMBER,\n};\n\nexport const amberHeading = {\n  display: 'inline-block',\n  color: AMBER,\n};\n\nexport const greenCard = {\n  borderStyle: 'solid',\n  borderWidth: '2px',\n  borderColor: GREEN,\n};\n\nexport const greenHeading = {\n  display: 'inline-block',\n  color: GREEN,\n};\n\nexport const objectiveContainer = {\n  overflow: 'auto',\n  height: 'calc(100% - 20px)',\n};\n\nexport const tableValue = {\n  textAlign: 'center',\n};\n","// @flow\nimport { Intent } from '@blueprintjs/core';\n\nimport {\n  baseStyle,\n  defaultCard,\n  defaultHeading,\n  redCard,\n  redHeading,\n  amberCard,\n  amberHeading,\n  greenCard,\n  greenHeading,\n  RED,\n  AMBER,\n  GREEN,\n  DEFAULT,\n} from './styles';\n\nimport { type StyleOption } from '../../tiles/ScorecardPane/PerspectiveRAGView/selectors';\n\nexport function returnWeight(weighting: number) {\n  const weight = Math.round(weighting * 100);\n  return `${weight}%`;\n}\n\nexport function returnColor(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return RED;\n    case 'AMBER':\n      return AMBER;\n    case 'GREEN':\n      return GREEN;\n    case 'DEFAULT':\n    default:\n      return DEFAULT;\n  }\n}\n\nexport function returnHeadingStyle(style: StyleOption, active: boolean) {\n  if (!active) return { ...defaultHeading, color: 'grey' };\n  switch (style) {\n    case 'RED':\n      return redHeading;\n    case 'AMBER':\n      return amberHeading;\n    case 'GREEN':\n      return greenHeading;\n    case 'DEFAULT':\n    default:\n      return defaultHeading;\n  }\n}\n\nexport function returnCardStyle(style: StyleOption, active: boolean) {\n  if (!active) return baseStyle;\n\n  switch (style) {\n    case 'RED':\n      return {\n        ...baseStyle,\n        ...redCard,\n      };\n    case 'AMBER':\n      return {\n        ...baseStyle,\n        ...amberCard,\n      };\n    case 'GREEN':\n      return {\n        ...baseStyle,\n        ...greenCard,\n      };\n    case 'DEFAULT':\n    default:\n      return {\n        ...baseStyle,\n        ...defaultCard,\n      };\n  }\n}\n\nexport function returnIntent(style: StyleOption, active: boolean) {\n  if (!active) return Intent.NONE;\n\n  switch (style) {\n    case 'RED':\n      return Intent.DANGER;\n    case 'AMBER':\n      return Intent.WARNING;\n    case 'GREEN':\n      return Intent.SUCCESS;\n    case 'DEFAULT':\n    default:\n      return Intent.NONE;\n  }\n}\n\nexport function returnText(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return 'Red';\n    case 'AMBER':\n      return 'Amber';\n    case 'GREEN':\n      return 'Green';\n    case 'DEFAULT':\n    default:\n      return 'No Data';\n  }\n}\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { HTMLTable, Text } from '@blueprintjs/core';\n\n// Utils\nimport { returnColor, returnWeight } from './utils';\n\n// Styles\nimport { tableValue } from './styles';\n\n// Flow Types\nimport { type Measure, type Theme } from '../../model/api/types';\nimport { type StyleOption } from '../../tiles/ScorecardPane/PerspectiveRAGView/selectors';\n\ntype MeasureTableProps = {\n  objectiveId: string,\n  objectiveStyle: StyleOption,\n  measures: Array<Measure>,\n  measureStyles: { [string]: StyleOption },\n  scores: { [string]: number },\n  values: { [string]: number },\n  active: boolean,\n  theme: Theme,\n};\n\nconst MeasureTableHeader = ({ objectiveId, style, active }) => {\n  const color = active ? returnColor(style) : 'grey';\n  return (\n    <thead>\n      <tr>\n        <th style={{ textAlign: 'center', color }}>%</th>\n        <th style={{ color }}>Measure</th>\n        <th style={{ color }}>Unit of Measure</th>\n        <th style={{ textAlign: 'center', color }}>Score</th>\n        <th style={{ textAlign: 'center', color }}>Value</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst renderChildRow = (objectiveId, scores, values, styles, theme) => measure => {\n  const childStyle = styles[measure.id];\n  const color = theme.measures.includes(measure.id) ? returnColor(childStyle) : 'grey';\n  const fontWeight = theme.measures.includes(measure.id) ? 'bold' : 'normal';\n\n  return (\n    <tr key={`RAG_VIEW_${objectiveId}_${measure.id}`}>\n      <td style={{ textAlign: 'center', color, fontWeight }}>{returnWeight(measure.weighting)}</td>\n      <td style={{ color, fontWeight }}>\n        <Text ellipsize>{measure.name}</Text>\n      </td>\n      <td style={{ ...tableValue, color, fontWeight }}>\n        <Text ellipsize>{measure.unitOfMeasure}</Text>\n      </td>\n      <td style={{ ...tableValue, color, fontWeight }}>{scores[measure.id]}</td>\n      <td style={{ ...tableValue, color, fontWeight }}>{values[measure.id]}</td>\n    </tr>\n  );\n};\n\nexport const MeasureTable = ({\n  objectiveId,\n  measures,\n  scores,\n  values,\n  measureStyles,\n  objectiveStyle,\n  active,\n  theme,\n}: MeasureTableProps) => {\n  return (\n    <HTMLTable>\n      <MeasureTableHeader active={active} objectiveId={objectiveId} style={objectiveStyle} />\n      <tbody>\n        {measures.map(renderChildRow(objectiveId, scores, values, measureStyles, theme))}\n      </tbody>\n    </HTMLTable>\n  );\n};\n\nexport default MeasureTable;\n","// @flow\nimport React from 'react';\n\n// Blueprint Components\nimport { Card, H3, Tag } from '@blueprintjs/core';\n\n// Measure Table\nimport MeasureTable from './MeasureTable';\n\n// Utils\nimport {\n  returnHeadingStyle,\n  returnWeight,\n  returnIntent,\n  returnText,\n  returnCardStyle,\n} from './utils';\n\n// Styles\nimport { objectiveContainer } from './styles';\n\n// Flow Types\nimport { type Objective, type Measure, type Theme } from '../../model/api/types';\nimport { type StyleOption } from '../../tiles/ScorecardPane/ScorecardRAGView/selectors';\n\nexport type ObjectiveCardProps = {\n  objective: Objective,\n  objectiveStyle: StyleOption,\n  measures: Array<Measure>,\n  measureStyles: { [string]: StyleOption },\n  scores: { [string]: number },\n  values: { [string]: number },\n  theme: Theme,\n  score: number,\n};\n\nconst CardHeading = ({ active, style, name, weight, score }) => {\n  const headingStyle = returnHeadingStyle(style, active);\n  const intent = returnIntent(style, active);\n  return (\n    <div>\n      <H3 style={headingStyle}>{`${name} (${returnWeight(weight)}) - Score: ${score}`}</H3>\n      <Tag style={{ marginBottom: '-5px', marginLeft: '10px' }} intent={intent}>\n        {returnText(style)}\n      </Tag>\n    </div>\n  );\n};\n\nexport const ObjectiveCard = ({ objective, objectiveStyle, ...props }: ObjectiveCardProps) => {\n  const active = props.measures.reduce(\n    (acc, cur) => acc || props.theme.measures.includes(cur.id),\n    false\n  );\n  return (\n    <Card style={returnCardStyle(objectiveStyle, active)}>\n      <CardHeading\n        active={active}\n        style={objectiveStyle}\n        name={objective.name}\n        weight={objective.weighting}\n        score={props.score}\n      />\n      <div style={objectiveContainer}>\n        <MeasureTable\n          active={active}\n          objectiveId={objective.id}\n          objectiveStyle={objectiveStyle}\n          {...props}\n        />\n      </div>\n    </Card>\n  );\n};\n\nexport default ObjectiveCard;\n","// @flow\nimport { connect } from 'react-redux';\n\n// Presentational Component\nimport ObjectiveCard from '../../../components/ObjectiveCard';\n\n// Selectors\nimport {\n  getObjectiveMeasures,\n  getMeasureScores,\n  getMeasureValues,\n  getObjectiveStyle,\n  getMeasureStyles,\n  getObjectiveScore,\n} from './selectors';\n\n// Flow Types\nimport { type Objective } from '../../../model/api/types';\nimport { type State } from '../../../reducers/types';\n\nconst mapStateToProps = (state: State, ownProps: { objective: Objective }) => ({\n  score: getObjectiveScore(state, ownProps.objective.id),\n  objectiveStyle: getObjectiveStyle(state, ownProps.objective.id),\n  measures: getObjectiveMeasures(state, ownProps.objective.id),\n  measureStyles: getMeasureStyles(state, ownProps.objective.id),\n  scores: getMeasureScores(state, ownProps.objective.id),\n  values: getMeasureValues(state, ownProps.objective.id),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ObjectiveCard);\n","// @flow\nexport const toolbarContainerStyle = (dark: boolean) => ({\n  position: 'absolute',\n  padding: '10px 10px 0 10px',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: 'calc(100% - 10px)',\n  borderBottomStyle: 'solid',\n  borderBottomWidth: '1px',\n  borderBottomColor: '#00000030',\n  backgroundColor: dark ? 'rgb(48, 64, 77)' : 'white',\n});\n\nexport const ragViewContainer = {\n  position: 'relative',\n  top: '50px',\n  padding: '0 5px 10px',\n  height: 'calc(100% - 50px)',\n  width: '100%',\n};\n\nexport const cardRowContainer = {\n  display: 'flex',\n  justifyContent: 'space-around',\n  marginBottom: '10px',\n  minHeight: 'calc((100% - 30px) / 3)',\n  maxHeight: 'calc((100% - 30px) / 3)',\n};\n","// @flow\nimport { connect } from 'react-redux';\n\n// Action creators & selectors\nimport { setActiveScorecardMonth } from '../../../actions/scorecard';\nimport { getActiveScorecardMonth, getMonthOptions } from './selectors';\n\nimport SwitchMonthGroup from '../../../components/SwitchDataMonth';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\n\nconst mapStateToProps = (state: State) => ({\n  months: getMonthOptions(state),\n  active: getActiveScorecardMonth(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: month => dispatch(setActiveScorecardMonth(month)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SwitchMonthGroup);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getPerspectiveScore, getPerspectiveStyle, getPerspectiveName } from './selectors';\n\n// Blueprint Components\nimport { Tag, Intent } from '@blueprintjs/core';\n\n// Reusable Components\nimport ThemeSwitcher from '../../../components/ThemeSwitcher';\n\n// Local Relatives\nimport SwitchRAGMonth from './SwitchRAGMonth';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type Theme } from '../../../model/api/types';\nimport { type StyleOption } from './selectors';\n\ntype ToolbarProps = {\n  score: number,\n  style: StyleOption,\n  name: string,\n  activeTheme: Theme,\n  setActiveTheme: Theme => void,\n};\n\nfunction returnIntent(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return Intent.DANGER;\n    case 'AMBER':\n      return Intent.WARNING;\n    case 'GREEN':\n      return Intent.SUCCESS;\n    case 'DEFAULT':\n    default:\n      return Intent.NONE;\n  }\n}\n\nfunction returnText(style: StyleOption) {\n  switch (style) {\n    case 'RED':\n      return 'Red';\n    case 'AMBER':\n      return 'Amber';\n    case 'GREEN':\n      return 'Green';\n    case 'DEFAULT':\n    default:\n      return 'No Data';\n  }\n}\n\nconst PerspectiveData = ({ style, score, name }) => {\n  return (\n    <div style={{ float: 'right', display: 'flex', flexDirection: 'row' }}>\n      <div style={{ marginRight: '10px' }}>{`${name}:`}</div>\n      <div key={'PERSPECTIVE_RAG_DATUM'} style={{ marginRight: '10px' }}>\n        {score}\n      </div>\n      <Tag style={{ marginLeft: '5px' }} intent={returnIntent(style)}>\n        {returnText(style)}\n      </Tag>\n    </div>\n  );\n};\n\nexport const Toolbar = (props: ToolbarProps) => {\n  return (\n    <div style={{ minHeight: '25px', paddingBottom: '10px' }}>\n      <SwitchRAGMonth />\n      <ThemeSwitcher active={props.activeTheme} handleChange={props.setActiveTheme} />\n      <PerspectiveData {...props} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State, ownProps: { perspectiveId: string }) => ({\n  name: getPerspectiveName(state, ownProps.perspectiveId),\n  score: getPerspectiveScore(state, ownProps.perspectiveId),\n  style: getPerspectiveStyle(state, ownProps.perspectiveId),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Toolbar);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getPerspectiveObjectives } from './selectors';\n\n// Presentational Components\nimport ObjectiveCard from './ObjectiveCard';\n\n// Styles\nimport { toolbarContainerStyle, ragViewContainer, cardRowContainer } from './styles';\n\n// Local Relatives\nimport Toolbar from './Toolbar';\n\n// Flow Types\nimport { type State } from '../../../reducers/types';\nimport { type Objective, type Measure } from '../../../model/api/types';\nimport { ROOT_THEME } from '../../../config/constants';\nimport { getMeasures } from '../../../model/api';\n\nexport type PerspectiveRAGViewProps = {\n  dark: boolean,\n  objectives: Array<Objective>,\n  perspectiveId: string,\n  measures: Array<Measure>,\n};\n\nconst CardRow = ({ children }) => <div style={cardRowContainer}>{children}</div>;\n\nconst renderGrid = (objectives, activeTheme) => {\n  const rows = [];\n  const chunk = 2;\n  let i, j;\n  for (i = 0, j = objectives.length; i < j; i += chunk) {\n    rows.push(objectives.slice(i, i + chunk));\n  }\n\n  return rows.map((row, idx) => {\n    return (\n      <CardRow key={`PERSPECTIVE_RAG_VIEW_ROW_${idx}`}>\n        {row.map(objective => {\n          return (\n            <ObjectiveCard\n              key={`PERSPECTIVE_RAG_VIEW_${objective.id}`}\n              objective={objective}\n              theme={activeTheme}\n            />\n          );\n        })}\n      </CardRow>\n    );\n  });\n};\n\nconst RAGView = ({ dark, objectives, perspectiveId, measures }: PerspectiveRAGViewProps) => {\n  const [activeTheme, setActiveTheme] = React.useState(ROOT_THEME(measures));\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={toolbarContainerStyle(dark)}>\n        <Toolbar\n          perspectiveId={perspectiveId}\n          activeTheme={activeTheme}\n          setActiveTheme={setActiveTheme}\n        />\n      </div>\n      <div style={ragViewContainer}>{renderGrid(objectives, activeTheme)}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State, ownProps: { perspectiveId: string }) => ({\n  objectives: getPerspectiveObjectives(state, ownProps.perspectiveId),\n  measures: getMeasures(state.model),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(RAGView);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { getDisplay, getSelectedId } from './selectors';\n\nimport DataInput from './DataInput';\n\nimport { type State } from '../../reducers/types';\nimport { type DisplayOption } from './selectors';\n\nimport StrategicLevelScorecard from './StrategicLevelScorecard';\nimport PerspectiveScorecard from './PerspectiveScorecard';\nimport ObjectiveScorecard from './ObjectiveScorecard';\nimport MeasureScorecard from './MeasureScorecard';\nimport ScorecardRAGView from './ScorecardRAGView';\nimport PerspectiveRAGView from './PerspectiveRAGView';\n\nconst renderContent = (display: DisplayOption, selectedId: ?string) => {\n  switch (display) {\n    case 'blank':\n      return <div />;\n    case 'scorecard-rag':\n      return <ScorecardRAGView />;\n    case 'perspective-rag':\n      return <PerspectiveRAGView perspectiveId={selectedId} />;\n    case 'data':\n      return <DataInput />;\n    case 'strategicLevel':\n      return <StrategicLevelScorecard />;\n    case 'perspective':\n      if (typeof selectedId !== 'string') {\n        throw new Error('Perspective was selected but no id was provided when rendering graph');\n      }\n      return <PerspectiveScorecard perspectiveId={selectedId} />;\n    case 'objective':\n      if (typeof selectedId !== 'string') {\n        throw new Error('Objective was selected but no id was provided when rendering graph');\n      }\n      return <ObjectiveScorecard objectiveId={selectedId} />;\n    case 'measure':\n      if (typeof selectedId !== 'string') {\n        throw new Error('Measure was selected but no id was provided when rendering graph');\n      }\n      return <MeasureScorecard measureId={selectedId} />;\n    default:\n      throw new Error('Unrecognised display type when rendering scorecard content');\n  }\n};\n\nconst ScorecardPane = ({\n  display,\n  selectedId,\n}: {\n  display: DisplayOption,\n  selectedId: ?string,\n}) => {\n  return <div style={{ width: '100%', height: '100%' }}>{renderContent(display, selectedId)}</div>;\n};\n\nconst mapStateToProps = (state: State) => ({\n  display: getDisplay(state),\n  selectedId: getSelectedId(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ScorecardPane);\n"],"sourceRoot":""}