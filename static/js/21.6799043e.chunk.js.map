{"version":3,"sources":["components/Explorer/index.js","components/Explorer/Explorer.js","tiles/ValueExplorer/selectors.js","tiles/ValueExplorer/ValueExplorer.js","tiles/ValueExplorer/index.js"],"names":["Explorer","props","react_default","a","createElement","tree","contents","nodes","onNodeClick","handleNodeClick","onNodeCollapse","handleNodeCollapse","onNodeExpand","handleNodeExpand","getExplorerNodes","state","children","_state$editor$explore","editor","explorer","selected","expanded","_CONSTANTS$MODEL_TYPE","CONSTANTS","modelKey","key","modelIcon","icon","model","_CONSTANTS$PROGRAMME_","programmeKey","programmeIcon","programmeChildren","programme","getProgramme","createAtomicInstances","instances","parentType","parentIcon","map","instance","label","reference","concat","getBenefitById","benefitId","name","id","type","isSelected","programmeChildNodes","Object","toConsumableArray","filter","utils","isExpanded","childNodes","createProgrammeAtomicChildren","childType","childId","childName","childIcon","createProgrammeCompoundChildren","modelChildren","connect","dispatch","node","nodePath","setSelectedElement","setNodeExpanded","ValueExplorer"],"mappings":"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","file":"static/js/21.6799043e.chunk.js","sourcesContent":["// @flow\nimport Explorer from './Explorer';\nexport default Explorer;\n","// @flow\nimport React from 'react';\nimport type { Node } from 'react';\n\nimport { Tree } from '@blueprintjs/core';\n\nimport type { ExplorerProps } from './types';\n\nexport default (props: ExplorerProps): Node => (\n  <Tree\n    contents={props.nodes}\n    onNodeClick={props.handleNodeClick}\n    onNodeCollapse={props.handleNodeCollapse}\n    onNodeExpand={props.handleNodeExpand}\n  />\n);\n","// @flow\nimport * as CONSTANTS from '../../config/constants';\nimport * as utils from '../../utils/utils';\nimport { getBenefitById, getProgramme } from '../../model/api';\n\nimport type { State, ExplorerNode } from '../../reducers/types';\nimport type { ModelElement } from '../../model/api/types';\nimport type { TypeObject } from '../../utils/utils';\n\n/**\n * Creates data structure for the UI from the model architecture in constants. Supports up to three\n * levels of depth.\n * @param  {object} state state tree\n * @return {array}        nodes\n */\nexport function getExplorerNodes(state: State): Array<ExplorerNode> {\n  // Extract selected element and expanded elements from redux store\n  const { selected, expanded } = state.editor.explorer;\n\n  // Extract model details from the model type constant\n  const { key: modelKey, icon: modelIcon } = CONSTANTS.MODEL_TYPE;\n\n  // Extract the model object from redux store\n  const model = state[modelKey];\n\n  // Extract the programme details from the programme type constant\n  const {\n    key: programmeKey,\n    icon: programmeIcon,\n    children: programmeChildren,\n  } = CONSTANTS.PROGRAMME_TYPE;\n\n  // Extract the programmes from redux store\n  const programme = getProgramme(model);\n\n  // Define function for creating atomic instances (i.e. individual benefit, cost, etc.)\n  const createAtomicInstances = (\n    instances: Array<ModelElement>,\n    parentType: TypeObject,\n    parentIcon: string\n  ): Array<ExplorerNode> => {\n    return instances.map((instance: Object) => {\n      let label: string;\n      if (instance.reference) {\n        label = `${instance.reference} (${getBenefitById(model, instance.benefitId).name})`;\n      } else if (instance.name) {\n        label = instance.name;\n      } else {\n        label = 'Unknown';\n      }\n      return {\n        id: instance.id,\n        label,\n        type: parentType,\n        isSelected: selected && selected.id === instance.id,\n        icon: parentIcon,\n      };\n    });\n  };\n\n  // Define function for creating atomic types (i.e. Benefits, Costs, etc.)\n  const createProgrammeAtomicChildren = (children: Array<ModelElement>) => {\n    const atomicTypes = children.filter(\n      type => utils.isAtomicType(type.id) || utils.isStrategyMapType(type.id)\n    );\n    return atomicTypes.map((type: Object) => {\n      const { id, name, key, icon } = type;\n      const instances = state[modelKey][programmeKey][0][key];\n      return {\n        id: id,\n        label: name,\n        type: type,\n        isExpanded: expanded[id],\n        isSelected: selected && selected.id === id,\n        icon: icon,\n        childNodes: createAtomicInstances(instances, type, icon),\n      };\n    });\n  };\n\n  // Define function for creating atomic types (i.e. Benefits, Costs, etc.)\n  const createProgrammeCompoundChildren = children => {\n    const compoundTypes = children.filter(childType => utils.isCompoundType(childType.id));\n    return compoundTypes.map(childType => {\n      const { id: childId, name: childName, icon: childIcon } = childType;\n      return {\n        id: childId,\n        label: childName,\n        type: childType,\n        isExpanded: expanded[childId],\n        isSelected: selected && selected.id === childId,\n        icon: childIcon,\n      };\n    });\n  };\n\n  // Define function for creating programme children (atomic, compound and strategy types)\n  const createProgrammeChildren = children => [\n    ...createProgrammeAtomicChildren(children),\n    ...createProgrammeCompoundChildren(children),\n  ];\n\n  const programmeChildNodes = createProgrammeChildren(programmeChildren);\n  const modelChildren = [\n    {\n      id: programme.id,\n      label: programme.name,\n      type: CONSTANTS.PROGRAMME_TYPE,\n      isExpanded: expanded[programme.id],\n      isSelected: selected && selected.id === programme.id,\n      icon: programmeIcon,\n      childNodes: programmeChildNodes,\n    },\n  ];\n\n  const modelNode = {\n    id: model.id,\n    label: model.name,\n    type: CONSTANTS.MODEL_TYPE,\n    isExpanded: expanded[model.id],\n    isSelected: selected && selected.id === model.id,\n    icon: modelIcon,\n    childNodes: modelChildren,\n  };\n\n  return [modelNode];\n}\n","// @flow\nimport { connect } from 'react-redux';\n\n// Selectors\nimport { getExplorerNodes } from './selectors';\n\n// Actions\nimport { setSelectedElement, setNodeExpanded } from '../../actions/editor';\n\n// Reusable Components\nimport Explorer from '../../components/Explorer';\n\n// Redux state => props\nconst mapStateToProps = state => ({\n  nodes: getExplorerNodes(state),\n});\n\n// Redux dispatch => props\nconst mapDispatchToProps = dispatch => ({\n  handleNodeClick: (node, nodePath) => {\n    node.isSelected = true;\n    dispatch(setSelectedElement(node, nodePath));\n  },\n  handleNodeCollapse: node => {\n    node.isExpanded = false;\n    dispatch(setNodeExpanded(node.id, false));\n  },\n  handleNodeExpand: node => {\n    node.isExpanded = true;\n    dispatch(setNodeExpanded(node.id, true));\n  },\n});\n\n// Inject props\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Explorer);\n","// @flow\nimport ValueExplorer from './ValueExplorer';\nexport default ValueExplorer;\n"],"sourceRoot":""}