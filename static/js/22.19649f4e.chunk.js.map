{"version":3,"sources":["components/ScorecardGraph/styles.js","components/ScorecardGraph/index.js","views/Staging.js"],"names":["chartMargin","top","right","left","bottom","colors","chroma","scale","ScorecardGraph","_ref","threshold","data","display","width","height","syncId","goodThreshold","badThreshold","react_default","a","createElement","es6","margin","dataKey","strokeDasharray","type","name","strokeWidth","stroke","dot","renderBadThresholdLine","map","_ref2","idx","i","n","color","key","concat","renderScorecardLine","length","hex","rootData","date","root","perspectiveData","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","Array","keys","month","paddedMonth","year","Math","floor","datum","random","financial","customer","process","resource","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","style","flexDirection","alignItems","justifyContent","padding","_components_ScorecardGraph__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"0IACaA,EAAc,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IC6C7DC,EAASC,IAAOC,MDxCI,CAAC,UAAW,YC8GvBC,IA5Be,SAAAC,GAQH,IA9CKC,EAuC9BC,EAOyBF,EAPzBE,KACAC,EAMyBH,EANzBG,QACAC,EAKyBJ,EALzBI,MACAC,EAIyBL,EAJzBK,OACAC,EAGyBN,EAHzBM,OACAC,EAEyBP,EAFzBO,cACAC,EACyBR,EADzBQ,aAEA,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAqBR,MAAOA,EAAOC,OAAQA,GACzCI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWV,KAAMA,EAAMI,OAAQA,EAAQO,OAAQtB,GAE7CkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOE,QAAQ,SACfL,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeG,gBAAgB,QAC/BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAE0B,kBAAlBL,IAxDgBN,EAwDsCM,EAtDlEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,KAAK,WACLC,KAAK,iBACLH,QAAS,kBAAMb,GACfiB,YDtD8B,ECuD9BC,ODrD4B,UCsD5BC,KAAK,KAiDsB,kBAAjBZ,GA3Ce,SAAAP,GAAS,OACtCQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,KAAK,WACLE,YDjEgC,ECkEhCC,OD/D6B,UCgE7BF,KAAK,gBACLH,QAAS,kBAAMb,GACfmB,KAAK,IAoCoCC,CAAuBb,GAE3DL,EAAQmB,IAAI,SAAAC,EAAoBC,GAApB,IA9DHC,EAAGC,EA8DA,OAjCO,SAACZ,EAASG,EAAMU,GAAhB,OAC1BlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEgB,IAAG,kBAAAC,OAAoBf,GACvBE,KAAK,WACLE,YD7EgC,EC8EhCD,KAAMA,EACNH,QAASA,EACTK,OAAQQ,IA2BFG,CADWP,EAAGT,QAAHS,EAAYN,MA9DfQ,EA+DoCD,EA/DjCE,EA+DsCvB,EAAQ4B,OA/DxCnC,GAAQ6B,EAAI,IAAMC,EAAI,IAAIM,2FC5C/CC,EAAW,CACf,CACEC,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,IAER,CACED,KAAM,UACNC,KAAM,KAKJC,EADKC,OAAAC,EAAA,EAAAD,CAAOE,MAAM,IAAIC,QACElB,IAAI,SAACG,EAAGD,GACpC,IAAMiB,EAAShB,EAAI,GAAM,EACnBiB,EAAcD,EAAQ,GAAR,IAAAZ,OAAiBY,GAAjB,GAAAZ,OAA8BY,GAC5CE,EAAI,GAAAd,OAAM,KAAOe,KAAKC,MAAMpB,EAAI,KAEhCqB,EAAQ,kBAAkB,GAAXtB,EAAM,GAAiC,IAAvBoB,KAAKG,SAAW,KACrD,MAAO,CACLb,KAHQ,GAAAL,OAAMa,EAAN,KAAAb,OAAqBc,GAI7BK,UAAW,IAAMF,IACjBG,SAAU,GAAMH,IAChBI,QAAS,KAAOJ,IAChBK,SAAUL,OAICM,EAAA,0BACbC,EAAA3C,EAAAC,cAAA,OACE2C,MAAO,CACLnD,QAAS,OACToD,cAAe,SACfnD,MAAO,OACPC,OAAQ,OACRmD,WAAY,SACZC,eAAgB,SAChBC,QAAS,SAGXL,EAAA3C,EAAAC,cAACgD,EAAA,EAAD,CACEzD,KAAM+B,EACN9B,QAAS,CAAC,CAAEW,QAAS,OAAQG,KAAM,oBACnCb,MAAM,OACNC,OAAO,MACPE,cAAe,GACfC,aAAc,GACdF,OAAO,OAET+C,EAAA3C,EAAAC,cAACgD,EAAA,EAAD,CACEzD,KAAMkC,EACNjC,QAAS,CACP,CAAEW,QAAS,YAAaG,KAAM,aAC9B,CAAEH,QAAS,WAAYG,KAAM,YAC7B,CAAEH,QAAS,WAAYG,KAAM,YAC7B,CAAEH,QAAS,UAAWG,KAAM,YAE9Bb,MAAM,OACNC,OAAO,MACPE,cAAe,GACfC,aAAc,GACdF,OAAO","file":"static/js/22.19649f4e.chunk.js","sourcesContent":["// @flow\nexport const chartMargin = { top: 10, right: 10, left: 10, bottom: 10 };\nexport const thresholdStrokeWidth = 3;\nexport const scorecardStrokeWidth = 3;\nexport const goodThresholdColor = '#0f9960';\nexport const badThresholdColor = '#db3737';\nexport const colorRange = ['#aeecae', '#05587c'];\n","// @flow\nimport React from 'react';\n\n// Color library\nimport chroma from 'chroma-js';\n\n// Chart components\nimport {\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Line,\n} from 'recharts';\n\n// Styles\nimport {\n  chartMargin,\n  thresholdStrokeWidth,\n  scorecardStrokeWidth,\n  goodThresholdColor,\n  badThresholdColor,\n  colorRange,\n} from './styles';\n\n// Flow types\ntype ScorecardDatum = {\n  date: string,\n  [string]: number,\n};\n\ntype ScorecardData = Array<ScorecardDatum>;\n\ntype ScorecardGraphProps = {\n  data: ScorecardData,\n  display: Array<{ dataKey: string, name: string }>,\n  width: string,\n  height: string,\n  syncId?: string,\n  goodThreshold?: number,\n  badThreshold?: number,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\n// Good threshold line component\nconst renderGoodThresholdLine = threshold => {\n  return (\n    <Line\n      type=\"monotone\"\n      name=\"Good Threshold\"\n      dataKey={() => threshold}\n      strokeWidth={thresholdStrokeWidth}\n      stroke={goodThresholdColor}\n      dot={false}\n    />\n  );\n};\n\n// Bad threshold line component\nconst renderBadThresholdLine = threshold => (\n  <Line\n    type=\"monotone\"\n    strokeWidth={thresholdStrokeWidth}\n    stroke={badThresholdColor}\n    name=\"Bad Threshold\"\n    dataKey={() => threshold}\n    dot={false}\n  />\n);\n\n// Scorecard line component\nconst renderScorecardLine = (dataKey, name, color) => (\n  <Line\n    key={`SCORECARD_LINE_${dataKey}`}\n    type=\"monotone\"\n    strokeWidth={scorecardStrokeWidth}\n    name={name}\n    dataKey={dataKey}\n    stroke={color}\n  />\n);\n\n// Graph component\nexport const ScorecardGraph = ({\n  data,\n  display,\n  width,\n  height,\n  syncId,\n  goodThreshold,\n  badThreshold,\n}: ScorecardGraphProps) => {\n  return (\n    <ResponsiveContainer width={width} height={height}>\n      <LineChart data={data} syncId={syncId} margin={chartMargin}>\n        {/* Axes etc. */}\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        {/* Threshold lines */}\n        {typeof goodThreshold === 'number' && renderGoodThresholdLine(goodThreshold)}\n        {typeof badThreshold === 'number' && renderBadThresholdLine(badThreshold)}\n        {/* Scorecard lines */}\n        {display.map(({ dataKey, name }, idx) =>\n          renderScorecardLine(dataKey, name, getColor(idx, display.length)))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ScorecardGraph;\n","import React from 'react';\nimport ScorecardGraph from '../components/ScorecardGraph';\n\nconst rootData = [\n  {\n    date: '01-2019',\n    root: 10,\n  },\n  {\n    date: '02-2019',\n    root: 10,\n  },\n  {\n    date: '03-2019',\n    root: 11,\n  },\n  {\n    date: '04-2019',\n    root: 12,\n  },\n  {\n    date: '05-2019',\n    root: 11,\n  },\n  {\n    date: '06-2019',\n    root: 11,\n  },\n  {\n    date: '07-2019',\n    root: 14,\n  },\n  {\n    date: '08-2019',\n    root: 16,\n  },\n  {\n    date: '09-2019',\n    root: 17,\n  },\n  {\n    date: '10-2019',\n    root: 18,\n  },\n  {\n    date: '11-2019',\n    root: 17,\n  },\n  {\n    date: '12-2019',\n    root: 18,\n  },\n  {\n    date: '01-2020',\n    root: 20,\n  },\n  {\n    date: '02-2020',\n    root: 20,\n  },\n  {\n    date: '03-2020',\n    root: 21,\n  },\n  {\n    date: '04-2020',\n    root: 22,\n  },\n  {\n    date: '05-2020',\n    root: 21,\n  },\n  {\n    date: '06-2020',\n    root: 21,\n  },\n  {\n    date: '07-2020',\n    root: 24,\n  },\n  {\n    date: '08-2020',\n    root: 26,\n  },\n  {\n    date: '09-2020',\n    root: 27,\n  },\n  {\n    date: '10-2020',\n    root: 28,\n  },\n  {\n    date: '11-2020',\n    root: 27,\n  },\n  {\n    date: '12-2020',\n    root: 28,\n  },\n  {\n    date: '01-2021',\n    root: 30,\n  },\n  {\n    date: '02-2021',\n    root: 30,\n  },\n  {\n    date: '03-2021',\n    root: 31,\n  },\n  {\n    date: '04-2021',\n    root: 35,\n  },\n  {\n    date: '05-2021',\n    root: 37,\n  },\n  {\n    date: '06-2021',\n    root: 36,\n  },\n  {\n    date: '07-2021',\n    root: 13,\n  },\n  {\n    date: '08-2021',\n    root: 30,\n  },\n  {\n    date: '09-2021',\n    root: 47,\n  },\n  {\n    date: '10-2021',\n    root: 49,\n  },\n  {\n    date: '11-2021',\n    root: 50,\n  },\n  {\n    date: '12-2021',\n    root: 53,\n  },\n  {\n    date: '01-2022',\n    root: 53,\n  },\n  {\n    date: '02-2022',\n    root: 52,\n  },\n  {\n    date: '03-2022',\n    root: 51,\n  },\n  {\n    date: '04-2022',\n    root: 54,\n  },\n  {\n    date: '05-2022',\n    root: 54,\n  },\n  {\n    date: '06-2022',\n    root: 54,\n  },\n  {\n    date: '07-2022',\n    root: 53,\n  },\n  {\n    date: '08-2022',\n    root: 53,\n  },\n  {\n    date: '09-2022',\n    root: 52,\n  },\n  {\n    date: '10-2022',\n    root: 53,\n  },\n  {\n    date: '11-2022',\n    root: 53,\n  },\n  {\n    date: '12-2022',\n    root: 53,\n  },\n];\n\nconst years = [...Array(48).keys()];\nconst perspectiveData = years.map((i, idx) => {\n  const month = (i % 12) + 1;\n  const paddedMonth = month < 10 ? `0${month}` : `${month}`;\n  const year = `${2019 + Math.floor(i / 12)}`;\n  const name = `${paddedMonth}-${year}`;\n  const datum = () => (idx + 1) * 2 + (Math.random() - 0.5) * 10;\n  return {\n    date: name,\n    financial: 1.1 * datum(),\n    customer: 0.8 * datum(),\n    process: 1.21 * datum(),\n    resource: datum(),\n  };\n});\n\nexport default () => (\n  <div\n    style={{\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '50px',\n    }}\n  >\n    <ScorecardGraph\n      data={rootData}\n      display={[{ dataKey: 'root', name: 'Strategic Level' }]}\n      width=\"100%\"\n      height=\"45%\"\n      goodThreshold={50}\n      badThreshold={25}\n      syncId=\"bs\"\n    />\n    <ScorecardGraph\n      data={perspectiveData}\n      display={[\n        { dataKey: 'financial', name: 'Financial' },\n        { dataKey: 'customer', name: 'Customer' },\n        { dataKey: 'resource', name: 'Resource' },\n        { dataKey: 'process', name: 'Process' },\n      ]}\n      width=\"100%\"\n      height=\"45%\"\n      goodThreshold={50}\n      badThreshold={25}\n      syncId=\"bs\"\n    />\n  </div>\n);\n"],"sourceRoot":""}