{"version":3,"sources":["views/AnalysisView/AnalysisView.js","views/AnalysisView/index.js"],"names":["GraphSelector","lazy","__webpack_require__","e","then","bind","AnalysisPane","Promise","all","GanttChart","Container","_ref","children","dark","suspenseText","react_default","a","createElement","style","padding","backgroundColor","overflow","display","flexDirection","width","height","react","fallback","Loading","text","withTitle","title","_ref2","Component","AnalysisView_Container","html","paddingBottom","renderTile","id","GRAPH_SELECTOR_TITLE","RESULT_TITLE","AnalysisView","_ref3","lib","className","resize","minimumPaneSizePercentage","initialValue","direction","first","second","splitPercentage"],"mappings":"iKAeMA,EAAgBC,eAAK,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAC3BC,EAAeL,eAAK,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAC1BI,EAAaR,eAAK,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAajBK,EAAY,SAAAC,GAAsD,IAAnDC,EAAmDD,EAAnDC,SAAUC,EAAyCF,EAAzCE,KAAMC,EAAmCH,EAAnCG,aAC1C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,MAAOC,gBAAiBP,EAAO,UAAY,QAASQ,SAAU,OAAQC,QAAS,OAAQC,cAAe,SAAUC,MAAO,OAAQC,OAAQ,SAC5JV,EAAAC,EAAAC,cAACS,EAAA,SAAD,CAAUC,SAAUZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,KAAMf,KAAmBF,KAMtDkB,EAAY,SAACC,EAADC,GAAA,IAAUnB,EAAVmB,EAAUnB,KAAMC,EAAhBkB,EAAgBlB,aAAhB,OAAmC,SAAAmB,GAAS,OAC5DlB,EAAAC,EAAAC,cAACiB,EAAD,CAAWrB,KAAMA,EAAMC,aAAcA,GACnCC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAIjB,MAAO,CAAEC,QAAS,MAAOiB,cAAe,IAAML,GAClDhB,EAAAC,EAAAC,cAACgB,EAAD,SAIEI,EAAa,SAACxB,GAAD,OAAmB,SAACyB,GACrC,OAAQA,GACN,IAAK,WACH,OAAOR,EAAUS,KAAsB,CAAE1B,OAAMC,aAAc,0BAAtDgB,CACL9B,GAEJ,IAAK,UACH,OACEe,EAAAC,EAAAC,cAACiB,EAAD,CAAWrB,KAAMA,EAAMC,aAAa,uBAClCC,EAAAC,EAAAC,cAACR,EAAD,OAGN,IAAK,SACH,OAAOqB,EAAUU,KAAc,CAC7B3B,OACAC,aAAc,yBAFTgB,CAGJxB,GACL,QACE,OAAOS,EAAAC,EAAAC,cAAA,eA2BEwB,EAvBM,SAAAC,GAAiC,IAA9B7B,EAA8B6B,EAA9B7B,KACtB,OACEE,EAAAC,EAAAC,cAAC0B,EAAA,OAAD,CACEC,UAAW/B,EAAO,kCAAoC,yBACtDwB,WAAYA,EAAWxB,GACvBgC,OAAQ,CACNC,0BAA2B,IAE7BC,aAAc,CACZC,UAAW,MACXC,MAAO,WACPC,OAAQ,CACNF,UAAW,SACXC,MAAO,UACPC,OAAQ,SACRC,gBAAiB,IAEnBA,gBAAiB,OCpFVV","file":"static/js/24.416982de.chunk.js","sourcesContent":["// @flow\nimport React, { Suspense, lazy } from 'react';\nimport { type Node } from 'react';\n\n// Blueprint components\nimport { H5 } from '@blueprintjs/core';\nimport { Mosaic } from 'react-mosaic-component';\nimport 'react-mosaic-component/react-mosaic-component.css';\n\n// Configuration Constants\nimport { GRAPH_SELECTOR_TITLE, RESULT_TITLE } from '../../config/constants';\n\nimport Loading from '../../components/Loading';\n\n// Local Relatives\nconst GraphSelector = lazy(() => import('../../tiles/GraphSelector'));\nconst AnalysisPane = lazy(() => import('../../tiles/AnalysisPane'));\nconst GanttChart = lazy(() => import('../../tiles/GanttChart'));\n\ntype ContainerProps = {\n  children: Node,\n  dark: boolean,\n  suspenseText: string,\n};\n\ntype AnalysisViewProps = {\n  dark: boolean,\n};\n\n// Standard local container component\nexport const Container = ({ children, dark, suspenseText }: ContainerProps) => {\n  return (\n    <div style={{ padding: '5px', backgroundColor: dark ? '#30404d' : 'white', overflow: 'auto', display: 'flex', flexDirection: 'column', width: '100%', height: '100%' }}>\n      <Suspense fallback={<Loading text={suspenseText} />}>{children}</Suspense>\n    </div>\n  );\n};\n\n// Higher order function to wrap in local standard title and container\nconst withTitle = (title, { dark, suspenseText }) => Component => (\n  <Container dark={dark} suspenseText={suspenseText}>\n    <H5 style={{ padding: '7px', paddingBottom: 0 }}>{title}</H5>\n    <Component />\n  </Container>\n);\n\nconst renderTile = (dark: boolean) => (id: string) => {\n  switch (id) {\n    case 'selector':\n      return withTitle(GRAPH_SELECTOR_TITLE, { dark, suspenseText: 'Loading Graph Selector' })(\n        GraphSelector\n      );\n    case 'project':\n      return (\n        <Container dark={dark} suspenseText=\"Loading Gantt Chart\">\n          <GanttChart />\n        </Container>\n      );\n    case 'result':\n      return withTitle(RESULT_TITLE, {\n        dark,\n        suspenseText: 'Loading Analysis Pane',\n      })(AnalysisPane);\n    default:\n      return <div />;\n  }\n};\n\nconst AnalysisView = ({ dark }: AnalysisViewProps) => {\n  return (\n    <Mosaic\n      className={dark ? 'mosaic-blueprint-theme bp3-dark' : 'mosaic-blueprint-theme'}\n      renderTile={renderTile(dark)}\n      resize={{\n        minimumPaneSizePercentage: 10,\n      }}\n      initialValue={{\n        direction: 'row',\n        first: 'selector',\n        second: {\n          direction: 'column',\n          first: 'project',\n          second: 'result',\n          splitPercentage: 40,\n        },\n        splitPercentage: 20,\n      }}\n    />\n  );\n};\n\nexport default AnalysisView;\n","import AnalysisView from './AnalysisView';\nexport default AnalysisView;\n"],"sourceRoot":""}