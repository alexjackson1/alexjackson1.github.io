{"version":3,"sources":["views/BalancedScorecard/BalancedScorecard.js","views/BalancedScorecard/index.js"],"names":["StrategyMap","lazy","__webpack_require__","e","then","bind","ScorecardPane","Promise","all","Container","_ref","children","dark","suspenseText","react_default","a","createElement","style","padding","backgroundColor","overflow","react","fallback","Loading","text","concat","withContainer","_ref2","props","Object","objectWithoutProperties","Component","BalancedScorecard_Container","renderTile","id","BalancedScorecard","_ref3","lib","className","resize","minimumPaneSizePercentage","initialValue","direction","first","second","splitPercentage"],"mappings":"yJAcMA,EAAcC,eAAK,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aACzBC,EAAgBL,eAAK,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aAcpBI,EAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,KAAMC,EAAnBH,EAAmBG,aAAnB,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,MAAOC,gBAAiBP,EAAO,UAAY,QAASQ,SAAU,SACnFN,EAAAC,EAAAC,cAACK,EAAA,SAAD,CAAUC,SAAUR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASC,KAAI,GAAAC,OAAKZ,MAAqBF,KAKzDe,EAAgB,SAAAC,GAAA,IAAGf,EAAHe,EAAGf,KAAMC,EAATc,EAASd,aAAiBe,EAA1BC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,gCAAsC,SAAAI,GAAS,OACnEjB,EAAAC,EAAAC,cAACgB,EAAD,CAAWpB,KAAMA,EAAMC,aAAcA,GACnCC,EAAAC,EAAAC,cAACe,EAAcH,MAKbK,EAAa,SAACrB,GAAD,OAAmB,SAACsB,GACrC,OAAQA,GACN,IAAK,WACH,OAAOR,EAAc,CACnBd,OACAC,aAAc,wBAFTa,CAGJ1B,GACL,IAAK,YACH,OAAO0B,EAAc,CACnBd,OACAC,aAAc,8BAFTa,CAGJpB,GACL,QACE,OAAOQ,EAAAC,EAAAC,cAAA,eAqBEmB,EAhBW,SAAAC,GAAA,IAAGxB,EAAHwB,EAAGxB,KAAH,OACxBE,EAAAC,EAAAC,cAACqB,EAAA,OAAD,CACEC,UAAW1B,EAAO,kCAAoC,yBACtDqB,WAAYA,EAAWrB,GACvB2B,OAAQ,CACNC,0BAA2B,IAE7BC,aAAc,CACZC,UAAW,MACXC,MAAO,WACPC,OAAQ,YACRC,gBAAiB,OCtERV","file":"static/js/25.e195284a.chunk.js","sourcesContent":["// @flow\nimport React, { Suspense, lazy } from 'react';\nimport type { Node } from 'react';\n\n// Blueprint components\nimport { Mosaic } from 'react-mosaic-component';\n\n// Moasic CSS\nimport 'react-mosaic-component/react-mosaic-component.css';\n\n// Reusable Components\nimport Loading from '../../components/Loading';\n\n// Lazily import mosaic components\nconst StrategyMap = lazy(() => import('../../tiles/StrategyMap'));\nconst ScorecardPane = lazy(() => import('../../tiles/ScorecardPane'));\n\n// Flow Types\ntype ContainerProps = {\n  children: Node,\n  dark: boolean,\n  suspenseText: string,\n};\n\nexport type BalancedScorecardProps = {\n  dark: boolean,\n};\n\n// Standard local container component\nexport const Container = ({ children, dark, suspenseText }: ContainerProps): Node => (\n  <div style={{ padding: '5px', backgroundColor: dark ? '#30404d' : 'white', overflow: 'auto' }}>\n    <Suspense fallback={<Loading text={`${suspenseText}`} />}>{children}</Suspense>\n  </div>\n);\n\n// Higher order function to wrap in local standard container\nconst withContainer = ({ dark, suspenseText, ...props }) => Component => (\n  <Container dark={dark} suspenseText={suspenseText}>\n    <Component {...props} />\n  </Container>\n);\n\n// Returns a function to be passed to mosaic component\nconst renderTile = (dark: boolean) => (id: string): Node => {\n  switch (id) {\n    case 'strategy':\n      return withContainer({\n        dark,\n        suspenseText: 'Loading Strategy Map',\n      })(StrategyMap);\n    case 'scorecard':\n      return withContainer({\n        dark,\n        suspenseText: 'Loading Balanced Scorecard',\n      })(ScorecardPane);\n    default:\n      return <div />;\n  }\n};\n\n// Model Editor Component Class\nconst BalancedScorecard = ({ dark }: BalancedScorecardProps): Node => (\n  <Mosaic\n    className={dark ? 'mosaic-blueprint-theme bp3-dark' : 'mosaic-blueprint-theme'}\n    renderTile={renderTile(dark)}\n    resize={{\n      minimumPaneSizePercentage: 10,\n    }}\n    initialValue={{\n      direction: 'row',\n      first: 'strategy',\n      second: 'scorecard',\n      splitPercentage: 20,\n    }}\n  />\n);\n\nexport default BalancedScorecard;\n","import BalancedScorecard from './BalancedScorecard';\n\nexport default BalancedScorecard;\n"],"sourceRoot":""}