{"version":3,"sources":["components/ScenarioSelector/index.js","tiles/GraphSelector/selectors.js","../node_modules/@blueprintjs/select/lib/esm/components/select/multiSelect.js","tiles/AnalysisPane/Graphs/selectors.js","components/ScenarioSwitcher/index.js","tiles/AnalysisPane/Graphs/styles.js","tiles/AnalysisPane/Graphs/DCFGraph.js","tiles/AnalysisPane/Graphs/BenefitScheduleGraph.js","tiles/AnalysisPane/Graphs/BenefitVsPhasesGraph.js","tiles/AnalysisPane/Graphs/BenefitVsDeliverablesGraph.js","tiles/AnalysisPane/Graphs/BenefitVsMeasuresGraph.js","tiles/AnalysisPane/Graphs/BenefitVsGroupsGraph.js","tiles/AnalysisPane/Graphs/BenefitVsStakeholdersGraph.js","tiles/AnalysisPane/Graphs/DeliverableVsStakeholdersGraph.js","tiles/AnalysisPane/Graphs/DeliverableVsMeasuresGraph.js","tiles/AnalysisPane/Graphs/GroupVsStakeholdersGraph.js","tiles/AnalysisPane/Graphs/VFMGraph.js","tiles/AnalysisPane/Graphs/CostScheduleGraph.js","tiles/AnalysisPane/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_2__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_3__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_4__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_5__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_6__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_7__","_blueprintjs_select__WEBPACK_IMPORTED_MODULE_8__","renderItem","active","scenario","_ref","handleClick","a","createElement","key","concat","id","text","name","onClick","connect","state","scenarios","model","programmes","_ref2","handleChange","items","itemRenderer","onItemSelect","onActiveItemChange","activeItem","popoverProps","position","Position","RIGHT_BOTTOM","filterable","style","display","marginLeft","marginRight","width","fill","small","intent","Intent","PRIMARY","rightIcon","alignText","Alignment","LEFT","getSelectedGraph","selected","analysis","Array","isArray","keys","utils","type","Object","_home_alexj_Workspace_Workspace_vmt_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","map","e","CONSTANTS","typeKey","filter","b","getCostOfCapital","costOfCapital","d","__webpack_exports__","MultiSelect","tslib__WEBPACK_IMPORTED_MODULE_0__","classnames__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_2__","_common__WEBPACK_IMPORTED_MODULE_8__","_query_list_queryList__WEBPACK_IMPORTED_MODULE_9__","_super","_this","apply","this","arguments","isOpen","props","TypedQueryList","ofType","input","queryList","refHandlers","ref","safeInvokeMember","tagInputProps","renderQueryList","listProps","_a","_b","_c","_d","selectedItems","placeholder","handlePaste","handleKeyDown","handleKeyUp","autoFocus","canEscapeKeyClose","enforceFocus","BOTTOM_LEFT","className","onInteraction","handlePopoverInteraction","popoverClassName","MULTISELECT_POPOVER","onOpened","handlePopoverOpened","onKeyDown","getTargetKeyDownHandler","onKeyUp","undefined","MULTISELECT","inputRef","inputValue","query","onAdd","values","method","onInputChange","handleQueryChange","tagRenderer","itemList","handleItemSelect","item","evt","focus","safeInvoke","setState","length","openOnKeyDown","onQueryChange","nextOpenState","requestAnimationFrame","document","activeElement","node","scrollActiveItemIntoView","handleQueryListKeyDown","which","ESCAPE","TAB","blur","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","prototype","render","restProps","renderer","displayName","defaultProps","getDCFData","presentValue","results","dcf","analysisYears","_analysisYears","forEach","reduce","acc","cur","idx","cost","Math","pow","push","data","_loop","y","scenarioData","round","objectSpread","year","getVFMData","vfm","_loop2","getBenefitScheduleData","benefitSchedule","_loop3","quarter","getCostScheduleData","costSchedule","_loop4","getBenefitVsPhasesData","benefitVsPhases","_state$model$programm","benefits","phases","phase","phaseObject","BENEFIT_TYPE_FINANCIAL","benefit","getBenefitVsDeliverablesData","benefitVsDeliverables","_state$model$programm2","deliverables","deliverable","deliverabeObject","getBenefitVsMeasuresData","benefitVsMeasures","_state$model$programm3","measures","measure","measureObject","getBenefitVsGroupsData","benefitVsGroups","_state$model$programm4","groups","group","groupObject","getBenefitVsStakeholdersData","benefitVsStakeholders","_state$model$programm5","stakeholders","stakeholder","stakeholderObject","getDeliverableVsStakeholdersData","deliverableVsStakeholders","_state$model$programm6","getDeliverableVsMeasuresData","deliverableVsMeasures","_state$model$programm7","getGroupVsStakeholdersData","groupVsStakeholders","stakeholderVsGroups","_state$model$programm8","getBaselineScenario","_API$getProgramme","API","_baselineScenario","found","find","Error","itemProps","isSelected","includes","react_default","menuItem","modifiers","icon","renderTag","setActive","s","toConsumableArray","padding","multiSelect","onRemove","value","index","colorRange","colors","chroma","scale","Graph","activeScenarios","es6","height","strokeDasharray","dataKey","scenarioId","activeScenario","i","color","hex","maxBarSize","baselineScenario","_React$useState","React","useState","_React$useState2","slicedToArray","setActiveScenarios","flexDirection","components_ScenarioSwitcher","DCFGraph_Graph","BenefitScheduleGraph_Graph","bars","stackId","renderSeries","setActiveScenario","ScenarioSelector","BenefitVsPhasesGraph_Graph","BenefitVsDeliverablesGraph_Graph","BenefitVsMeasuresGraph_Graph","BenefitVsGroupsGraph_Graph","BenefitVsStakeholdersGraph_Graph","DeliverableVsStakeholdersGraph_Graph","DeliverableVsMeasuresGraph_Graph","GroupVsStakeholdersGraph_Graph","VFMGraph_Graph","CostScheduleGraph_Graph","graph","Graphs_DCFGraph","Graphs_VFMGraph","Graphs_BenefitVsPhasesGraph","Graphs_BenefitScheduleGraph","Graphs_CostScheduleGraph","Graphs_BenefitVsDeliverablesGraph","Graphs_DeliverableVsMeasuresGraph","Graphs_DeliverableVsStakeholdersGraph","Graphs_BenefitVsMeasuresGraph","Graphs_BenefitVsGroupsGraph","Graphs_GroupVsStakeholdersGraph","Graphs_BenefitVsStakeholdersGraph"],"mappings":"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","file":"static/js/15.eddfa9f6.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { type Node } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { Alignment, ButtonGroup, Button, Intent, MenuItem, Position } from '@blueprintjs/core';\nimport { Select } from '@blueprintjs/select';\n\nimport { type Scenario } from '../../model/api/types';\nimport { type State } from '../../reducers/types';\n\ntype ScenarioSelectorProps = {\n  scenarios: Array<Scenario>,\n  active: Scenario,\n  handleChange: Scenario => void,\n};\n\ntype ItemProps = {\n  handleClick: MouseEvent => void,\n};\n\nconst renderItem = (active: Scenario) => (scenario: Scenario, { handleClick }: ItemProps): Node => {\n  return (\n    <MenuItem\n      key={`SCENARIO_SELECT_VALUE_${scenario.id}`}\n      text={scenario.name}\n      active={scenario.id === active.id}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport const ScenarioSelector = ({ scenarios, active, handleChange }: ScenarioSelectorProps) => {\n  return (\n    <div>\n      <Select\n        items={scenarios}\n        itemRenderer={renderItem(active)}\n        onItemSelect={scenario => handleChange(scenario)}\n        onActiveItemChange={scenario => handleChange(scenario)}\n        activeItem={active}\n        popoverProps={{ position: Position.RIGHT_BOTTOM }}\n        filterable={false}\n      >\n        <div style={{ display: 'inline-block', marginLeft: '7px', marginRight: '10px' }}>\n          Select Scenario:\n        </div>\n        <ButtonGroup style={{ width: '130px' }}>\n          <Button\n            fill\n            small\n            intent={Intent.PRIMARY}\n            rightIcon=\"caret-down\"\n            alignText={Alignment.LEFT}\n            text={active.name}\n          />\n        </ButtonGroup>\n      </Select>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ScenarioSelector);\n","// @flow\nimport * as CONSTANTS from '../../config/constants';\nimport * as utils from '../../utils/utils';\n\nimport { type State, type GraphObject } from '../../reducers/types';\n\nexport function getSelectedGraph(state: State): ?GraphObject {\n  const { selected } = state.analysis;\n\n  if (!selected) {\n    return undefined;\n  }\n\n  if (!Array.isArray(selected.keys) && utils.isTypeId(selected.keys)) {\n    const type = utils.getTypeObject(selected.keys);\n\n    return {\n      ...selected,\n      keys: state.model.programmes[0][type.key].map(e => e.id),\n    };\n  }\n\n  if (selected.keys === CONSTANTS.BENEFIT_TYPE_FINANCIAL) {\n    const typeKey = CONSTANTS.BENEFIT_KEY;\n    return {\n      ...selected,\n      keys: state.model.programmes[0][typeKey]\n        .filter(b => b.type === CONSTANTS.BENEFIT_TYPE_FINANCIAL)\n        .map(b => b.id),\n    };\n  }\n\n  return selected;\n}\n\nexport function getCostOfCapital(state: State) {\n  return state.analysis.costOfCapital;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, Keys, Popover, Position, TagInput, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultiSelect, _super);\n\n  function MultiSelect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isOpen: _this.props.popoverProps && _this.props.popoverProps.isOpen || false\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: function input(ref) {\n        _this.input = ref;\n        Utils.safeInvokeMember(_this.props.tagInputProps, \"inputRef\", ref);\n      },\n      queryList: function queryList(ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          _b = _a.tagInputProps,\n          tagInputProps = _b === void 0 ? {} : _b,\n          _c = _a.popoverProps,\n          popoverProps = _c === void 0 ? {} : _c,\n          _d = _a.selectedItems,\n          selectedItems = _d === void 0 ? [] : _d,\n          placeholder = _a.placeholder;\n      var handlePaste = listProps.handlePaste,\n          handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n\n      var handleTagInputAdd = function handleTagInputAdd(values, method) {\n        if (method === \"paste\") {\n          handlePaste(values);\n        }\n      };\n\n      return React.createElement(Popover, tslib_1.__assign({\n        autoFocus: false,\n        canEscapeKeyClose: true,\n        enforceFocus: false,\n        isOpen: _this.state.isOpen,\n        position: Position.BOTTOM_LEFT\n      }, popoverProps, {\n        className: classNames(listProps.className, popoverProps.className),\n        onInteraction: _this.handlePopoverInteraction,\n        popoverClassName: classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName),\n        onOpened: _this.handlePopoverOpened\n      }), React.createElement(\"div\", {\n        onKeyDown: _this.getTargetKeyDownHandler(handleKeyDown),\n        onKeyUp: _this.state.isOpen ? handleKeyUp : undefined\n      }, React.createElement(TagInput, tslib_1.__assign({\n        placeholder: placeholder\n      }, tagInputProps, {\n        className: classNames(Classes.MULTISELECT, tagInputProps.className),\n        inputRef: _this.refHandlers.input,\n        inputValue: listProps.query,\n        onAdd: handleTagInputAdd,\n        onInputChange: listProps.handleQueryChange,\n        values: selectedItems.map(_this.props.tagRenderer)\n      }))), React.createElement(\"div\", {\n        onKeyDown: _this.getTargetKeyDownHandler(handleKeyDown),\n        onKeyUp: handleKeyUp\n      }, listProps.itemList));\n    };\n\n    _this.handleItemSelect = function (item, evt) {\n      if (_this.input != null) {\n        _this.input.focus();\n      }\n\n      Utils.safeInvoke(_this.props.onItemSelect, item, evt);\n    };\n\n    _this.handleQueryChange = function (query, evt) {\n      _this.setState({\n        isOpen: query.length > 0 || !_this.props.openOnKeyDown\n      });\n\n      Utils.safeInvoke(_this.props.onQueryChange, query, evt);\n    };\n\n    _this.handlePopoverInteraction = function (nextOpenState) {\n      // deferring to rAF to get properly updated document.activeElement\n      return requestAnimationFrame(function () {\n        if (_this.input != null && _this.input !== document.activeElement) {\n          // the input is no longer focused so we can close the popover\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!_this.props.openOnKeyDown) {\n          // open the popover when focusing the tag input\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", nextOpenState);\n      });\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      if (_this.queryList != null) {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n    };\n\n    _this.getTargetKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (e) {\n        var which = e.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          // By default the escape key will not trigger a blur on the\n          // input element. It must be done explicitly.\n          if (_this.input != null) {\n            _this.input.blur();\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        if (_this.state.isOpen) {\n          Utils.safeInvoke(handleQueryListKeyDown, e);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  MultiSelect.ofType = function () {\n    return MultiSelect;\n  };\n\n  MultiSelect.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        openOnKeyDown = _a.openOnKeyDown,\n        popoverProps = _a.popoverProps,\n        tagInputProps = _a.tagInputProps,\n        restProps = tslib_1.__rest(_a, [\"openOnKeyDown\", \"popoverProps\", \"tagInputProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      onQueryChange: this.handleQueryChange,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  MultiSelect.displayName = DISPLAYNAME_PREFIX + \".MultiSelect\";\n  MultiSelect.defaultProps = {\n    placeholder: \"Search...\"\n  };\n  return MultiSelect;\n}(React.PureComponent);\n\nexport { MultiSelect };","// @flow\nimport * as API from '../../../model/api';\nimport { type State } from '../../../reducers/types';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\nexport type DCFGraphData = {\n  year: string,\n  [string]: number,\n};\n\nexport type VFMGraphData = {\n  year: string,\n  [string]: number,\n};\n\nexport type BenefitScheduleData = {\n  quarter: string,\n  [string]: number,\n};\n\nexport type CostScheduleData = {\n  quarter: string,\n  [string]: number,\n};\n\nexport type BenefitVsPhasesData = Array<{\n  benefit: string,\n  [string]: number,\n}>;\n\nexport type BenefitVsDeliverablesData = Array<{\n  benefit: string,\n  [string]: number,\n}>;\n\nexport type BenefitVsMeasuresData = Array<{\n  measure: string,\n  [string]: number,\n}>;\n\nexport type BenefitVsGroupsData = Array<{\n  group: string,\n  [string]: number,\n}>;\n\nexport type BenefitVsStakeholdersData = Array<{\n  stakeholder: string,\n  [string]: number,\n}>;\n\nexport type DeliverableVsStakeholdersData = Array<{\n  stakeholder: string,\n  [string]: number,\n}>;\n\nexport type DeliverableVsMeasuresData = Array<{\n  measure: string,\n  [string]: number,\n}>;\n\nexport type GroupVsStakeholdersData = Array<{\n  group: string,\n  [string]: number,\n}>;\n\nexport function getDCFData(state: State): Array<DCFGraphData> {\n  const presentValue = state.model.results.dcf;\n  const costOfCapital = state.analysis.costOfCapital;\n  const analysisYears = state.model._analysisYears;\n  const { scenarios } = state.model.programmes[0];\n\n  const dcf = {};\n  scenarios.forEach(scenario => {\n    if (!presentValue[scenario.id]) {\n      dcf[scenario.id] = new Array(analysisYears).fill(0);\n      return;\n    }\n    dcf[scenario.id] = presentValue[scenario.id].reduce((acc, cur, idx) => {\n      const cost = Math.pow(1 / (1 + costOfCapital), idx + 1);\n\n      if (acc.length === 0) {\n        acc.push(cur * cost);\n      } else {\n        acc.push(acc[idx - 1] + cur * cost);\n      }\n      return acc;\n    }, []);\n  });\n\n  const data = [];\n  for (let y = 0; y < analysisYears; y++) {\n    const scenarioData = {};\n    scenarios.forEach(scenario => (scenarioData[scenario.id] = Math.round(dcf[scenario.id][y])));\n\n    data.push({\n      year: `Year ${y + 1}`,\n      ...scenarioData,\n    });\n  }\n  return data;\n}\n\nexport function getVFMData(state: State): Array<VFMGraphData> {\n  const vfm = state.model.results.vfm;\n  const analysisYears = state.model._analysisYears;\n  const { scenarios } = state.model.programmes[0];\n\n  const data = [];\n  for (let y = 0; y < analysisYears; y++) {\n    const scenarioData = {};\n    scenarios.forEach(scenario => {\n      if (!vfm[scenario.id]) {\n        scenarioData[scenario.id] = new Array(analysisYears).fill(0);\n      }\n      scenarioData[scenario.id] = vfm[scenario.id][y];\n    });\n\n    data.push({\n      year: `Year ${y + 1}`,\n      ...scenarioData,\n    });\n  }\n  return data;\n}\n\nexport function getBenefitScheduleData(state: State): Array<BenefitScheduleData> {\n  const benefitSchedule = state.model.results.benefitSchedule;\n  const analysisYears = state.model._analysisYears;\n  const { scenarios } = state.model.programmes[0];\n\n  const data = [];\n  for (let y = 0; y < analysisYears; y++) {\n    const scenarioData = {};\n    scenarios.forEach(scenario => (scenarioData[scenario.id] = benefitSchedule[scenario.id][y]));\n\n    data.push({\n      quarter: `Y${y + 1}`,\n      ...scenarioData,\n    });\n  }\n  return data;\n}\n\nexport function getCostScheduleData(state: State): Array<CostScheduleData> {\n  const costSchedule = state.model.results.costSchedule;\n  const analysisYears = state.model._analysisYears;\n  const { scenarios } = state.model.programmes[0];\n\n  const data = [];\n  for (let y = 0; y < analysisYears; y++) {\n    const scenarioData = {};\n    scenarios.forEach(scenario => (scenarioData[scenario.id] = costSchedule[scenario.id][y]));\n\n    data.push({\n      quarter: `Y${y + 1}`,\n      ...scenarioData,\n    });\n  }\n  return data;\n}\n\nexport function getBenefitVsPhasesData(state: State): { [string]: BenefitVsPhasesData } {\n  const benefitVsPhases = state.model.results.benefitVsPhases;\n  const { scenarios, benefits, phases } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    phases.forEach(phase => {\n      const phaseObject = {};\n      phaseObject.phase = phase.name;\n      benefits\n        .filter(b => b.type === BENEFIT_TYPE_FINANCIAL)\n        .forEach(benefit => {\n          phaseObject[benefit.id] = benefitVsPhases[scenario.id][benefit.id][phase.id];\n        });\n      scenarioData.push(phaseObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getBenefitVsDeliverablesData(\n  state: State\n): { [string]: BenefitVsDeliverablesData } {\n  const benefitVsDeliverables = state.model.results.benefitVsDeliverables;\n  const { scenarios, benefits, deliverables } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    deliverables.forEach(deliverable => {\n      const deliverabeObject = {};\n      deliverabeObject.deliverable = deliverable.name;\n      benefits\n        .filter(b => b.type === BENEFIT_TYPE_FINANCIAL)\n        .forEach(benefit => {\n          deliverabeObject[benefit.id] =\n            benefitVsDeliverables[scenario.id][benefit.id][deliverable.id];\n        });\n      scenarioData.push(deliverabeObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getBenefitVsMeasuresData(state: State): { [string]: BenefitVsMeasuresData } {\n  const benefitVsMeasures = state.model.results.benefitVsMeasures;\n  const { scenarios, benefits, measures } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    measures.forEach(measure => {\n      const measureObject = {};\n      measureObject.measure = measure.name;\n      benefits\n        .filter(b => b.type === BENEFIT_TYPE_FINANCIAL)\n        .forEach(benefit => {\n          measureObject[benefit.id] = benefitVsMeasures[scenario.id][benefit.id][measure.id];\n        });\n      scenarioData.push(measureObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getBenefitVsGroupsData(state: State): { [string]: BenefitVsGroupsData } {\n  const benefitVsGroups = state.model.results.benefitVsGroups;\n  const { scenarios, benefits, groups } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    groups.forEach(group => {\n      const groupObject = {};\n      groupObject.group = group.name;\n      benefits\n        .filter(b => b.type === BENEFIT_TYPE_FINANCIAL)\n        .forEach(benefit => {\n          groupObject[benefit.id] = benefitVsGroups[scenario.id][benefit.id][group.id];\n        });\n      scenarioData.push(groupObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getBenefitVsStakeholdersData(\n  state: State\n): { [string]: BenefitVsStakeholdersData } {\n  const benefitVsStakeholders = state.model.results.benefitVsStakeholders;\n  const { scenarios, benefits, stakeholders } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    stakeholders.forEach(stakeholder => {\n      const stakeholderObject = {};\n      stakeholderObject.stakeholder = stakeholder.name;\n      benefits\n        .filter(b => b.type === BENEFIT_TYPE_FINANCIAL)\n        .forEach(benefit => {\n          stakeholderObject[benefit.id] =\n            benefitVsStakeholders[scenario.id][benefit.id][stakeholder.id];\n        });\n      scenarioData.push(stakeholderObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getDeliverableVsStakeholdersData(\n  state: State\n): { [string]: DeliverableVsStakeholdersData } {\n  const deliverableVsStakeholders = state.model.results.deliverableVsStakeholders;\n  const { scenarios, deliverables, stakeholders } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    stakeholders.forEach(stakeholder => {\n      const stakeholderObject = {};\n      stakeholderObject.stakeholder = stakeholder.name;\n      deliverables.forEach(deliverable => {\n        stakeholderObject[deliverable.id] =\n          deliverableVsStakeholders[scenario.id][deliverable.id][stakeholder.id];\n      });\n      scenarioData.push(stakeholderObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getDeliverableVsMeasuresData(\n  state: State\n): { [string]: DeliverableVsMeasuresData } {\n  const deliverableVsMeasures = state.model.results.deliverableVsMeasures;\n  const { scenarios, deliverables, measures } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    measures.forEach(measure => {\n      const measureObject = {};\n      measureObject.measure = measure.name;\n      deliverables.forEach(deliverable => {\n        measureObject[deliverable.id] =\n          deliverableVsMeasures[scenario.id][deliverable.id][measure.id];\n      });\n      scenarioData.push(measureObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getGroupVsStakeholdersData(state: State): { [string]: GroupVsStakeholdersData } {\n  const groupVsStakeholders = state.model.results.stakeholderVsGroups;\n  const { scenarios, groups, stakeholders } = state.model.programmes[0];\n\n  const data = {};\n  scenarios.forEach(scenario => {\n    const scenarioData = [];\n    stakeholders.forEach(stakeholder => {\n      const stakeholderObject = {};\n      stakeholderObject.stakeholder = stakeholder.name;\n      groups.forEach(group => {\n        stakeholderObject[group.id] = groupVsStakeholders[scenario.id][stakeholder.id][group.id];\n      });\n      scenarioData.push(stakeholderObject);\n    });\n    data[scenario.id] = scenarioData;\n  });\n  return data;\n}\n\nexport function getBaselineScenario(state: State) {\n  const { scenarios, _baselineScenario } = API.getProgramme(state.model);\n  const found = scenarios.find(scenario => scenario.id === _baselineScenario);\n  if (!found) {\n    throw new Error('Baseline scenario was not found');\n  }\n  return found;\n}\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { MenuItem } from '@blueprintjs/core';\nimport { MultiSelect } from '@blueprintjs/select';\n\nimport { type Scenario } from '../../model/api/types';\nimport { type State } from '../../reducers/types';\n\ntype ScenarioSwitcherProps = {\n  scenarios: Array<Scenario>,\n  active: Array<Scenario>,\n  setActive: (Array<Scenario>) => void,\n};\n\ntype ItemProps = {\n  handleClick: (SyntheticInputEvent<HTMLButtonElement>) => void,\n  index: number,\n  modifiers: {\n    active: boolean,\n    disabled: boolean,\n    matchesPredicate: boolean,\n  },\n};\n\nconst renderItem = (active: Array<Scenario>) => (scenario: Scenario, itemProps: ItemProps) => {\n  const isSelected = active.map(a => a.id).includes(scenario.id);\n  return (\n    <MenuItem\n      key={`SCENARIO_SELECT_VALUE_${scenario.id}`}\n      text={scenario.name}\n      active={itemProps.modifiers.active}\n      icon={isSelected ? 'tick' : 'blank'}\n      onClick={itemProps.handleClick}\n    />\n  );\n};\n\nconst renderTag = (scenario: Scenario) => {\n  return scenario.name;\n};\n\nconst handleItemSelect = (active: Array<Scenario>, setActive: (Array<Scenario>) => void) => (\n  scenario: Scenario\n) => {\n  if (active.map(s => s.id).includes(scenario.id)) {\n    setActive(active.filter(a => a.id !== scenario.id));\n  } else {\n    setActive([...active, scenario]);\n  }\n};\n\nexport const ScenarioSwitcher = ({ scenarios, active, setActive }: ScenarioSwitcherProps) => {\n  return (\n    <div style={{ padding: '5px' }}>\n      <span style={{ marginLeft: '2px', marginRight: '10px' }}>Select Scenarios:</span>\n      <MultiSelect\n        fill\n        selectedItems={active}\n        items={scenarios}\n        itemRenderer={renderItem(active)}\n        onItemSelect={handleItemSelect(active, setActive)}\n        tagRenderer={renderTag}\n        tagInputProps={{\n          onRemove: (value, index) => setActive(active.filter((s, idx) => idx !== index)),\n        }}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ScenarioSwitcher);\n","export const colorRange = ['#aee8ec', '#05587c'];\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getDCFData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSwitcher from '../../../components/ScenarioSwitcher';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario } from '../../../model/api/types';\nimport { type DCFGraphData } from './selectors';\n\ntype DCFGraphProps = {\n  data: Array<DCFGraphData>,\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n};\n\ntype GraphProps = {\n  data: Array<DCFGraphData>,\n  activeScenarios: Array<Scenario>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (activeScenario, color) => (\n  <Bar\n    key={`DCF_BAR_${activeScenario.id}`}\n    dataKey={activeScenario.id}\n    name={activeScenario.name}\n    fill={color}\n    maxBarSize={200}\n  />\n);\n\nconst Graph = ({ data, activeScenarios }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"year\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {activeScenarios.map((scenarioId, idx) =>\n          renderSeries(scenarioId, getColor(idx, activeScenarios.length)))}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst DCFGraph = ({ data, scenarios, baselineScenario }: DCFGraphProps) => {\n  const [activeScenarios, setActiveScenarios] = React.useState(scenarios);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSwitcher active={activeScenarios} setActive={setActiveScenarios} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenarios={activeScenarios} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getDCFData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(DCFGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitScheduleData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSwitcher from '../../../components/ScenarioSwitcher';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario } from '../../../model/api/types';\nimport { type BenefitScheduleData } from './selectors';\n\ntype BenefitScheduleGraphProps = {\n  data: Array<BenefitScheduleData>,\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n};\n\ntype GraphProps = {\n  data: Array<BenefitScheduleData>,\n  activeScenarios: Array<Scenario>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (activeScenario, color) => (\n  <Bar\n    key={`BENEFIT_SCHEDULE_BAR_${activeScenario.id}`}\n    dataKey={activeScenario.id}\n    name={activeScenario.name}\n    fill={color}\n    maxBarSize={200}\n  />\n);\n\nconst Graph = ({ data, activeScenarios }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"quarter\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {activeScenarios.map((scenarioId, idx) =>\n          renderSeries(scenarioId, getColor(idx, activeScenarios.length)))}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitScheduleGraph = ({ data, scenarios, baselineScenario }: BenefitScheduleGraphProps) => {\n  const [activeScenarios, setActiveScenarios] = React.useState(scenarios);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSwitcher active={activeScenarios} setActive={setActiveScenarios} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenarios={activeScenarios} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitScheduleData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitScheduleGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitVsPhasesData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Benefit } from '../../../model/api/types';\nimport { type BenefitVsPhasesData } from './selectors';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\ntype BenefitVsPhasesGraphProps = {\n  data: { [string]: BenefitVsPhasesData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  benefits: Array<Benefit>,\n};\n\ntype GraphProps = {\n  data: { [string]: BenefitVsPhasesData },\n  activeScenario: Scenario,\n  benefits: Array<Benefit>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, benefits) => {\n  const bars = [];\n  benefits.forEach((benefit, idx) => {\n    bars.push(\n      <Bar\n        key={benefit.id}\n        dataKey={benefit.id}\n        name={benefit.name}\n        stackId=\"a\"\n        fill={getColor(idx, benefits.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, benefits }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"phase\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], benefits)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitVsPhasesGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  benefits,\n}: BenefitVsPhasesGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} benefits={benefits} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitVsPhasesData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  benefits: state.model.programmes[0].benefits.filter(b => b.type === BENEFIT_TYPE_FINANCIAL),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitVsPhasesGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitVsDeliverablesData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Benefit } from '../../../model/api/types';\nimport { type BenefitVsDeliverablesData } from './selectors';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\ntype BenefitVsDeliverablesGraphProps = {\n  data: { [string]: BenefitVsDeliverablesData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  benefits: Array<Benefit>,\n};\n\ntype GraphProps = {\n  data: { [string]: BenefitVsDeliverablesData },\n  activeScenario: Scenario,\n  benefits: Array<Benefit>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, benefits) => {\n  const bars = [];\n  benefits.forEach((benefit, idx) => {\n    bars.push(\n      <Bar\n        key={benefit.id}\n        dataKey={benefit.id}\n        name={benefit.name}\n        stackId=\"a\"\n        fill={getColor(idx, benefits.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, benefits }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"deliverable\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], benefits)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitVsDeliverablesGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  benefits,\n}: BenefitVsDeliverablesGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} benefits={benefits} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitVsDeliverablesData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  benefits: state.model.programmes[0].benefits.filter(b => b.type === BENEFIT_TYPE_FINANCIAL),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitVsDeliverablesGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitVsMeasuresData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Benefit } from '../../../model/api/types';\nimport { type BenefitVsMeasuresData } from './selectors';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\ntype BenefitVsMeasuresGraphProps = {\n  data: { [string]: BenefitVsMeasuresData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  benefits: Array<Benefit>,\n};\n\ntype GraphProps = {\n  data: { [string]: BenefitVsMeasuresData },\n  activeScenario: Scenario,\n  benefits: Array<Benefit>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, benefits) => {\n  const bars = [];\n  benefits.forEach((benefit, idx) => {\n    bars.push(\n      <Bar\n        key={benefit.id}\n        dataKey={benefit.id}\n        name={benefit.name}\n        stackId=\"a\"\n        fill={getColor(idx, benefits.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, benefits }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"measure\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], benefits)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitVsMeasuresGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  benefits,\n}: BenefitVsMeasuresGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} benefits={benefits} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitVsMeasuresData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  benefits: state.model.programmes[0].benefits.filter(b => b.type === BENEFIT_TYPE_FINANCIAL),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitVsMeasuresGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitVsGroupsData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Benefit } from '../../../model/api/types';\nimport { type BenefitVsGroupsData } from './selectors';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\ntype BenefitVsGroupsGraphProps = {\n  data: { [string]: BenefitVsGroupsData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  benefits: Array<Benefit>,\n};\n\ntype GraphProps = {\n  data: { [string]: BenefitVsGroupsData },\n  activeScenario: Scenario,\n  benefits: Array<Benefit>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, benefits) => {\n  const bars = [];\n  benefits.forEach((benefit, idx) => {\n    bars.push(\n      <Bar\n        key={benefit.id}\n        dataKey={benefit.id}\n        name={benefit.name}\n        stackId=\"a\"\n        fill={getColor(idx, benefits.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, benefits }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"group\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], benefits)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitVsGroupsGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  benefits,\n}: BenefitVsGroupsGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} benefits={benefits} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitVsGroupsData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  benefits: state.model.programmes[0].benefits.filter(b => b.type === BENEFIT_TYPE_FINANCIAL),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitVsGroupsGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getBenefitVsStakeholdersData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Benefit } from '../../../model/api/types';\nimport { type BenefitVsStakeholdersData } from './selectors';\nimport { BENEFIT_TYPE_FINANCIAL } from '../../../config/constants';\n\ntype BenefitVsStakeholdersGraphProps = {\n  data: { [string]: BenefitVsStakeholdersData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  benefits: Array<Benefit>,\n};\n\ntype GraphProps = {\n  data: { [string]: BenefitVsStakeholdersData },\n  activeScenario: Scenario,\n  benefits: Array<Benefit>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, benefits) => {\n  const bars = [];\n  benefits.forEach((benefit, idx) => {\n    bars.push(\n      <Bar\n        key={benefit.id}\n        dataKey={benefit.id}\n        name={benefit.name}\n        stackId=\"a\"\n        fill={getColor(idx, benefits.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, benefits }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"stakeholder\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], benefits)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst BenefitVsStakeholdersGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  benefits,\n}: BenefitVsStakeholdersGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} benefits={benefits} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getBenefitVsStakeholdersData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  benefits: state.model.programmes[0].benefits.filter(b => b.type === BENEFIT_TYPE_FINANCIAL),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BenefitVsStakeholdersGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getDeliverableVsStakeholdersData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Deliverable } from '../../../model/api/types';\nimport { type DeliverableVsStakeholdersData } from './selectors';\n\ntype DeliverableVsStakeholdersGraphProps = {\n  data: { [string]: DeliverableVsStakeholdersData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  deliverables: Array<Deliverable>,\n};\n\ntype GraphProps = {\n  data: { [string]: DeliverableVsStakeholdersData },\n  activeScenario: Scenario,\n  deliverables: Array<Deliverable>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, deliverables) => {\n  const bars = [];\n  deliverables.forEach((deliverable, idx) => {\n    bars.push(\n      <Bar\n        key={deliverable.id}\n        dataKey={deliverable.id}\n        name={deliverable.name}\n        stackId=\"a\"\n        fill={getColor(idx, deliverables.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, deliverables }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"stakeholder\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], deliverables)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst DeliverableVsStakeholdersGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  deliverables,\n}: DeliverableVsStakeholdersGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} deliverables={deliverables} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getDeliverableVsStakeholdersData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  deliverables: state.model.programmes[0].deliverables,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(DeliverableVsStakeholdersGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getDeliverableVsMeasuresData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Deliverable } from '../../../model/api/types';\nimport { type DeliverableVsMeasuresData } from './selectors';\n\ntype DeliverableVsMeasuresGraphProps = {\n  data: { [string]: DeliverableVsMeasuresData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  deliverables: Array<Deliverable>,\n};\n\ntype GraphProps = {\n  data: { [string]: DeliverableVsMeasuresData },\n  activeScenario: Scenario,\n  deliverables: Array<Deliverable>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, deliverables) => {\n  const bars = [];\n  deliverables.forEach((deliverable, idx) => {\n    bars.push(\n      <Bar\n        key={deliverable.id}\n        dataKey={deliverable.id}\n        name={deliverable.name}\n        stackId=\"a\"\n        fill={getColor(idx, deliverables.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, deliverables }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"measure\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], deliverables)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst DeliverableVsMeasuresGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  deliverables,\n}: DeliverableVsMeasuresGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} deliverables={deliverables} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getDeliverableVsMeasuresData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  deliverables: state.model.programmes[0].deliverables,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(DeliverableVsMeasuresGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getGroupVsStakeholdersData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSelector from '../../../components/ScenarioSelector';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario, type Stakeholder } from '../../../model/api/types';\nimport { type GroupVsStakeholdersData } from './selectors';\n\ntype GroupVsStakeholdersGraphProps = {\n  data: { [string]: GroupVsStakeholdersData },\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n  stakeholders: Array<Stakeholder>,\n};\n\ntype GraphProps = {\n  data: { [string]: GroupVsStakeholdersData },\n  activeScenario: Scenario,\n  stakeholders: Array<Stakeholder>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (data, stakeholders) => {\n  const bars = [];\n  stakeholders.forEach((stakeholder, idx) => {\n    bars.push(\n      <Bar\n        key={stakeholder.id}\n        dataKey={stakeholder.id}\n        name={stakeholder.name}\n        stackId=\"a\"\n        fill={getColor(idx, stakeholders.length)}\n        maxBarSize={200}\n      />\n    );\n  });\n  return bars;\n};\n\nconst Graph = ({ data, activeScenario, stakeholders }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data[activeScenario.id]}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"group\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {renderSeries(data[activeScenario.id], stakeholders)}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst GroupVsStakeholdersGraph = ({\n  data,\n  scenarios,\n  baselineScenario,\n  stakeholders,\n}: GroupVsStakeholdersGraphProps) => {\n  const [activeScenario, setActiveScenario] = React.useState(baselineScenario);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSelector active={activeScenario} handleChange={setActiveScenario} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenario={activeScenario} stakeholders={stakeholders} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getGroupVsStakeholdersData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n  stakeholders: state.model.programmes[0].stakeholders,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(GroupVsStakeholdersGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getVFMData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSwitcher from '../../../components/ScenarioSwitcher';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario } from '../../../model/api/types';\nimport { type VFMGraphData } from './selectors';\n\ntype VFMGraphProps = {\n  data: Array<VFMGraphData>,\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n};\n\ntype GraphProps = {\n  data: Array<VFMGraphData>,\n  activeScenarios: Array<Scenario>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (activeScenario, color) => (\n  <Bar\n    key={`VFM_BAR_${activeScenario.id}`}\n    dataKey={activeScenario.id}\n    name={activeScenario.name}\n    fill={color}\n    maxBarSize={200}\n  />\n);\n\nconst Graph = ({ data, activeScenarios }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"year\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {activeScenarios.map((scenarioId, idx) =>\n          renderSeries(scenarioId, getColor(idx, activeScenarios.length)))}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst VFMGraph = ({ data, scenarios, baselineScenario }: VFMGraphProps) => {\n  const [activeScenarios, setActiveScenarios] = React.useState(scenarios);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSwitcher active={activeScenarios} setActive={setActiveScenarios} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenarios={activeScenarios} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getVFMData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(VFMGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport chroma from 'chroma-js';\n\nimport { getBaselineScenario, getCostScheduleData } from './selectors';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts';\n\nimport ScenarioSwitcher from '../../../components/ScenarioSwitcher';\n\nimport { colorRange } from './styles';\n\nimport { type State } from '../../../reducers/types';\nimport { type Scenario } from '../../../model/api/types';\nimport { type CostScheduleData } from './selectors';\n\ntype CostScheduleGraphProps = {\n  data: Array<CostScheduleData>,\n  baselineScenario: Scenario,\n  scenarios: Array<Scenario>,\n};\n\ntype GraphProps = {\n  data: Array<CostScheduleData>,\n  activeScenarios: Array<Scenario>,\n};\n\n// Color scales\nconst colors = chroma.scale(colorRange);\nconst getColor = (i, n) => colors((i + 1) / (n + 1)).hex();\n\nconst renderSeries = (activeScenario, color) => (\n  <Bar\n    key={`COST_SCHEDULE_BAR_${activeScenario.id}`}\n    dataKey={activeScenario.id}\n    name={activeScenario.name}\n    fill={color}\n    maxBarSize={200}\n  />\n);\n\nconst Graph = ({ data, activeScenarios }: GraphProps) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"quarter\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {activeScenarios.map((scenarioId, idx) =>\n          renderSeries(scenarioId, getColor(idx, activeScenarios.length)))}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst CostScheduleGraph = ({ data, scenarios, baselineScenario }: CostScheduleGraphProps) => {\n  const [activeScenarios, setActiveScenarios] = React.useState(scenarios);\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n      <ScenarioSwitcher active={activeScenarios} setActive={setActiveScenarios} />\n      <div style={{ display: 'flex', width: '100%', height: '100%', padding: '25px' }}>\n        <Graph data={data} activeScenarios={activeScenarios} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  data: getCostScheduleData(state),\n  baselineScenario: getBaselineScenario(state),\n  scenarios: state.model.programmes[0].scenarios,\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(CostScheduleGraph);\n","// @flow\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as CONSTANTS from '../../config/constants';\n\nimport { getSelectedGraph } from '../GraphSelector/selectors';\n\nimport { DCFGraph } from './Graphs';\n\nimport { type State, type GraphObject } from '../../reducers/types';\n\nimport BenefitScheduleGraph from './Graphs/BenefitScheduleGraph';\nimport BenefitVsPhasesGraph from './Graphs/BenefitVsPhasesGraph';\nimport BenefitVsDeliverablesGraph from './Graphs/BenefitVsDeliverablesGraph';\nimport BenefitVsMeasuresGraph from './Graphs/BenefitVsMeasuresGraph';\nimport BenefitVsGroupsGraph from './Graphs/BenefitVsGroupsGraph';\nimport BenefitVsStakeholdersGraph from './Graphs/BenefitVsStakeholdersGraph';\nimport DeliverableVsStakeholdersGraph from './Graphs/DeliverableVsStakeholdersGraph';\nimport DeliverableVsMeasuresGraph from './Graphs/DeliverableVsMeasuresGraph';\nimport GroupVsStakeholdersGraph from './Graphs/GroupVsStakeholdersGraph';\nimport VFMGraph from './Graphs/VFMGraph';\nimport CostScheduleGraph from './Graphs/CostScheduleGraph';\n\ntype AnalysisPaneProps = {\n  graph: GraphObject,\n};\n\nconst AnalysisPane = ({ graph }: AnalysisPaneProps) => {\n  switch (graph.key) {\n    case CONSTANTS.DCF_KEY:\n      return <DCFGraph />;\n    case CONSTANTS.VALUE_FOR_MONEY_KEY:\n      return <VFMGraph />;\n    case CONSTANTS.BENEFITS_PHASES_KEY:\n      return <BenefitVsPhasesGraph />;\n    case CONSTANTS.BENEFITS_YEARS_KEY:\n      return <BenefitScheduleGraph />;\n    case CONSTANTS.COSTS_YEARS_KEY:\n      return <CostScheduleGraph />;\n    case CONSTANTS.BENEFITS_DELIVERABLES_KEY:\n      return <BenefitVsDeliverablesGraph />;\n    case CONSTANTS.DELIVERABLES_MEASURES_KEY:\n      return <DeliverableVsMeasuresGraph />;\n    case CONSTANTS.DELIVERABLES_STAKEHOLDERS_KEY:\n      return <DeliverableVsStakeholdersGraph />;\n    case CONSTANTS.BENEFITS_MEASURES_KEY:\n      return <BenefitVsMeasuresGraph />;\n    case CONSTANTS.BENEFITS_GROUPS_KEY:\n      return <BenefitVsGroupsGraph />;\n    case CONSTANTS.GROUPS_STAKEHOLDERS_KEY:\n      return <GroupVsStakeholdersGraph />;\n    case CONSTANTS.BENEFITS_STAKEHOLDERS_KEY:\n      return <BenefitVsStakeholdersGraph />;\n    default:\n      throw new Error('Unrecognised graph key when rendering analysis pane');\n  }\n};\n\nconst mapStateToProps = (state: State) => ({\n  graph: getSelectedGraph(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(AnalysisPane);\n"],"sourceRoot":""}